var documenterSearchIndex = {"docs":
[{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"EditURL = \"https://github.com/maartenvd/MPSKit.jl/examples/quantum1d/2.haldane/main.jl\"","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"examples/quantum1d/2.haldane/#demo_haldane","page":"The Haldane gap","title":"The Haldane gap","text":"","category":"section"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"In this tutorial we will calculate the Haldane gap (the energy gap in the S = 1 Heisenberg model) in two different ways. To follow the tutorial you need the following packages:","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"using MPSKit, MPSKitModels, TensorKit, Plots, Polynomials\nimport TensorOperations; TensorOperations.disable_cache(); # hide","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"The Heisenberg model is defined by the following hamiltonian:","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"H = -J_ij (X_i X_j + Y_i Y_j + Z_i Z_j)","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"This hamiltonian has an SU(2) symmetry, which we can enforce by using SU(2)-symmetric tensors:","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"H = heisenberg_XXX(ComplexF64, SU2Irrep; spin=1, J=-1);","category":"page"},{"location":"examples/quantum1d/2.haldane/#Finite-size-extrapolation","page":"The Haldane gap","title":"Finite size extrapolation","text":"","category":"section"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"We can start the analysis using finite-size methods. The groundstate of this model can be approximated using finite MPS through the use of DMRG.","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"The typical way to find excited states is to minimize the energy while adding an error term λ leftgsright left gsright Here we will instead use the quasiparticle ansatz.","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"In Steven White's original DMRG paper it was remarked that the S = 1 excitations correspond to edge states, and that one should define the Haldane gap as the difference in energy between the S = 2 and S = 1 states. This can be done as follows.","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"L = 10\nphysical_space = Rep[SU₂](1 => 1)\nvirtual_space = Rep[SU₂](0 => 15, 1 => 15, 2 => 10, 3 => 5)\nψ₀ = FiniteMPS(rand, ComplexF64, L, physical_space, virtual_space)\nψ, envs, delta = find_groundstate(ψ₀, H, DMRG(; verbose=false))\nE₀ = real.(expectation_value(ψ, H))\nEn_1, st_1 = excitations(H, QuasiparticleAnsatz(), ψ, envs; sector=SU₂(1))\nEn_2, st_2 = excitations(H, QuasiparticleAnsatz(), ψ, envs; sector=SU₂(2))\nΔE_finite = real(En_2[1] - En_1[1])","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"-0.2897302384697755","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"We can go even further and doublecheck the claim that S = 1 is an edge excitation, by plotting the energy density.","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"p_density = plot(; xaxis=\"position\", yaxis=\"energy density\")\nexcited_1 = convert(FiniteMPS, st_1[1])\nexcited_2 = convert(FiniteMPS, st_2[1])\nplot!(p_density, real.(expectation_value(excited_1, H) .- E₀) ./ L; label=\"S = 1\")\nplot!(p_density, real.(expectation_value(excited_2, H) .- E₀) ./ L; label=\"S = 2\")","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip340\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip340)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip341\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip340)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip342\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"402.271,1505.26 402.271,47.2441 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"873.972,1505.26 873.972,47.2441 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1345.67,1505.26 1345.67,47.2441 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1817.37,1505.26 1817.37,47.2441 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2289.08,1505.26 2289.08,47.2441 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"402.271,1505.26 402.271,1486.36 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"873.972,1505.26 873.972,1486.36 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1345.67,1505.26 1345.67,1486.36 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1817.37,1505.26 1817.37,1486.36 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2289.08,1505.26 2289.08,1486.36 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M396.923 1563.72 L413.243 1563.72 L413.243 1567.66 L391.298 1567.66 L391.298 1563.72 Q393.96 1560.97 398.544 1556.34 Q403.15 1551.69 404.331 1550.35 Q406.576 1547.82 407.456 1546.09 Q408.358 1544.33 408.358 1542.64 Q408.358 1539.88 406.414 1538.15 Q404.493 1536.41 401.391 1536.41 Q399.192 1536.41 396.738 1537.17 Q394.308 1537.94 391.53 1539.49 L391.53 1534.77 Q394.354 1533.63 396.808 1533.05 Q399.261 1532.47 401.298 1532.47 Q406.669 1532.47 409.863 1535.16 Q413.058 1537.85 413.058 1542.34 Q413.058 1544.47 412.247 1546.39 Q411.46 1548.28 409.354 1550.88 Q408.775 1551.55 405.673 1554.77 Q402.571 1557.96 396.923 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M876.981 1537.17 L865.176 1555.62 L876.981 1555.62 L876.981 1537.17 M875.754 1533.1 L881.634 1533.1 L881.634 1555.62 L886.564 1555.62 L886.564 1559.51 L881.634 1559.51 L881.634 1567.66 L876.981 1567.66 L876.981 1559.51 L861.379 1559.51 L861.379 1555 L875.754 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1346.08 1548.52 Q1342.93 1548.52 1341.08 1550.67 Q1339.25 1552.82 1339.25 1556.57 Q1339.25 1560.3 1341.08 1562.47 Q1342.93 1564.63 1346.08 1564.63 Q1349.23 1564.63 1351.06 1562.47 Q1352.91 1560.3 1352.91 1556.57 Q1352.91 1552.82 1351.06 1550.67 Q1349.23 1548.52 1346.08 1548.52 M1355.36 1533.86 L1355.36 1538.12 Q1353.6 1537.29 1351.8 1536.85 Q1350.01 1536.41 1348.25 1536.41 Q1343.62 1536.41 1341.17 1539.53 Q1338.74 1542.66 1338.39 1548.98 Q1339.76 1546.97 1341.82 1545.9 Q1343.88 1544.81 1346.36 1544.81 Q1351.56 1544.81 1354.57 1547.98 Q1357.61 1551.13 1357.61 1556.57 Q1357.61 1561.9 1354.46 1565.11 Q1351.31 1568.33 1346.08 1568.33 Q1340.08 1568.33 1336.91 1563.75 Q1333.74 1559.14 1333.74 1550.41 Q1333.74 1542.22 1337.63 1537.36 Q1341.52 1532.47 1348.07 1532.47 Q1349.83 1532.47 1351.61 1532.82 Q1353.42 1533.17 1355.36 1533.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1817.37 1551.25 Q1814.04 1551.25 1812.12 1553.03 Q1810.22 1554.81 1810.22 1557.94 Q1810.22 1561.06 1812.12 1562.85 Q1814.04 1564.63 1817.37 1564.63 Q1820.71 1564.63 1822.63 1562.85 Q1824.55 1561.04 1824.55 1557.94 Q1824.55 1554.81 1822.63 1553.03 Q1820.73 1551.25 1817.37 1551.25 M1812.7 1549.26 Q1809.69 1548.52 1808 1546.46 Q1806.33 1544.4 1806.33 1541.43 Q1806.33 1537.29 1809.27 1534.88 Q1812.24 1532.47 1817.37 1532.47 Q1822.54 1532.47 1825.48 1534.88 Q1828.42 1537.29 1828.42 1541.43 Q1828.42 1544.4 1826.73 1546.46 Q1825.06 1548.52 1822.07 1549.26 Q1825.45 1550.04 1827.33 1552.34 Q1829.23 1554.63 1829.23 1557.94 Q1829.23 1562.96 1826.15 1565.65 Q1823.09 1568.33 1817.37 1568.33 Q1811.66 1568.33 1808.58 1565.65 Q1805.52 1562.96 1805.52 1557.94 Q1805.52 1554.63 1807.42 1552.34 Q1809.32 1550.04 1812.7 1549.26 M1810.99 1541.87 Q1810.99 1544.56 1812.65 1546.06 Q1814.34 1547.57 1817.37 1547.57 Q1820.38 1547.57 1822.07 1546.06 Q1823.79 1544.56 1823.79 1541.87 Q1823.79 1539.19 1822.07 1537.68 Q1820.38 1536.18 1817.37 1536.18 Q1814.34 1536.18 1812.65 1537.68 Q1810.99 1539.19 1810.99 1541.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2263.76 1563.72 L2271.4 1563.72 L2271.4 1537.36 L2263.09 1539.03 L2263.09 1534.77 L2271.36 1533.1 L2276.03 1533.1 L2276.03 1563.72 L2283.67 1563.72 L2283.67 1567.66 L2263.76 1567.66 L2263.76 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2303.12 1536.18 Q2299.5 1536.18 2297.68 1539.74 Q2295.87 1543.28 2295.87 1550.41 Q2295.87 1557.52 2297.68 1561.09 Q2299.5 1564.63 2303.12 1564.63 Q2306.75 1564.63 2308.56 1561.09 Q2310.38 1557.52 2310.38 1550.41 Q2310.38 1543.28 2308.56 1539.74 Q2306.75 1536.18 2303.12 1536.18 M2303.12 1532.47 Q2308.93 1532.47 2311.98 1537.08 Q2315.06 1541.66 2315.06 1550.41 Q2315.06 1559.14 2311.98 1563.75 Q2308.93 1568.33 2303.12 1568.33 Q2297.31 1568.33 2294.23 1563.75 Q2291.17 1559.14 2291.17 1550.41 Q2291.17 1541.66 2294.23 1537.08 Q2297.31 1532.47 2303.12 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1110.27 1644.78 L1110.27 1663.68 L1104.38 1663.68 L1104.38 1614.48 L1110.27 1614.48 L1110.27 1619.89 Q1112.11 1616.7 1114.92 1615.18 Q1117.75 1613.62 1121.66 1613.62 Q1128.16 1613.62 1132.2 1618.77 Q1136.27 1623.93 1136.27 1632.33 Q1136.27 1640.73 1132.2 1645.89 Q1128.16 1651.05 1121.66 1651.05 Q1117.75 1651.05 1114.92 1649.52 Q1112.11 1647.96 1110.27 1644.78 M1130.19 1632.33 Q1130.19 1625.87 1127.52 1622.21 Q1124.88 1618.52 1120.23 1618.52 Q1115.58 1618.52 1112.91 1622.21 Q1110.27 1625.87 1110.27 1632.33 Q1110.27 1638.79 1112.91 1642.48 Q1115.58 1646.15 1120.23 1646.15 Q1124.88 1646.15 1127.52 1642.48 Q1130.19 1638.79 1130.19 1632.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1159.79 1618.58 Q1155.08 1618.58 1152.35 1622.27 Q1149.61 1625.93 1149.61 1632.33 Q1149.61 1638.73 1152.31 1642.42 Q1155.05 1646.08 1159.79 1646.08 Q1164.47 1646.08 1167.21 1642.39 Q1169.95 1638.7 1169.95 1632.33 Q1169.95 1626 1167.21 1622.31 Q1164.47 1618.58 1159.79 1618.58 M1159.79 1613.62 Q1167.43 1613.62 1171.79 1618.58 Q1176.15 1623.55 1176.15 1632.33 Q1176.15 1641.08 1171.79 1646.08 Q1167.43 1651.05 1159.79 1651.05 Q1152.12 1651.05 1147.76 1646.08 Q1143.43 1641.08 1143.43 1632.33 Q1143.43 1623.55 1147.76 1618.58 Q1152.12 1613.62 1159.79 1613.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1208.59 1615.53 L1208.59 1621.06 Q1206.1 1619.79 1203.43 1619.15 Q1200.76 1618.52 1197.89 1618.52 Q1193.53 1618.52 1191.34 1619.85 Q1189.17 1621.19 1189.17 1623.87 Q1189.17 1625.9 1190.73 1627.08 Q1192.29 1628.23 1197 1629.28 L1199.01 1629.72 Q1205.25 1631.06 1207.86 1633.51 Q1210.5 1635.93 1210.5 1640.29 Q1210.5 1645.25 1206.55 1648.15 Q1202.64 1651.05 1195.76 1651.05 Q1192.9 1651.05 1189.78 1650.47 Q1186.69 1649.93 1183.25 1648.82 L1183.25 1642.77 Q1186.5 1644.46 1189.65 1645.32 Q1192.8 1646.15 1195.89 1646.15 Q1200.03 1646.15 1202.25 1644.74 Q1204.48 1643.31 1204.48 1640.73 Q1204.48 1638.35 1202.86 1637.07 Q1201.27 1635.8 1195.82 1634.62 L1193.79 1634.15 Q1188.34 1633 1185.93 1630.64 Q1183.51 1628.26 1183.51 1624.12 Q1183.51 1619.09 1187.07 1616.35 Q1190.64 1613.62 1197.19 1613.62 Q1200.44 1613.62 1203.3 1614.09 Q1206.17 1614.57 1208.59 1615.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1219.82 1614.48 L1225.68 1614.48 L1225.68 1650.12 L1219.82 1650.12 L1219.82 1614.48 M1219.82 1600.6 L1225.68 1600.6 L1225.68 1608.01 L1219.82 1608.01 L1219.82 1600.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1243.73 1604.35 L1243.73 1614.48 L1255.79 1614.48 L1255.79 1619.03 L1243.73 1619.03 L1243.73 1638.38 Q1243.73 1642.74 1244.9 1643.98 Q1246.11 1645.22 1249.77 1645.22 L1255.79 1645.22 L1255.79 1650.12 L1249.77 1650.12 Q1242.99 1650.12 1240.42 1647.61 Q1237.84 1645.06 1237.84 1638.38 L1237.84 1619.03 L1233.54 1619.03 L1233.54 1614.48 L1237.84 1614.48 L1237.84 1604.35 L1243.73 1604.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1263.49 1614.48 L1269.35 1614.48 L1269.35 1650.12 L1263.49 1650.12 L1263.49 1614.48 M1263.49 1600.6 L1269.35 1600.6 L1269.35 1608.01 L1263.49 1608.01 L1263.49 1600.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1295.42 1618.58 Q1290.7 1618.58 1287.97 1622.27 Q1285.23 1625.93 1285.23 1632.33 Q1285.23 1638.73 1287.94 1642.42 Q1290.67 1646.08 1295.42 1646.08 Q1300.09 1646.08 1302.83 1642.39 Q1305.57 1638.7 1305.57 1632.33 Q1305.57 1626 1302.83 1622.31 Q1300.09 1618.58 1295.42 1618.58 M1295.42 1613.62 Q1303.05 1613.62 1307.41 1618.58 Q1311.78 1623.55 1311.78 1632.33 Q1311.78 1641.08 1307.41 1646.08 Q1303.05 1651.05 1295.42 1651.05 Q1287.74 1651.05 1283.38 1646.08 Q1279.06 1641.08 1279.06 1632.33 Q1279.06 1623.55 1283.38 1618.58 Q1287.74 1613.62 1295.42 1613.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M1351.12 1628.61 L1351.12 1650.12 L1345.26 1650.12 L1345.26 1628.8 Q1345.26 1623.74 1343.29 1621.22 Q1341.31 1618.71 1337.37 1618.71 Q1332.62 1618.71 1329.89 1621.73 Q1327.15 1624.76 1327.15 1629.98 L1327.15 1650.12 L1321.26 1650.12 L1321.26 1614.48 L1327.15 1614.48 L1327.15 1620.01 Q1329.25 1616.8 1332.08 1615.21 Q1334.95 1613.62 1338.67 1613.62 Q1344.81 1613.62 1347.96 1617.44 Q1351.12 1621.22 1351.12 1628.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1334.93 2352.76,1334.93 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,977.683 2352.76,977.683 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,620.439 2352.76,620.439 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,263.195 2352.76,263.195 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1334.93 121.638,1334.93 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,977.683 121.638,977.683 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,620.439 121.638,620.439 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,263.195 121.638,263.195 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M-99.5321 1335.38 L-69.8563 1335.38 L-69.8563 1339.31 L-99.5321 1339.31 L-99.5321 1335.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-49.7638 1320.73 Q-53.3749 1320.73 -55.2036 1324.29 Q-57.0092 1327.83 -57.0092 1334.96 Q-57.0092 1342.07 -55.2036 1345.63 Q-53.3749 1349.17 -49.7638 1349.17 Q-46.1296 1349.17 -44.3241 1345.63 Q-42.4954 1342.07 -42.4954 1334.96 Q-42.4954 1327.83 -44.3241 1324.29 Q-46.1296 1320.73 -49.7638 1320.73 M-49.7638 1317.02 Q-43.9537 1317.02 -40.8982 1321.63 Q-37.8195 1326.21 -37.8195 1334.96 Q-37.8195 1343.69 -40.8982 1348.29 Q-43.9537 1352.88 -49.7638 1352.88 Q-55.574 1352.88 -58.6527 1348.29 Q-61.7082 1343.69 -61.7082 1334.96 Q-61.7082 1326.21 -58.6527 1321.63 Q-55.574 1317.02 -49.7638 1317.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-29.6019 1346.33 L-24.7177 1346.33 L-24.7177 1352.21 L-29.6019 1352.21 L-29.6019 1346.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-4.53261 1320.73 Q-8.1437 1320.73 -9.97239 1324.29 Q-11.7779 1327.83 -11.7779 1334.96 Q-11.7779 1342.07 -9.97239 1345.63 Q-8.1437 1349.17 -4.53261 1349.17 Q-0.898369 1349.17 0.907177 1345.63 Q2.73587 1342.07 2.73587 1334.96 Q2.73587 1327.83 0.907177 1324.29 Q-0.898369 1320.73 -4.53261 1320.73 M-4.53261 1317.02 Q1.27755 1317.02 4.33308 1321.63 Q7.41177 1326.21 7.41177 1334.96 Q7.41177 1343.69 4.33308 1348.29 Q1.27755 1352.88 -4.53261 1352.88 Q-10.3428 1352.88 -13.4215 1348.29 Q-16.477 1343.69 -16.477 1334.96 Q-16.477 1326.21 -13.4215 1321.63 Q-10.3428 1317.02 -4.53261 1317.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M16.4395 1348.27 L24.0783 1348.27 L24.0783 1321.91 L15.7682 1323.57 L15.7682 1319.31 L24.0321 1317.65 L28.708 1317.65 L28.708 1348.27 L36.3468 1348.27 L36.3468 1352.21 L16.4395 1352.21 L16.4395 1348.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M45.8375 1317.65 L64.1939 1317.65 L64.1939 1321.58 L50.1199 1321.58 L50.1199 1330.05 Q51.1384 1329.71 52.1569 1329.54 Q53.1754 1329.36 54.1939 1329.36 Q59.9809 1329.36 63.3605 1332.53 Q66.7402 1335.7 66.7402 1341.12 Q66.7402 1346.7 63.268 1349.8 Q59.7958 1352.88 53.4763 1352.88 Q51.3004 1352.88 49.0319 1352.51 Q46.7866 1352.14 44.3792 1351.4 L44.3792 1346.7 Q46.4625 1347.83 48.6847 1348.39 Q50.9069 1348.94 53.3837 1348.94 Q57.3884 1348.94 59.7263 1346.84 Q62.0643 1344.73 62.0643 1341.12 Q62.0643 1337.51 59.7263 1335.4 Q57.3884 1333.29 53.3837 1333.29 Q51.5088 1333.29 49.6338 1333.71 Q47.7819 1334.13 45.8375 1335.01 L45.8375 1317.65 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-100.527 978.134 L-70.8517 978.134 L-70.8517 982.069 L-100.527 982.069 L-100.527 978.134 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-50.7592 963.482 Q-54.3703 963.482 -56.199 967.046 Q-58.0045 970.588 -58.0045 977.718 Q-58.0045 984.824 -56.199 988.389 Q-54.3703 991.931 -50.7592 991.931 Q-47.125 991.931 -45.3194 988.389 Q-43.4907 984.824 -43.4907 977.718 Q-43.4907 970.588 -45.3194 967.046 Q-47.125 963.482 -50.7592 963.482 M-50.7592 959.778 Q-44.9491 959.778 -41.8935 964.384 Q-38.8148 968.968 -38.8148 977.718 Q-38.8148 986.444 -41.8935 991.051 Q-44.9491 995.634 -50.7592 995.634 Q-56.5694 995.634 -59.6481 991.051 Q-62.7036 986.444 -62.7036 977.718 Q-62.7036 968.968 -59.6481 964.384 Q-56.5694 959.778 -50.7592 959.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-30.5973 989.083 L-25.7131 989.083 L-25.7131 994.963 L-30.5973 994.963 L-30.5973 989.083 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-5.52797 963.482 Q-9.13907 963.482 -10.9678 967.046 Q-12.7733 970.588 -12.7733 977.718 Q-12.7733 984.824 -10.9678 988.389 Q-9.13907 991.931 -5.52797 991.931 Q-1.89373 991.931 -0.0881881 988.389 Q1.74051 984.824 1.74051 977.718 Q1.74051 970.588 -0.0881881 967.046 Q-1.89373 963.482 -5.52797 963.482 M-5.52797 959.778 Q0.28218 959.778 3.33772 964.384 Q6.41641 968.968 6.41641 977.718 Q6.41641 986.444 3.33772 991.051 Q0.28218 995.634 -5.52797 995.634 Q-11.3381 995.634 -14.4168 991.051 Q-17.4724 986.444 -17.4724 977.718 Q-17.4724 968.968 -14.4168 964.384 Q-11.3381 959.778 -5.52797 959.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M15.4441 991.028 L23.083 991.028 L23.083 964.662 L14.7728 966.329 L14.7728 962.07 L23.0367 960.403 L27.7126 960.403 L27.7126 991.028 L35.3514 991.028 L35.3514 994.963 L15.4441 994.963 L15.4441 991.028 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M54.7958 963.482 Q51.1847 963.482 49.356 967.046 Q47.5504 970.588 47.5504 977.718 Q47.5504 984.824 49.356 988.389 Q51.1847 991.931 54.7958 991.931 Q58.43 991.931 60.2356 988.389 Q62.0643 984.824 62.0643 977.718 Q62.0643 970.588 60.2356 967.046 Q58.43 963.482 54.7958 963.482 M54.7958 959.778 Q60.6059 959.778 63.6615 964.384 Q66.7402 968.968 66.7402 977.718 Q66.7402 986.444 63.6615 991.051 Q60.6059 995.634 54.7958 995.634 Q48.9856 995.634 45.9069 991.051 Q42.8514 986.444 42.8514 977.718 Q42.8514 968.968 45.9069 964.384 Q48.9856 959.778 54.7958 959.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-99.5321 620.891 L-69.8563 620.891 L-69.8563 624.826 L-99.5321 624.826 L-99.5321 620.891 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-49.7638 606.238 Q-53.3749 606.238 -55.2036 609.803 Q-57.0092 613.344 -57.0092 620.474 Q-57.0092 627.58 -55.2036 631.145 Q-53.3749 634.687 -49.7638 634.687 Q-46.1296 634.687 -44.3241 631.145 Q-42.4954 627.58 -42.4954 620.474 Q-42.4954 613.344 -44.3241 609.803 Q-46.1296 606.238 -49.7638 606.238 M-49.7638 602.534 Q-43.9537 602.534 -40.8982 607.141 Q-37.8195 611.724 -37.8195 620.474 Q-37.8195 629.201 -40.8982 633.807 Q-43.9537 638.39 -49.7638 638.39 Q-55.574 638.39 -58.6527 633.807 Q-61.7082 629.201 -61.7082 620.474 Q-61.7082 611.724 -58.6527 607.141 Q-55.574 602.534 -49.7638 602.534 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-29.6019 631.84 L-24.7177 631.84 L-24.7177 637.719 L-29.6019 637.719 L-29.6019 631.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-4.53261 606.238 Q-8.1437 606.238 -9.97239 609.803 Q-11.7779 613.344 -11.7779 620.474 Q-11.7779 627.58 -9.97239 631.145 Q-8.1437 634.687 -4.53261 634.687 Q-0.898369 634.687 0.907177 631.145 Q2.73587 627.58 2.73587 620.474 Q2.73587 613.344 0.907177 609.803 Q-0.898369 606.238 -4.53261 606.238 M-4.53261 602.534 Q1.27755 602.534 4.33308 607.141 Q7.41177 611.724 7.41177 620.474 Q7.41177 629.201 4.33308 633.807 Q1.27755 638.39 -4.53261 638.39 Q-10.3428 638.39 -13.4215 633.807 Q-16.477 629.201 -16.477 620.474 Q-16.477 611.724 -13.4215 607.141 Q-10.3428 602.534 -4.53261 602.534 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M25.6293 606.238 Q22.0182 606.238 20.1895 609.803 Q18.3839 613.344 18.3839 620.474 Q18.3839 627.58 20.1895 631.145 Q22.0182 634.687 25.6293 634.687 Q29.2635 634.687 31.0691 631.145 Q32.8977 627.58 32.8977 620.474 Q32.8977 613.344 31.0691 609.803 Q29.2635 606.238 25.6293 606.238 M25.6293 602.534 Q31.4394 602.534 34.495 607.141 Q37.5736 611.724 37.5736 620.474 Q37.5736 629.201 34.495 633.807 Q31.4394 638.39 25.6293 638.39 Q19.8191 638.39 16.7404 633.807 Q13.6849 629.201 13.6849 620.474 Q13.6849 611.724 16.7404 607.141 Q19.8191 602.534 25.6293 602.534 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M45.8375 603.159 L64.1939 603.159 L64.1939 607.094 L50.1199 607.094 L50.1199 615.567 Q51.1384 615.219 52.1569 615.057 Q53.1754 614.872 54.1939 614.872 Q59.9809 614.872 63.3605 618.043 Q66.7402 621.215 66.7402 626.631 Q66.7402 632.21 63.268 635.312 Q59.7958 638.39 53.4763 638.39 Q51.3004 638.39 49.0319 638.02 Q46.7866 637.65 44.3792 636.909 L44.3792 632.21 Q46.4625 633.344 48.6847 633.9 Q50.9069 634.455 53.3837 634.455 Q57.3884 634.455 59.7263 632.349 Q62.0643 630.242 62.0643 626.631 Q62.0643 623.02 59.7263 620.914 Q57.3884 618.807 53.3837 618.807 Q51.5088 618.807 49.6338 619.224 Q47.7819 619.641 45.8375 620.52 L45.8375 603.159 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-50.7592 248.994 Q-54.3703 248.994 -56.199 252.559 Q-58.0045 256.101 -58.0045 263.23 Q-58.0045 270.337 -56.199 273.901 Q-54.3703 277.443 -50.7592 277.443 Q-47.125 277.443 -45.3194 273.901 Q-43.4907 270.337 -43.4907 263.23 Q-43.4907 256.101 -45.3194 252.559 Q-47.125 248.994 -50.7592 248.994 M-50.7592 245.29 Q-44.9491 245.29 -41.8935 249.897 Q-38.8148 254.48 -38.8148 263.23 Q-38.8148 271.957 -41.8935 276.563 Q-44.9491 281.147 -50.7592 281.147 Q-56.5694 281.147 -59.6481 276.563 Q-62.7036 271.957 -62.7036 263.23 Q-62.7036 254.48 -59.6481 249.897 Q-56.5694 245.29 -50.7592 245.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-30.5973 274.596 L-25.7131 274.596 L-25.7131 280.475 L-30.5973 280.475 L-30.5973 274.596 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-5.52797 248.994 Q-9.13907 248.994 -10.9678 252.559 Q-12.7733 256.101 -12.7733 263.23 Q-12.7733 270.337 -10.9678 273.901 Q-9.13907 277.443 -5.52797 277.443 Q-1.89373 277.443 -0.0881881 273.901 Q1.74051 270.337 1.74051 263.23 Q1.74051 256.101 -0.0881881 252.559 Q-1.89373 248.994 -5.52797 248.994 M-5.52797 245.29 Q0.28218 245.29 3.33772 249.897 Q6.41641 254.48 6.41641 263.23 Q6.41641 271.957 3.33772 276.563 Q0.28218 281.147 -5.52797 281.147 Q-11.3381 281.147 -14.4168 276.563 Q-17.4724 271.957 -17.4724 263.23 Q-17.4724 254.48 -14.4168 249.897 Q-11.3381 245.29 -5.52797 245.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M24.6339 248.994 Q21.0228 248.994 19.1941 252.559 Q17.3886 256.101 17.3886 263.23 Q17.3886 270.337 19.1941 273.901 Q21.0228 277.443 24.6339 277.443 Q28.2681 277.443 30.0737 273.901 Q31.9024 270.337 31.9024 263.23 Q31.9024 256.101 30.0737 252.559 Q28.2681 248.994 24.6339 248.994 M24.6339 245.29 Q30.4441 245.29 33.4996 249.897 Q36.5783 254.48 36.5783 263.23 Q36.5783 271.957 33.4996 276.563 Q30.4441 281.147 24.6339 281.147 Q18.8237 281.147 15.7451 276.563 Q12.6895 271.957 12.6895 263.23 Q12.6895 254.48 15.7451 249.897 Q18.8237 245.29 24.6339 245.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M54.7958 248.994 Q51.1847 248.994 49.356 252.559 Q47.5504 256.101 47.5504 263.23 Q47.5504 270.337 49.356 273.901 Q51.1847 277.443 54.7958 277.443 Q58.43 277.443 60.2356 273.901 Q62.0643 270.337 62.0643 263.23 Q62.0643 256.101 60.2356 252.559 Q58.43 248.994 54.7958 248.994 M54.7958 245.29 Q60.6059 245.29 63.6615 249.897 Q66.7402 254.48 66.7402 263.23 Q66.7402 271.957 63.6615 276.563 Q60.6059 281.147 54.7958 281.147 Q48.9856 281.147 45.9069 276.563 Q42.8514 271.957 42.8514 263.23 Q42.8514 254.48 45.9069 249.897 Q48.9856 245.29 54.7958 245.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-170.072 983.869 L-167.207 983.869 L-167.207 1010.8 Q-161.16 1010.41 -157.977 1007.17 Q-154.826 1003.89 -154.826 998.065 Q-154.826 994.691 -155.653 991.54 Q-156.481 988.357 -158.136 985.238 L-152.598 985.238 Q-151.261 988.389 -150.561 991.699 Q-149.86 995.009 -149.86 998.415 Q-149.86 1006.95 -154.826 1011.94 Q-159.791 1016.91 -168.257 1016.91 Q-177.01 1016.91 -182.135 1012.2 Q-187.291 1007.45 -187.291 999.434 Q-187.291 992.24 -182.644 988.071 Q-178.029 983.869 -170.072 983.869 M-171.79 989.726 Q-176.596 989.79 -179.461 992.431 Q-182.326 995.041 -182.326 999.37 Q-182.326 1004.27 -179.556 1007.23 Q-176.787 1010.16 -171.758 1010.61 L-171.79 989.726 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-172.3 944.625 L-150.783 944.625 L-150.783 950.481 L-172.109 950.481 Q-177.169 950.481 -179.684 952.455 Q-182.198 954.428 -182.198 958.375 Q-182.198 963.117 -179.175 965.855 Q-176.151 968.592 -170.931 968.592 L-150.783 968.592 L-150.783 974.48 L-186.431 974.48 L-186.431 968.592 L-180.893 968.592 Q-184.108 966.491 -185.699 963.658 Q-187.291 960.794 -187.291 957.07 Q-187.291 950.927 -183.471 947.776 Q-179.684 944.625 -172.3 944.625 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-170.072 902.452 L-167.207 902.452 L-167.207 929.379 Q-161.16 928.997 -157.977 925.751 Q-154.826 922.472 -154.826 916.648 Q-154.826 913.274 -155.653 910.123 Q-156.481 906.94 -158.136 903.821 L-152.598 903.821 Q-151.261 906.972 -150.561 910.282 Q-149.86 913.592 -149.86 916.998 Q-149.86 925.528 -154.826 930.525 Q-159.791 935.49 -168.257 935.49 Q-177.01 935.49 -182.135 930.779 Q-187.291 926.037 -187.291 918.016 Q-187.291 910.823 -182.644 906.653 Q-178.029 902.452 -170.072 902.452 M-171.79 908.309 Q-176.596 908.372 -179.461 911.014 Q-182.326 913.624 -182.326 917.953 Q-182.326 922.854 -179.556 925.814 Q-176.787 928.742 -171.758 929.188 L-171.79 908.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-180.957 872.183 Q-181.53 873.17 -181.784 874.348 Q-182.071 875.493 -182.071 876.894 Q-182.071 881.859 -178.824 884.533 Q-175.61 887.174 -169.562 887.174 L-150.783 887.174 L-150.783 893.063 L-186.431 893.063 L-186.431 887.174 L-180.893 887.174 Q-184.14 885.328 -185.699 882.368 Q-187.291 879.408 -187.291 875.175 Q-187.291 874.57 -187.195 873.838 Q-187.132 873.106 -186.973 872.215 L-180.957 872.183 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-169.021 843.728 Q-175.387 843.728 -178.888 846.37 Q-182.389 848.98 -182.389 853.723 Q-182.389 858.433 -178.888 861.075 Q-175.387 863.685 -169.021 863.685 Q-162.687 863.685 -159.186 861.075 Q-155.685 858.433 -155.685 853.723 Q-155.685 848.98 -159.186 846.37 Q-162.687 843.728 -169.021 843.728 M-155.208 837.872 Q-146.105 837.872 -141.681 841.914 Q-137.225 845.956 -137.225 854.296 Q-137.225 857.383 -137.702 860.12 Q-138.148 862.857 -139.102 865.436 L-144.8 865.436 Q-143.399 862.857 -142.731 860.343 Q-142.062 857.828 -142.062 855.219 Q-142.062 849.458 -145.086 846.593 Q-148.078 843.728 -154.157 843.728 L-157.054 843.728 Q-153.903 845.543 -152.343 848.375 Q-150.783 851.208 -150.783 855.155 Q-150.783 861.712 -155.781 865.722 Q-160.778 869.732 -169.021 869.732 Q-177.297 869.732 -182.294 865.722 Q-187.291 861.712 -187.291 855.155 Q-187.291 851.208 -185.731 848.375 Q-184.172 845.543 -181.021 843.728 L-186.431 843.728 L-186.431 837.872 L-155.208 837.872 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-147.473 810.977 Q-141.108 813.46 -139.166 815.815 Q-137.225 818.17 -137.225 822.117 L-137.225 826.796 L-142.126 826.796 L-142.126 823.358 Q-142.126 820.939 -143.272 819.602 Q-144.418 818.266 -148.683 816.642 L-151.356 815.592 L-186.431 830.01 L-186.431 823.804 L-158.55 812.664 L-186.431 801.524 L-186.431 795.317 L-147.473 810.977 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-181.021 743.055 L-200.309 743.055 L-200.309 737.198 L-150.783 737.198 L-150.783 743.055 L-156.131 743.055 Q-152.948 744.901 -151.388 747.734 Q-149.86 750.535 -149.86 754.481 Q-149.86 760.942 -155.017 765.016 Q-160.173 769.059 -168.576 769.059 Q-176.978 769.059 -182.135 765.016 Q-187.291 760.942 -187.291 754.481 Q-187.291 750.535 -185.731 747.734 Q-184.203 744.901 -181.021 743.055 M-168.576 763.011 Q-162.114 763.011 -158.422 760.37 Q-154.762 757.696 -154.762 753.049 Q-154.762 748.402 -158.422 745.728 Q-162.114 743.055 -168.576 743.055 Q-175.037 743.055 -178.697 745.728 Q-182.389 748.402 -182.389 753.049 Q-182.389 757.696 -178.697 760.37 Q-175.037 763.011 -168.576 763.011 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-170.072 694.644 L-167.207 694.644 L-167.207 721.571 Q-161.16 721.189 -157.977 717.942 Q-154.826 714.664 -154.826 708.839 Q-154.826 705.465 -155.653 702.314 Q-156.481 699.131 -158.136 696.012 L-152.598 696.012 Q-151.261 699.163 -150.561 702.473 Q-149.86 705.784 -149.86 709.189 Q-149.86 717.719 -154.826 722.716 Q-159.791 727.682 -168.257 727.682 Q-177.01 727.682 -182.135 722.971 Q-187.291 718.229 -187.291 710.208 Q-187.291 703.015 -182.644 698.845 Q-178.029 694.644 -170.072 694.644 M-171.79 700.5 Q-176.596 700.564 -179.461 703.205 Q-182.326 705.815 -182.326 710.144 Q-182.326 715.046 -179.556 718.006 Q-176.787 720.934 -171.758 721.38 L-171.79 700.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-172.3 655.399 L-150.783 655.399 L-150.783 661.255 L-172.109 661.255 Q-177.169 661.255 -179.684 663.229 Q-182.198 665.202 -182.198 669.149 Q-182.198 673.891 -179.175 676.629 Q-176.151 679.366 -170.931 679.366 L-150.783 679.366 L-150.783 685.254 L-186.431 685.254 L-186.431 679.366 L-180.893 679.366 Q-184.108 677.265 -185.699 674.432 Q-187.291 671.568 -187.291 667.844 Q-187.291 661.701 -183.471 658.55 Q-179.684 655.399 -172.3 655.399 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-185.381 620.992 L-179.843 620.992 Q-181.116 623.475 -181.753 626.149 Q-182.389 628.822 -182.389 631.687 Q-182.389 636.047 -181.052 638.243 Q-179.716 640.408 -177.042 640.408 Q-175.005 640.408 -173.827 638.848 Q-172.681 637.289 -171.631 632.578 L-171.186 630.573 Q-169.849 624.334 -167.398 621.724 Q-164.979 619.083 -160.618 619.083 Q-155.653 619.083 -152.757 623.029 Q-149.86 626.944 -149.86 633.819 Q-149.86 636.684 -150.433 639.803 Q-150.974 642.89 -152.088 646.328 L-158.136 646.328 Q-156.449 643.081 -155.59 639.93 Q-154.762 636.779 -154.762 633.692 Q-154.762 629.554 -156.162 627.326 Q-157.595 625.098 -160.173 625.098 Q-162.56 625.098 -163.833 626.722 Q-165.106 628.313 -166.284 633.756 L-166.761 635.793 Q-167.907 641.235 -170.263 643.654 Q-172.65 646.073 -176.787 646.073 Q-181.816 646.073 -184.554 642.508 Q-187.291 638.944 -187.291 632.387 Q-187.291 629.14 -186.813 626.276 Q-186.336 623.411 -185.381 620.992 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-186.431 609.757 L-186.431 603.9 L-150.783 603.9 L-150.783 609.757 L-186.431 609.757 M-200.309 609.757 L-200.309 603.9 L-192.893 603.9 L-192.893 609.757 L-200.309 609.757 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-196.553 585.854 L-186.431 585.854 L-186.431 573.791 L-181.88 573.791 L-181.88 585.854 L-162.528 585.854 Q-158.168 585.854 -156.926 584.676 Q-155.685 583.467 -155.685 579.806 L-155.685 573.791 L-150.783 573.791 L-150.783 579.806 Q-150.783 586.586 -153.298 589.164 Q-155.844 591.742 -162.528 591.742 L-181.88 591.742 L-181.88 596.039 L-186.431 596.039 L-186.431 591.742 L-196.553 591.742 L-196.553 585.854 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M-147.473 551.256 Q-141.108 553.739 -139.166 556.094 Q-137.225 558.449 -137.225 562.396 L-137.225 567.075 L-142.126 567.075 L-142.126 563.637 Q-142.126 561.218 -143.272 559.882 Q-144.418 558.545 -148.683 556.922 L-151.356 555.871 L-186.431 570.29 L-186.431 564.083 L-158.55 552.943 L-186.431 541.803 L-186.431 535.596 L-147.473 551.256 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip342)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,407.535 402.271,890.003 638.121,1030.99 873.972,492.43 1109.82,106.255 1345.67,106.255 1581.52,492.43 1817.37,1030.99 2053.23,890.003 2289.08,407.535 \"/>\n<polyline clip-path=\"url(#clip342)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,489.669 402.271,1214.36 638.121,1464 873.972,705.722 1109.82,88.5087 1345.67,88.5087 1581.52,705.722 1817.37,1464 2053.23,1214.36 2289.08,489.669 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M1930.14 251.365 L2277.76 251.365 L2277.76 95.8446 L1930.14 95.8446  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1930.14,251.365 2277.76,251.365 2277.76,95.8446 1930.14,95.8446 1930.14,251.365 \"/>\n<polyline clip-path=\"url(#clip340)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1955.14,147.685 2105.14,147.685 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M2152.39 131.539 L2152.39 136.099 Q2149.72 134.826 2147.36 134.201 Q2145 133.576 2142.8 133.576 Q2138.98 133.576 2136.9 135.057 Q2134.84 136.539 2134.84 139.27 Q2134.84 141.562 2136.2 142.743 Q2137.59 143.9 2141.44 144.618 L2144.26 145.196 Q2149.49 146.192 2151.97 148.715 Q2154.47 151.215 2154.47 155.428 Q2154.47 160.451 2151.09 163.043 Q2147.73 165.636 2141.23 165.636 Q2138.77 165.636 2136 165.08 Q2133.24 164.525 2130.28 163.437 L2130.28 158.622 Q2133.13 160.219 2135.86 161.029 Q2138.59 161.84 2141.23 161.84 Q2145.23 161.84 2147.41 160.266 Q2149.58 158.692 2149.58 155.775 Q2149.58 153.229 2148.01 151.793 Q2146.46 150.358 2142.89 149.641 L2140.05 149.085 Q2134.82 148.043 2132.48 145.821 Q2130.14 143.599 2130.14 139.641 Q2130.14 135.057 2133.36 132.418 Q2136.6 129.78 2142.27 129.78 Q2144.7 129.78 2147.22 130.219 Q2149.75 130.659 2152.39 131.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2177.2 143.437 L2206.88 143.437 L2206.88 147.326 L2177.2 147.326 L2177.2 143.437 M2177.2 152.881 L2206.88 152.881 L2206.88 156.817 L2177.2 156.817 L2177.2 152.881 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2232.85 161.029 L2240.49 161.029 L2240.49 134.664 L2232.18 136.331 L2232.18 132.071 L2240.44 130.405 L2245.12 130.405 L2245.12 161.029 L2252.76 161.029 L2252.76 164.965 L2232.85 164.965 L2232.85 161.029 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip340)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1955.14,199.525 2105.14,199.525 \"/>\n<path clip-path=\"url(#clip340)\" d=\"M2152.39 183.379 L2152.39 187.939 Q2149.72 186.666 2147.36 186.041 Q2145 185.416 2142.8 185.416 Q2138.98 185.416 2136.9 186.897 Q2134.84 188.379 2134.84 191.11 Q2134.84 193.402 2136.2 194.583 Q2137.59 195.74 2141.44 196.458 L2144.26 197.036 Q2149.49 198.032 2151.97 200.555 Q2154.47 203.055 2154.47 207.268 Q2154.47 212.291 2151.09 214.883 Q2147.73 217.476 2141.23 217.476 Q2138.77 217.476 2136 216.92 Q2133.24 216.365 2130.28 215.277 L2130.28 210.462 Q2133.13 212.059 2135.86 212.869 Q2138.59 213.68 2141.23 213.68 Q2145.23 213.68 2147.41 212.106 Q2149.58 210.532 2149.58 207.615 Q2149.58 205.069 2148.01 203.633 Q2146.46 202.198 2142.89 201.481 L2140.05 200.925 Q2134.82 199.883 2132.48 197.661 Q2130.14 195.439 2130.14 191.481 Q2130.14 186.897 2133.36 184.258 Q2136.6 181.62 2142.27 181.62 Q2144.7 181.62 2147.22 182.059 Q2149.75 182.499 2152.39 183.379 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2177.2 195.277 L2206.88 195.277 L2206.88 199.166 L2177.2 199.166 L2177.2 195.277 M2177.2 204.721 L2206.88 204.721 L2206.88 208.657 L2177.2 208.657 L2177.2 204.721 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip340)\" d=\"M2236.07 212.869 L2252.38 212.869 L2252.38 216.805 L2230.44 216.805 L2230.44 212.869 Q2233.1 210.115 2237.69 205.485 Q2242.29 200.832 2243.47 199.49 Q2245.72 196.967 2246.6 195.231 Q2247.5 193.471 2247.5 191.782 Q2247.5 189.027 2245.56 187.291 Q2243.63 185.555 2240.53 185.555 Q2238.33 185.555 2235.88 186.319 Q2233.45 187.083 2230.67 188.633 L2230.67 183.911 Q2233.5 182.777 2235.95 182.198 Q2238.4 181.62 2240.44 181.62 Q2245.81 181.62 2249.01 184.305 Q2252.2 186.99 2252.2 191.481 Q2252.2 193.61 2251.39 195.532 Q2250.6 197.43 2248.5 200.022 Q2247.92 200.694 2244.82 203.911 Q2241.71 207.106 2236.07 212.869 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"Finally, we can obtain a value for the Haldane gap by extrapolating our results for different system sizes.","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"Ls = 5:5:50\nΔEs = map(Ls) do L\n    ψ₀ = FiniteMPS(rand, ComplexF64, L, physical_space, virtual_space)\n    ψ, envs, delta = find_groundstate(ψ₀, H, DMRG(; verbose=false))\n    En_1, st_1 = excitations(H, QuasiparticleAnsatz(), ψ, envs; sector=SU₂(1))\n    En_2, st_2 = excitations(H, QuasiparticleAnsatz(), ψ, envs; sector=SU₂(2))\n    return real(En_2[1] - En_1[1])\nend\n\nf = fit(Ls .^ (-2), ΔEs, 1)\nΔE_extrapolated = f.coeffs[1]","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"-0.2155532516993712","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"p_size_extrapolation = plot(; xaxis=\"L^(-2)\", yaxis=\"ΔE\",\n    xlims=(0, 0.015))\nplot!(p_size_extrapolation, Ls .^ (-2), ΔEs;\n    seriestype=:scatter, label=\"numerical\")\nplot!(p_size_extrapolation, x -> f(x); label=\"fit\")","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip370\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip371\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip370)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip372\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"852.745,1505.26 852.745,47.2441 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1602.75,1505.26 1602.75,47.2441 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2352.76,1505.26 2352.76,47.2441 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,1486.36 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"852.745,1505.26 852.745,1486.36 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1602.75,1505.26 1602.75,1486.36 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2352.76,1505.26 2352.76,1486.36 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M49.9627 1536.18 Q46.3516 1536.18 44.5229 1539.74 Q42.7173 1543.28 42.7173 1550.41 Q42.7173 1557.52 44.5229 1561.09 Q46.3516 1564.63 49.9627 1564.63 Q53.5969 1564.63 55.4024 1561.09 Q57.2311 1557.52 57.2311 1550.41 Q57.2311 1543.28 55.4024 1539.74 Q53.5969 1536.18 49.9627 1536.18 M49.9627 1532.47 Q55.7728 1532.47 58.8284 1537.08 Q61.907 1541.66 61.907 1550.41 Q61.907 1559.14 58.8284 1563.75 Q55.7728 1568.33 49.9627 1568.33 Q44.1525 1568.33 41.0738 1563.75 Q38.0183 1559.14 38.0183 1550.41 Q38.0183 1541.66 41.0738 1537.08 Q44.1525 1532.47 49.9627 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M70.1246 1561.78 L75.0088 1561.78 L75.0088 1567.66 L70.1246 1567.66 L70.1246 1561.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M95.1939 1536.18 Q91.5828 1536.18 89.7541 1539.74 Q87.9486 1543.28 87.9486 1550.41 Q87.9486 1557.52 89.7541 1561.09 Q91.5828 1564.63 95.1939 1564.63 Q98.8281 1564.63 100.634 1561.09 Q102.462 1557.52 102.462 1550.41 Q102.462 1543.28 100.634 1539.74 Q98.8281 1536.18 95.1939 1536.18 M95.1939 1532.47 Q101.004 1532.47 104.06 1537.08 Q107.138 1541.66 107.138 1550.41 Q107.138 1559.14 104.06 1563.75 Q101.004 1568.33 95.1939 1568.33 Q89.3837 1568.33 86.3051 1563.75 Q83.2495 1559.14 83.2495 1550.41 Q83.2495 1541.66 86.3051 1537.08 Q89.3837 1532.47 95.1939 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M125.356 1536.18 Q121.745 1536.18 119.916 1539.74 Q118.11 1543.28 118.11 1550.41 Q118.11 1557.52 119.916 1561.09 Q121.745 1564.63 125.356 1564.63 Q128.99 1564.63 130.796 1561.09 Q132.624 1557.52 132.624 1550.41 Q132.624 1543.28 130.796 1539.74 Q128.99 1536.18 125.356 1536.18 M125.356 1532.47 Q131.166 1532.47 134.221 1537.08 Q137.3 1541.66 137.3 1550.41 Q137.3 1559.14 134.221 1563.75 Q131.166 1568.33 125.356 1568.33 Q119.546 1568.33 116.467 1563.75 Q113.411 1559.14 113.411 1550.41 Q113.411 1541.66 116.467 1537.08 Q119.546 1532.47 125.356 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M155.518 1536.18 Q151.907 1536.18 150.078 1539.74 Q148.272 1543.28 148.272 1550.41 Q148.272 1557.52 150.078 1561.09 Q151.907 1564.63 155.518 1564.63 Q159.152 1564.63 160.957 1561.09 Q162.786 1557.52 162.786 1550.41 Q162.786 1543.28 160.957 1539.74 Q159.152 1536.18 155.518 1536.18 M155.518 1532.47 Q161.328 1532.47 164.383 1537.08 Q167.462 1541.66 167.462 1550.41 Q167.462 1559.14 164.383 1563.75 Q161.328 1568.33 155.518 1568.33 Q149.707 1568.33 146.629 1563.75 Q143.573 1559.14 143.573 1550.41 Q143.573 1541.66 146.629 1537.08 Q149.707 1532.47 155.518 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M800.466 1536.18 Q796.855 1536.18 795.026 1539.74 Q793.22 1543.28 793.22 1550.41 Q793.22 1557.52 795.026 1561.09 Q796.855 1564.63 800.466 1564.63 Q804.1 1564.63 805.905 1561.09 Q807.734 1557.52 807.734 1550.41 Q807.734 1543.28 805.905 1539.74 Q804.1 1536.18 800.466 1536.18 M800.466 1532.47 Q806.276 1532.47 809.331 1537.08 Q812.41 1541.66 812.41 1550.41 Q812.41 1559.14 809.331 1563.75 Q806.276 1568.33 800.466 1568.33 Q794.655 1568.33 791.577 1563.75 Q788.521 1559.14 788.521 1550.41 Q788.521 1541.66 791.577 1537.08 Q794.655 1532.47 800.466 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M820.628 1561.78 L825.512 1561.78 L825.512 1567.66 L820.628 1567.66 L820.628 1561.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M845.697 1536.18 Q842.086 1536.18 840.257 1539.74 Q838.452 1543.28 838.452 1550.41 Q838.452 1557.52 840.257 1561.09 Q842.086 1564.63 845.697 1564.63 Q849.331 1564.63 851.137 1561.09 Q852.965 1557.52 852.965 1550.41 Q852.965 1543.28 851.137 1539.74 Q849.331 1536.18 845.697 1536.18 M845.697 1532.47 Q851.507 1532.47 854.563 1537.08 Q857.641 1541.66 857.641 1550.41 Q857.641 1559.14 854.563 1563.75 Q851.507 1568.33 845.697 1568.33 Q839.887 1568.33 836.808 1563.75 Q833.752 1559.14 833.752 1550.41 Q833.752 1541.66 836.808 1537.08 Q839.887 1532.47 845.697 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M875.859 1536.18 Q872.248 1536.18 870.419 1539.74 Q868.613 1543.28 868.613 1550.41 Q868.613 1557.52 870.419 1561.09 Q872.248 1564.63 875.859 1564.63 Q879.493 1564.63 881.298 1561.09 Q883.127 1557.52 883.127 1550.41 Q883.127 1543.28 881.298 1539.74 Q879.493 1536.18 875.859 1536.18 M875.859 1532.47 Q881.669 1532.47 884.724 1537.08 Q887.803 1541.66 887.803 1550.41 Q887.803 1559.14 884.724 1563.75 Q881.669 1568.33 875.859 1568.33 Q870.049 1568.33 866.97 1563.75 Q863.914 1559.14 863.914 1550.41 Q863.914 1541.66 866.97 1537.08 Q870.049 1532.47 875.859 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M896.067 1533.1 L914.423 1533.1 L914.423 1537.04 L900.349 1537.04 L900.349 1545.51 Q901.368 1545.16 902.386 1545 Q903.405 1544.81 904.423 1544.81 Q910.21 1544.81 913.59 1547.98 Q916.97 1551.16 916.97 1556.57 Q916.97 1562.15 913.497 1565.25 Q910.025 1568.33 903.706 1568.33 Q901.53 1568.33 899.261 1567.96 Q897.016 1567.59 894.609 1566.85 L894.609 1562.15 Q896.692 1563.28 898.914 1563.84 Q901.136 1564.4 903.613 1564.4 Q907.618 1564.4 909.956 1562.29 Q912.294 1560.18 912.294 1556.57 Q912.294 1552.96 909.956 1550.85 Q907.618 1548.75 903.613 1548.75 Q901.738 1548.75 899.863 1549.16 Q898.011 1549.58 896.067 1550.46 L896.067 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1549.97 1536.18 Q1546.36 1536.18 1544.53 1539.74 Q1542.73 1543.28 1542.73 1550.41 Q1542.73 1557.52 1544.53 1561.09 Q1546.36 1564.63 1549.97 1564.63 Q1553.61 1564.63 1555.41 1561.09 Q1557.24 1557.52 1557.24 1550.41 Q1557.24 1543.28 1555.41 1539.74 Q1553.61 1536.18 1549.97 1536.18 M1549.97 1532.47 Q1555.78 1532.47 1558.84 1537.08 Q1561.92 1541.66 1561.92 1550.41 Q1561.92 1559.14 1558.84 1563.75 Q1555.78 1568.33 1549.97 1568.33 Q1544.16 1568.33 1541.08 1563.75 Q1538.03 1559.14 1538.03 1550.41 Q1538.03 1541.66 1541.08 1537.08 Q1544.16 1532.47 1549.97 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1570.14 1561.78 L1575.02 1561.78 L1575.02 1567.66 L1570.14 1567.66 L1570.14 1561.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1595.2 1536.18 Q1591.59 1536.18 1589.76 1539.74 Q1587.96 1543.28 1587.96 1550.41 Q1587.96 1557.52 1589.76 1561.09 Q1591.59 1564.63 1595.2 1564.63 Q1598.84 1564.63 1600.64 1561.09 Q1602.47 1557.52 1602.47 1550.41 Q1602.47 1543.28 1600.64 1539.74 Q1598.84 1536.18 1595.2 1536.18 M1595.2 1532.47 Q1601.01 1532.47 1604.07 1537.08 Q1607.15 1541.66 1607.15 1550.41 Q1607.15 1559.14 1604.07 1563.75 Q1601.01 1568.33 1595.2 1568.33 Q1589.39 1568.33 1586.32 1563.75 Q1583.26 1559.14 1583.26 1550.41 Q1583.26 1541.66 1586.32 1537.08 Q1589.39 1532.47 1595.2 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1616.18 1563.72 L1623.82 1563.72 L1623.82 1537.36 L1615.51 1539.03 L1615.51 1534.77 L1623.77 1533.1 L1628.44 1533.1 L1628.44 1563.72 L1636.08 1563.72 L1636.08 1567.66 L1616.18 1567.66 L1616.18 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1655.53 1536.18 Q1651.92 1536.18 1650.09 1539.74 Q1648.28 1543.28 1648.28 1550.41 Q1648.28 1557.52 1650.09 1561.09 Q1651.92 1564.63 1655.53 1564.63 Q1659.16 1564.63 1660.97 1561.09 Q1662.8 1557.52 1662.8 1550.41 Q1662.8 1543.28 1660.97 1539.74 Q1659.16 1536.18 1655.53 1536.18 M1655.53 1532.47 Q1661.34 1532.47 1664.39 1537.08 Q1667.47 1541.66 1667.47 1550.41 Q1667.47 1559.14 1664.39 1563.75 Q1661.34 1568.33 1655.53 1568.33 Q1649.72 1568.33 1646.64 1563.75 Q1643.58 1559.14 1643.58 1550.41 Q1643.58 1541.66 1646.64 1537.08 Q1649.72 1532.47 1655.53 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2300.48 1536.18 Q2296.87 1536.18 2295.04 1539.74 Q2293.23 1543.28 2293.23 1550.41 Q2293.23 1557.52 2295.04 1561.09 Q2296.87 1564.63 2300.48 1564.63 Q2304.11 1564.63 2305.92 1561.09 Q2307.74 1557.52 2307.74 1550.41 Q2307.74 1543.28 2305.92 1539.74 Q2304.11 1536.18 2300.48 1536.18 M2300.48 1532.47 Q2306.29 1532.47 2309.34 1537.08 Q2312.42 1541.66 2312.42 1550.41 Q2312.42 1559.14 2309.34 1563.75 Q2306.29 1568.33 2300.48 1568.33 Q2294.67 1568.33 2291.59 1563.75 Q2288.53 1559.14 2288.53 1550.41 Q2288.53 1541.66 2291.59 1537.08 Q2294.67 1532.47 2300.48 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2320.64 1561.78 L2325.52 1561.78 L2325.52 1567.66 L2320.64 1567.66 L2320.64 1561.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2345.71 1536.18 Q2342.1 1536.18 2340.27 1539.74 Q2338.46 1543.28 2338.46 1550.41 Q2338.46 1557.52 2340.27 1561.09 Q2342.1 1564.63 2345.71 1564.63 Q2349.34 1564.63 2351.15 1561.09 Q2352.98 1557.52 2352.98 1550.41 Q2352.98 1543.28 2351.15 1539.74 Q2349.34 1536.18 2345.71 1536.18 M2345.71 1532.47 Q2351.52 1532.47 2354.57 1537.08 Q2357.65 1541.66 2357.65 1550.41 Q2357.65 1559.14 2354.57 1563.75 Q2351.52 1568.33 2345.71 1568.33 Q2339.9 1568.33 2336.82 1563.75 Q2333.76 1559.14 2333.76 1550.41 Q2333.76 1541.66 2336.82 1537.08 Q2339.9 1532.47 2345.71 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2366.68 1563.72 L2374.32 1563.72 L2374.32 1537.36 L2366.01 1539.03 L2366.01 1534.77 L2374.27 1533.1 L2378.95 1533.1 L2378.95 1563.72 L2386.59 1563.72 L2386.59 1567.66 L2366.68 1567.66 L2366.68 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2396.08 1533.1 L2414.43 1533.1 L2414.43 1537.04 L2400.36 1537.04 L2400.36 1545.51 Q2401.38 1545.16 2402.4 1545 Q2403.42 1544.81 2404.43 1544.81 Q2410.22 1544.81 2413.6 1547.98 Q2416.98 1551.16 2416.98 1556.57 Q2416.98 1562.15 2413.51 1565.25 Q2410.04 1568.33 2403.72 1568.33 Q2401.54 1568.33 2399.27 1567.96 Q2397.03 1567.59 2394.62 1566.85 L2394.62 1562.15 Q2396.7 1563.28 2398.92 1563.84 Q2401.15 1564.4 2403.62 1564.4 Q2407.63 1564.4 2409.97 1562.29 Q2412.3 1560.18 2412.3 1556.57 Q2412.3 1552.96 2409.97 1550.85 Q2407.63 1548.75 2403.62 1548.75 Q2401.75 1548.75 2399.87 1549.16 Q2398.02 1549.58 2396.08 1550.46 L2396.08 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1130.35 1602.6 L1136.78 1602.6 L1136.78 1644.71 L1159.92 1644.71 L1159.92 1650.12 L1130.35 1650.12 L1130.35 1602.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1190.7 1602.6 L1207.98 1620.33 L1201.58 1620.33 L1187.58 1607.76 L1173.58 1620.33 L1167.18 1620.33 L1184.46 1602.6 L1190.7 1602.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1235.1 1600.66 Q1230.84 1607.98 1228.77 1615.14 Q1226.7 1622.31 1226.7 1629.66 Q1226.7 1637.01 1228.77 1644.24 Q1230.87 1651.43 1235.1 1658.72 L1230.01 1658.72 Q1225.23 1651.24 1222.85 1644.01 Q1220.49 1636.79 1220.49 1629.66 Q1220.49 1622.56 1222.85 1615.37 Q1225.2 1608.17 1230.01 1600.66 L1235.1 1600.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1243.5 1629.66 L1260.66 1629.66 L1260.66 1634.88 L1243.5 1634.88 L1243.5 1629.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1276.35 1644.71 L1298.79 1644.71 L1298.79 1650.12 L1268.62 1650.12 L1268.62 1644.71 Q1272.28 1640.93 1278.58 1634.56 Q1284.91 1628.16 1286.54 1626.32 Q1289.62 1622.85 1290.83 1620.46 Q1292.07 1618.04 1292.07 1615.72 Q1292.07 1611.93 1289.4 1609.54 Q1286.76 1607.16 1282.49 1607.16 Q1279.47 1607.16 1276.1 1608.21 Q1272.75 1609.26 1268.93 1611.39 L1268.93 1604.9 Q1272.82 1603.34 1276.19 1602.54 Q1279.56 1601.74 1282.37 1601.74 Q1289.75 1601.74 1294.14 1605.44 Q1298.53 1609.13 1298.53 1615.3 Q1298.53 1618.23 1297.42 1620.87 Q1296.34 1623.48 1293.44 1627.05 Q1292.65 1627.97 1288.38 1632.4 Q1284.12 1636.79 1276.35 1644.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M1310.53 1600.66 L1315.63 1600.66 Q1320.4 1608.17 1322.76 1615.37 Q1325.14 1622.56 1325.14 1629.66 Q1325.14 1636.79 1322.76 1644.01 Q1320.4 1651.24 1315.63 1658.72 L1310.53 1658.72 Q1314.77 1651.43 1316.84 1644.24 Q1318.94 1637.01 1318.94 1629.66 Q1318.94 1622.31 1316.84 1615.14 Q1314.77 1607.98 1310.53 1600.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1334.42 2352.76,1334.42 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1080.2 2352.76,1080.2 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,825.986 2352.76,825.986 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,571.769 2352.76,571.769 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,317.551 2352.76,317.551 \"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,63.3328 2352.76,63.3328 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1334.42 121.638,1334.42 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1080.2 121.638,1080.2 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,825.986 121.638,825.986 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,571.769 121.638,571.769 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,317.551 121.638,317.551 \"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,63.3328 121.638,63.3328 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M-69.3702 1334.87 L-39.6945 1334.87 L-39.6945 1338.81 L-69.3702 1338.81 L-69.3702 1334.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-19.602 1320.22 Q-23.2131 1320.22 -25.0418 1323.79 Q-26.8473 1327.33 -26.8473 1334.46 Q-26.8473 1341.56 -25.0418 1345.13 Q-23.2131 1348.67 -19.602 1348.67 Q-15.9677 1348.67 -14.1622 1345.13 Q-12.3335 1341.56 -12.3335 1334.46 Q-12.3335 1327.33 -14.1622 1323.79 Q-15.9677 1320.22 -19.602 1320.22 M-19.602 1316.52 Q-13.7918 1316.52 -10.7363 1321.12 Q-7.65759 1325.71 -7.65759 1334.46 Q-7.65759 1343.18 -10.7363 1347.79 Q-13.7918 1352.37 -19.602 1352.37 Q-25.4121 1352.37 -28.4908 1347.79 Q-31.5464 1343.18 -31.5464 1334.46 Q-31.5464 1325.71 -28.4908 1321.12 Q-25.4121 1316.52 -19.602 1316.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M0.559957 1345.82 L5.44419 1345.82 L5.44419 1351.7 L0.559957 1351.7 L0.559957 1345.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M28.4765 1321.22 L16.671 1339.67 L28.4765 1339.67 L28.4765 1321.22 M27.2496 1317.14 L33.1292 1317.14 L33.1292 1339.67 L38.0598 1339.67 L38.0598 1343.55 L33.1292 1343.55 L33.1292 1351.7 L28.4765 1351.7 L28.4765 1343.55 L12.8747 1343.55 L12.8747 1339.04 L27.2496 1317.14 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M45.8375 1317.14 L64.1939 1317.14 L64.1939 1321.08 L50.1199 1321.08 L50.1199 1329.55 Q51.1384 1329.2 52.1569 1329.04 Q53.1754 1328.86 54.1939 1328.86 Q59.9809 1328.86 63.3605 1332.03 Q66.7402 1335.2 66.7402 1340.61 Q66.7402 1346.19 63.268 1349.29 Q59.7958 1352.37 53.4763 1352.37 Q51.3004 1352.37 49.0319 1352 Q46.7866 1351.63 44.3792 1350.89 L44.3792 1346.19 Q46.4625 1347.33 48.6847 1347.88 Q50.9069 1348.44 53.3837 1348.44 Q57.3884 1348.44 59.7263 1346.33 Q62.0643 1344.23 62.0643 1340.61 Q62.0643 1337 59.7263 1334.9 Q57.3884 1332.79 53.3837 1332.79 Q51.5088 1332.79 49.6338 1333.21 Q47.7819 1333.62 45.8375 1334.5 L45.8375 1317.14 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-70.3656 1080.66 L-40.6898 1080.66 L-40.6898 1084.59 L-70.3656 1084.59 L-70.3656 1080.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-20.5973 1066 Q-24.2084 1066 -26.0371 1069.57 Q-27.8427 1073.11 -27.8427 1080.24 Q-27.8427 1087.35 -26.0371 1090.91 Q-24.2084 1094.45 -20.5973 1094.45 Q-16.9631 1094.45 -15.1576 1090.91 Q-13.3289 1087.35 -13.3289 1080.24 Q-13.3289 1073.11 -15.1576 1069.57 Q-16.9631 1066 -20.5973 1066 M-20.5973 1062.3 Q-14.7872 1062.3 -11.7316 1066.91 Q-8.65296 1071.49 -8.65296 1080.24 Q-8.65296 1088.97 -11.7316 1093.57 Q-14.7872 1098.16 -20.5973 1098.16 Q-26.4075 1098.16 -29.4862 1093.57 Q-32.5417 1088.97 -32.5417 1080.24 Q-32.5417 1071.49 -29.4862 1066.91 Q-26.4075 1062.3 -20.5973 1062.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-0.435408 1091.6 L4.44882 1091.6 L4.44882 1097.48 L-0.435408 1097.48 L-0.435408 1091.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M27.4811 1067 L15.6756 1085.45 L27.4811 1085.45 L27.4811 1067 M26.2543 1062.92 L32.1339 1062.92 L32.1339 1085.45 L37.0644 1085.45 L37.0644 1089.34 L32.1339 1089.34 L32.1339 1097.48 L27.4811 1097.48 L27.4811 1089.34 L11.8793 1089.34 L11.8793 1084.82 L26.2543 1062.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M54.7958 1066 Q51.1847 1066 49.356 1069.57 Q47.5504 1073.11 47.5504 1080.24 Q47.5504 1087.35 49.356 1090.91 Q51.1847 1094.45 54.7958 1094.45 Q58.43 1094.45 60.2356 1090.91 Q62.0643 1087.35 62.0643 1080.24 Q62.0643 1073.11 60.2356 1069.57 Q58.43 1066 54.7958 1066 M54.7958 1062.3 Q60.6059 1062.3 63.6615 1066.91 Q66.7402 1071.49 66.7402 1080.24 Q66.7402 1088.97 63.6615 1093.57 Q60.6059 1098.16 54.7958 1098.16 Q48.9856 1098.16 45.9069 1093.57 Q42.8514 1088.97 42.8514 1080.24 Q42.8514 1071.49 45.9069 1066.91 Q48.9856 1062.3 54.7958 1062.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-69.3702 826.438 L-39.6945 826.438 L-39.6945 830.373 L-69.3702 830.373 L-69.3702 826.438 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-19.602 811.785 Q-23.2131 811.785 -25.0418 815.35 Q-26.8473 818.892 -26.8473 826.021 Q-26.8473 833.128 -25.0418 836.692 Q-23.2131 840.234 -19.602 840.234 Q-15.9677 840.234 -14.1622 836.692 Q-12.3335 833.128 -12.3335 826.021 Q-12.3335 818.892 -14.1622 815.35 Q-15.9677 811.785 -19.602 811.785 M-19.602 808.081 Q-13.7918 808.081 -10.7363 812.688 Q-7.65759 817.271 -7.65759 826.021 Q-7.65759 834.748 -10.7363 839.354 Q-13.7918 843.938 -19.602 843.938 Q-25.4121 843.938 -28.4908 839.354 Q-31.5464 834.748 -31.5464 826.021 Q-31.5464 817.271 -28.4908 812.688 Q-25.4121 808.081 -19.602 808.081 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M0.559957 837.387 L5.44419 837.387 L5.44419 843.266 L0.559957 843.266 L0.559957 837.387 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M29.7959 824.632 Q33.1524 825.35 35.0274 827.618 Q36.9255 829.887 36.9255 833.22 Q36.9255 838.336 33.407 841.137 Q29.8885 843.938 23.4071 843.938 Q21.2311 843.938 18.9163 843.498 Q16.6247 843.081 14.171 842.225 L14.171 837.711 Q16.1154 838.845 18.4302 839.424 Q20.745 840.003 23.2682 840.003 Q27.6663 840.003 29.9579 838.266 Q32.2727 836.53 32.2727 833.22 Q32.2727 830.165 30.12 828.452 Q27.9904 826.716 24.1709 826.716 L20.1432 826.716 L20.1432 822.873 L24.3561 822.873 Q27.8052 822.873 29.6339 821.507 Q31.4626 820.118 31.4626 817.526 Q31.4626 814.864 29.5644 813.452 Q27.6894 812.017 24.1709 812.017 Q22.2497 812.017 20.0506 812.433 Q17.8515 812.85 15.2127 813.73 L15.2127 809.563 Q17.8747 808.822 20.1895 808.452 Q22.5274 808.081 24.5876 808.081 Q29.9117 808.081 33.0135 810.512 Q36.1153 812.919 36.1153 817.04 Q36.1153 819.91 34.4718 821.901 Q32.8283 823.868 29.7959 824.632 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M45.8375 808.706 L64.1939 808.706 L64.1939 812.642 L50.1199 812.642 L50.1199 821.114 Q51.1384 820.767 52.1569 820.605 Q53.1754 820.419 54.1939 820.419 Q59.9809 820.419 63.3605 823.591 Q66.7402 826.762 66.7402 832.179 Q66.7402 837.757 63.268 840.859 Q59.7958 843.938 53.4763 843.938 Q51.3004 843.938 49.0319 843.567 Q46.7866 843.197 44.3792 842.456 L44.3792 837.757 Q46.4625 838.891 48.6847 839.447 Q50.9069 840.003 53.3837 840.003 Q57.3884 840.003 59.7263 837.896 Q62.0643 835.79 62.0643 832.179 Q62.0643 828.567 59.7263 826.461 Q57.3884 824.355 53.3837 824.355 Q51.5088 824.355 49.6338 824.771 Q47.7819 825.188 45.8375 826.067 L45.8375 808.706 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-70.3656 572.22 L-40.6898 572.22 L-40.6898 576.155 L-70.3656 576.155 L-70.3656 572.22 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-20.5973 557.567 Q-24.2084 557.567 -26.0371 561.132 Q-27.8427 564.674 -27.8427 571.803 Q-27.8427 578.91 -26.0371 582.475 Q-24.2084 586.016 -20.5973 586.016 Q-16.9631 586.016 -15.1576 582.475 Q-13.3289 578.91 -13.3289 571.803 Q-13.3289 564.674 -15.1576 561.132 Q-16.9631 557.567 -20.5973 557.567 M-20.5973 553.864 Q-14.7872 553.864 -11.7316 558.47 Q-8.65296 563.053 -8.65296 571.803 Q-8.65296 580.53 -11.7316 585.137 Q-14.7872 589.72 -20.5973 589.72 Q-26.4075 589.72 -29.4862 585.137 Q-32.5417 580.53 -32.5417 571.803 Q-32.5417 563.053 -29.4862 558.47 Q-26.4075 553.864 -20.5973 553.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-0.435408 583.169 L4.44882 583.169 L4.44882 589.049 L-0.435408 589.049 L-0.435408 583.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M28.8005 570.414 Q32.157 571.132 34.032 573.401 Q35.9301 575.669 35.9301 579.002 Q35.9301 584.118 32.4116 586.919 Q28.8931 589.72 22.4117 589.72 Q20.2358 589.72 17.921 589.28 Q15.6293 588.863 13.1756 588.007 L13.1756 583.493 Q15.1201 584.627 17.4349 585.206 Q19.7497 585.785 22.2728 585.785 Q26.6709 585.785 28.9626 584.049 Q31.2774 582.313 31.2774 579.002 Q31.2774 575.947 29.1246 574.234 Q26.995 572.498 23.1756 572.498 L19.1478 572.498 L19.1478 568.655 L23.3608 568.655 Q26.8098 568.655 28.6385 567.289 Q30.4672 565.901 30.4672 563.308 Q30.4672 560.646 28.5691 559.234 Q26.6941 557.799 23.1756 557.799 Q21.2543 557.799 19.0552 558.215 Q16.8562 558.632 14.2173 559.512 L14.2173 555.345 Q16.8793 554.604 19.1941 554.234 Q21.5321 553.864 23.5922 553.864 Q28.9163 553.864 32.0181 556.294 Q35.12 558.702 35.12 562.822 Q35.12 565.692 33.4764 567.683 Q31.8329 569.651 28.8005 570.414 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M54.7958 557.567 Q51.1847 557.567 49.356 561.132 Q47.5504 564.674 47.5504 571.803 Q47.5504 578.91 49.356 582.475 Q51.1847 586.016 54.7958 586.016 Q58.43 586.016 60.2356 582.475 Q62.0643 578.91 62.0643 571.803 Q62.0643 564.674 60.2356 561.132 Q58.43 557.567 54.7958 557.567 M54.7958 553.864 Q60.6059 553.864 63.6615 558.47 Q66.7402 563.053 66.7402 571.803 Q66.7402 580.53 63.6615 585.137 Q60.6059 589.72 54.7958 589.72 Q48.9856 589.72 45.9069 585.137 Q42.8514 580.53 42.8514 571.803 Q42.8514 563.053 45.9069 558.47 Q48.9856 553.864 54.7958 553.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-69.3702 318.002 L-39.6945 318.002 L-39.6945 321.937 L-69.3702 321.937 L-69.3702 318.002 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-19.602 303.349 Q-23.2131 303.349 -25.0418 306.914 Q-26.8473 310.456 -26.8473 317.585 Q-26.8473 324.692 -25.0418 328.257 Q-23.2131 331.798 -19.602 331.798 Q-15.9677 331.798 -14.1622 328.257 Q-12.3335 324.692 -12.3335 317.585 Q-12.3335 310.456 -14.1622 306.914 Q-15.9677 303.349 -19.602 303.349 M-19.602 299.646 Q-13.7918 299.646 -10.7363 304.252 Q-7.65759 308.835 -7.65759 317.585 Q-7.65759 326.312 -10.7363 330.919 Q-13.7918 335.502 -19.602 335.502 Q-25.4121 335.502 -28.4908 330.919 Q-31.5464 326.312 -31.5464 317.585 Q-31.5464 308.835 -28.4908 304.252 Q-25.4121 299.646 -19.602 299.646 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M0.559957 328.951 L5.44419 328.951 L5.44419 334.831 L0.559957 334.831 L0.559957 328.951 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M19.6571 330.896 L35.9764 330.896 L35.9764 334.831 L14.0321 334.831 L14.0321 330.896 Q16.6941 328.141 21.2774 323.511 Q25.8839 318.859 27.0644 317.516 Q29.3098 314.993 30.1894 313.257 Q31.0922 311.497 31.0922 309.808 Q31.0922 307.053 29.1478 305.317 Q27.2265 303.581 24.1246 303.581 Q21.9256 303.581 19.4719 304.345 Q17.0413 305.109 14.2636 306.66 L14.2636 301.937 Q17.0876 300.803 19.5413 300.224 Q21.995 299.646 24.0321 299.646 Q29.4024 299.646 32.5968 302.331 Q35.7912 305.016 35.7912 309.507 Q35.7912 311.636 34.9811 313.558 Q34.194 315.456 32.0876 318.048 Q31.5089 318.72 28.407 321.937 Q25.3052 325.132 19.6571 330.896 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M45.8375 300.271 L64.1939 300.271 L64.1939 304.206 L50.1199 304.206 L50.1199 312.678 Q51.1384 312.331 52.1569 312.169 Q53.1754 311.984 54.1939 311.984 Q59.9809 311.984 63.3605 315.155 Q66.7402 318.326 66.7402 323.743 Q66.7402 329.321 63.268 332.423 Q59.7958 335.502 53.4763 335.502 Q51.3004 335.502 49.0319 335.132 Q46.7866 334.761 44.3792 334.021 L44.3792 329.321 Q46.4625 330.456 48.6847 331.011 Q50.9069 331.567 53.3837 331.567 Q57.3884 331.567 59.7263 329.46 Q62.0643 327.354 62.0643 323.743 Q62.0643 320.132 59.7263 318.025 Q57.3884 315.919 53.3837 315.919 Q51.5088 315.919 49.6338 316.335 Q47.7819 316.752 45.8375 317.632 L45.8375 300.271 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-70.3656 63.7842 L-40.6898 63.7842 L-40.6898 67.7194 L-70.3656 67.7194 L-70.3656 63.7842 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-20.5973 49.1315 Q-24.2084 49.1315 -26.0371 52.6963 Q-27.8427 56.238 -27.8427 63.3675 Q-27.8427 70.474 -26.0371 74.0388 Q-24.2084 77.5804 -20.5973 77.5804 Q-16.9631 77.5804 -15.1576 74.0388 Q-13.3289 70.474 -13.3289 63.3675 Q-13.3289 56.238 -15.1576 52.6963 Q-16.9631 49.1315 -20.5973 49.1315 M-20.5973 45.4278 Q-14.7872 45.4278 -11.7316 50.0343 Q-8.65296 54.6176 -8.65296 63.3675 Q-8.65296 72.0943 -11.7316 76.7008 Q-14.7872 81.2841 -20.5973 81.2841 Q-26.4075 81.2841 -29.4862 76.7008 Q-32.5417 72.0943 -32.5417 63.3675 Q-32.5417 54.6176 -29.4862 50.0343 Q-26.4075 45.4278 -20.5973 45.4278 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-0.435408 74.7332 L4.44882 74.7332 L4.44882 80.6128 L-0.435408 80.6128 L-0.435408 74.7332 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M18.6617 76.6777 L34.9811 76.6777 L34.9811 80.6128 L13.0367 80.6128 L13.0367 76.6777 Q15.6988 73.923 20.2821 69.2934 Q24.8885 64.6407 26.0691 63.2981 Q28.3144 60.775 29.1941 59.0389 Q30.0968 57.2796 30.0968 55.5898 Q30.0968 52.8352 28.1524 51.0991 Q26.2311 49.363 23.1293 49.363 Q20.9302 49.363 18.4765 50.1269 Q16.046 50.8908 13.2682 52.4417 L13.2682 47.7195 Q16.0923 46.5852 18.546 46.0065 Q20.9997 45.4278 23.0367 45.4278 Q28.407 45.4278 31.6015 48.113 Q34.7959 50.7982 34.7959 55.2889 Q34.7959 57.4185 33.9857 59.3398 Q33.1987 61.2379 31.0922 63.8305 Q30.5135 64.5018 27.4117 67.7194 Q24.3098 70.9138 18.6617 76.6777 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M54.7958 49.1315 Q51.1847 49.1315 49.356 52.6963 Q47.5504 56.238 47.5504 63.3675 Q47.5504 70.474 49.356 74.0388 Q51.1847 77.5804 54.7958 77.5804 Q58.43 77.5804 60.2356 74.0388 Q62.0643 70.474 62.0643 63.3675 Q62.0643 56.238 60.2356 52.6963 Q58.43 49.1315 54.7958 49.1315 M54.7958 45.4278 Q60.6059 45.4278 63.6615 50.0343 Q66.7402 54.6176 66.7402 63.3675 Q66.7402 72.0943 63.6615 76.7008 Q60.6059 81.2841 54.7958 81.2841 Q48.9856 81.2841 45.9069 76.7008 Q42.8514 72.0943 42.8514 63.3675 Q42.8514 54.6176 45.9069 50.0343 Q48.9856 45.4278 54.7958 45.4278 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-161.808 795.031 L-125.969 808.081 L-125.969 781.949 L-161.808 795.031 M-120.622 816.802 L-168.142 798.659 L-168.142 791.371 L-120.622 773.26 L-120.622 816.802 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M-168.142 766.321 L-168.142 736.275 L-162.731 736.275 L-162.731 759.892 L-148.663 759.892 L-148.663 737.262 L-143.252 737.262 L-143.252 759.892 L-126.032 759.892 L-126.032 735.702 L-120.622 735.702 L-120.622 766.321 L-168.142 766.321 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip372)\" cx=\"1602.75\" cy=\"519.553\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip372)\" cx=\"769.411\" cy=\"96.6463\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip372)\" cx=\"477.743\" cy=\"223.106\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip372)\" cx=\"342.742\" cy=\"294.061\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip372)\" cx=\"269.408\" cy=\"88.5087\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip372)\" cx=\"225.19\" cy=\"228.546\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip372)\" cx=\"196.491\" cy=\"181.856\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip372)\" cx=\"176.815\" cy=\"169.051\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip372)\" cx=\"162.741\" cy=\"197.844\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<polyline clip-path=\"url(#clip372)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,142.411 117.389,145.623 252.839,175.325 334.238,193.175 403.06,208.267 477.821,224.661 546.743,239.774 620.635,255.978 706.246,274.751 782.328,291.434 849.044,306.064 921.783,322.015 994.954,338.06 1075.85,355.8 1152.83,372.679 1232.86,390.23 1300.24,405.004 1382.49,423.041 1457.84,439.564 1527.43,454.824 1597.93,470.283 1676.93,487.607 1748.52,503.306 1830.49,521.28 1906.38,537.922 1981.2,554.329 2053.85,570.26 2128.32,586.59 2209.91,604.482 2328.44,630.473 2352.76,635.805 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M1825.12 251.365 L2277.76 251.365 L2277.76 95.8446 L1825.12 95.8446  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip370)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1825.12,251.365 2277.76,251.365 2277.76,95.8446 1825.12,95.8446 1825.12,251.365 \"/>\n<circle clip-path=\"url(#clip370)\" cx=\"1925.12\" cy=\"147.685\" r=\"20.48\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"4.55111\"/>\n<path clip-path=\"url(#clip370)\" d=\"M2046.83 149.317 L2046.83 164.965 L2042.57 164.965 L2042.57 149.455 Q2042.57 145.775 2041.14 143.946 Q2039.7 142.118 2036.83 142.118 Q2033.38 142.118 2031.39 144.317 Q2029.4 146.516 2029.4 150.312 L2029.4 164.965 L2025.12 164.965 L2025.12 139.039 L2029.4 139.039 L2029.4 143.067 Q2030.93 140.729 2032.99 139.571 Q2035.07 138.414 2037.78 138.414 Q2042.25 138.414 2044.54 141.192 Q2046.83 143.946 2046.83 149.317 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2054.89 154.733 L2054.89 139.039 L2059.15 139.039 L2059.15 154.571 Q2059.15 158.252 2060.58 160.104 Q2062.02 161.932 2064.89 161.932 Q2068.33 161.932 2070.33 159.733 Q2072.34 157.534 2072.34 153.738 L2072.34 139.039 L2076.6 139.039 L2076.6 164.965 L2072.34 164.965 L2072.34 160.983 Q2070.79 163.344 2068.73 164.502 Q2066.69 165.636 2063.98 165.636 Q2059.52 165.636 2057.2 162.858 Q2054.89 160.08 2054.89 154.733 M2065.6 138.414 L2065.6 138.414 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2105.56 144.016 Q2107.15 141.145 2109.38 139.78 Q2111.6 138.414 2114.61 138.414 Q2118.66 138.414 2120.86 141.261 Q2123.06 144.085 2123.06 149.317 L2123.06 164.965 L2118.77 164.965 L2118.77 149.455 Q2118.77 145.729 2117.46 143.923 Q2116.14 142.118 2113.43 142.118 Q2110.12 142.118 2108.2 144.317 Q2106.27 146.516 2106.27 150.312 L2106.27 164.965 L2101.99 164.965 L2101.99 149.455 Q2101.99 145.705 2100.67 143.923 Q2099.35 142.118 2096.6 142.118 Q2093.33 142.118 2091.41 144.34 Q2089.49 146.539 2089.49 150.312 L2089.49 164.965 L2085.21 164.965 L2085.21 139.039 L2089.49 139.039 L2089.49 143.067 Q2090.95 140.682 2092.99 139.548 Q2095.02 138.414 2097.83 138.414 Q2100.65 138.414 2102.62 139.849 Q2104.61 141.284 2105.56 144.016 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2153.73 150.937 L2153.73 153.02 L2134.14 153.02 Q2134.42 157.418 2136.78 159.733 Q2139.17 162.025 2143.4 162.025 Q2145.86 162.025 2148.15 161.423 Q2150.46 160.821 2152.73 159.617 L2152.73 163.645 Q2150.44 164.617 2148.03 165.127 Q2145.63 165.636 2143.15 165.636 Q2136.95 165.636 2133.31 162.025 Q2129.7 158.414 2129.7 152.256 Q2129.7 145.891 2133.13 142.164 Q2136.58 138.414 2142.41 138.414 Q2147.64 138.414 2150.67 141.793 Q2153.73 145.15 2153.73 150.937 M2149.47 149.687 Q2149.42 146.192 2147.5 144.108 Q2145.6 142.025 2142.45 142.025 Q2138.89 142.025 2136.74 144.039 Q2134.61 146.053 2134.28 149.71 L2149.47 149.687 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2175.74 143.02 Q2175.02 142.604 2174.17 142.418 Q2173.33 142.21 2172.32 142.21 Q2168.7 142.21 2166.76 144.571 Q2164.84 146.909 2164.84 151.307 L2164.84 164.965 L2160.56 164.965 L2160.56 139.039 L2164.84 139.039 L2164.84 143.067 Q2166.18 140.705 2168.33 139.571 Q2170.49 138.414 2173.57 138.414 Q2174.01 138.414 2174.54 138.483 Q2175.07 138.53 2175.72 138.645 L2175.74 143.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2180.21 139.039 L2184.47 139.039 L2184.47 164.965 L2180.21 164.965 L2180.21 139.039 M2180.21 128.946 L2184.47 128.946 L2184.47 134.34 L2180.21 134.34 L2180.21 128.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2212.04 140.034 L2212.04 144.016 Q2210.23 143.02 2208.4 142.534 Q2206.6 142.025 2204.75 142.025 Q2200.6 142.025 2198.31 144.664 Q2196.02 147.28 2196.02 152.025 Q2196.02 156.77 2198.31 159.409 Q2200.6 162.025 2204.75 162.025 Q2206.6 162.025 2208.4 161.539 Q2210.23 161.029 2212.04 160.034 L2212.04 163.969 Q2210.26 164.803 2208.33 165.219 Q2206.44 165.636 2204.28 165.636 Q2198.43 165.636 2194.98 161.955 Q2191.53 158.275 2191.53 152.025 Q2191.53 145.682 2195 142.048 Q2198.5 138.414 2204.56 138.414 Q2206.53 138.414 2208.4 138.831 Q2210.28 139.224 2212.04 140.034 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2231.23 151.932 Q2226.07 151.932 2224.07 153.113 Q2222.08 154.293 2222.08 157.141 Q2222.08 159.409 2223.57 160.752 Q2225.07 162.071 2227.64 162.071 Q2231.18 162.071 2233.31 159.571 Q2235.46 157.048 2235.46 152.881 L2235.46 151.932 L2231.23 151.932 M2239.72 150.173 L2239.72 164.965 L2235.46 164.965 L2235.46 161.029 Q2234.01 163.391 2231.83 164.525 Q2229.65 165.636 2226.51 165.636 Q2222.52 165.636 2220.16 163.414 Q2217.82 161.168 2217.82 157.418 Q2217.82 153.043 2220.74 150.821 Q2223.68 148.599 2229.49 148.599 L2235.46 148.599 L2235.46 148.182 Q2235.46 145.243 2233.52 143.645 Q2231.6 142.025 2228.1 142.025 Q2225.88 142.025 2223.77 142.557 Q2221.67 143.09 2219.72 144.155 L2219.72 140.219 Q2222.06 139.317 2224.26 138.877 Q2226.46 138.414 2228.54 138.414 Q2234.17 138.414 2236.95 141.33 Q2239.72 144.247 2239.72 150.173 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2248.5 128.946 L2252.76 128.946 L2252.76 164.965 L2248.5 164.965 L2248.5 128.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip370)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1850.12,199.525 2000.12,199.525 \"/>\n<path clip-path=\"url(#clip370)\" d=\"M2041.62 180.786 L2041.62 184.328 L2037.55 184.328 Q2035.26 184.328 2034.35 185.254 Q2033.47 186.18 2033.47 188.587 L2033.47 190.879 L2040.49 190.879 L2040.49 194.189 L2033.47 194.189 L2033.47 216.805 L2029.19 216.805 L2029.19 194.189 L2025.12 194.189 L2025.12 190.879 L2029.19 190.879 L2029.19 189.073 Q2029.19 184.745 2031.21 182.777 Q2033.22 180.786 2037.59 180.786 L2041.62 180.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2045.19 190.879 L2049.45 190.879 L2049.45 216.805 L2045.19 216.805 L2045.19 190.879 M2045.19 180.786 L2049.45 180.786 L2049.45 186.18 L2045.19 186.18 L2045.19 180.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip370)\" d=\"M2062.57 183.518 L2062.57 190.879 L2071.34 190.879 L2071.34 194.189 L2062.57 194.189 L2062.57 208.263 Q2062.57 211.434 2063.43 212.337 Q2064.31 213.24 2066.97 213.24 L2071.34 213.24 L2071.34 216.805 L2066.97 216.805 Q2062.04 216.805 2060.16 214.976 Q2058.29 213.124 2058.29 208.263 L2058.29 194.189 L2055.16 194.189 L2055.16 190.879 L2058.29 190.879 L2058.29 183.518 L2062.57 183.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/quantum1d/2.haldane/#Thermodynamic-limit","page":"The Haldane gap","title":"Thermodynamic limit","text":"","category":"section"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"A much nicer way of obtaining the Haldane gap is by working directly in the thermodynamic limit. As was already hinted at by the edge modes, this model is in a non-trivial SPT phase. Thus, care must be taken when selecting the symmetry sectors. The groundstate has half-integer edge modes, thus the virtual spaces must also all carry half-integer charges.","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"In contrast with the finite size case, we now should specify a momentum label to the excitations. This way, it is possible to scan the dispersion relation over the entire momentum space.","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"virtual_space_inf = Rep[SU₂](1 // 2 => 20, 3 // 2 => 20, 5 // 2 => 10, 7 // 2 => 10,\n    9 // 2 => 5)\nψ₀_inf = InfiniteMPS([physical_space], [virtual_space_inf])\nψ_inf, envs_inf, delta_inf = find_groundstate(ψ₀_inf, H)\n\nkspace = range(0, π, 16)\nEs, _ = excitations(H, QuasiparticleAnsatz(), kspace, ψ_inf, envs_inf; sector=SU₂(1))\n\nΔE, idx = findmin(real.(Es))\nprintln(\"minimum @k = $(kspace[idx]):\\t ΔE = $(ΔE)\")","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"[ Info: vumps @iteration 1 galerkin = 0.6648889732866761\n[ Info: vumps @iteration 2 galerkin = 0.06359011437557995\n[ Info: vumps @iteration 3 galerkin = 0.0164265217276693\n[ Info: vumps @iteration 4 galerkin = 0.002373916187780843\n[ Info: vumps @iteration 5 galerkin = 0.0006289175273869992\n[ Info: vumps @iteration 6 galerkin = 0.00022983228453123588\n[ Info: vumps @iteration 7 galerkin = 0.00010467216817002606\n[ Info: vumps @iteration 8 galerkin = 5.438736021221384e-5\n[ Info: CG: initializing with f = -0.936207316315, ‖∇f‖ = 7.6838e-05\n[ Info: CG: iter    1: f = -0.936207316802, ‖∇f‖ = 3.3956e-05, α = 1.77e-01, β = 0.00e+00, nfg = 5\n[ Info: CG: iter    2: f = -0.936207316979, ‖∇f‖ = 2.4905e-05, α = 3.25e-01, β = 1.65e-01, nfg = 2\n[ Info: CG: iter    3: f = -0.936207317061, ‖∇f‖ = 1.3668e-05, α = 2.55e-01, β = 6.41e-01, nfg = 2\n[ Info: CG: iter    4: f = -0.936207317085, ‖∇f‖ = 8.2456e-06, α = 2.51e-01, β = 3.10e-01, nfg = 2\n[ Info: CG: iter    5: f = -0.936207317094, ‖∇f‖ = 5.4141e-06, α = 2.88e-01, β = 3.53e-01, nfg = 2\n[ Info: CG: iter    6: f = -0.936207317098, ‖∇f‖ = 3.5886e-06, α = 2.58e-01, β = 4.29e-01, nfg = 2\n[ Info: CG: iter    7: f = -0.936207317100, ‖∇f‖ = 2.3617e-06, α = 2.28e-01, β = 4.39e-01, nfg = 2\n[ Info: CG: iter    8: f = -0.936207317100, ‖∇f‖ = 1.5488e-06, α = 2.07e-01, β = 4.38e-01, nfg = 2\n[ Info: CG: iter    9: f = -0.936207317101, ‖∇f‖ = 1.0240e-06, α = 2.29e-01, β = 4.16e-01, nfg = 2\n[ Info: CG: iter   10: f = -0.936207317101, ‖∇f‖ = 6.7229e-07, α = 2.44e-01, β = 4.52e-01, nfg = 2\n[ Info: CG: iter   11: f = -0.936207317101, ‖∇f‖ = 4.5048e-07, α = 2.40e-01, β = 4.23e-01, nfg = 2\n[ Info: CG: iter   12: f = -0.936207317101, ‖∇f‖ = 2.8542e-07, α = 2.10e-01, β = 4.53e-01, nfg = 2\n[ Info: CG: iter   13: f = -0.936207317101, ‖∇f‖ = 1.7638e-07, α = 2.10e-01, β = 3.99e-01, nfg = 2\n[ Info: CG: iter   14: f = -0.936207317101, ‖∇f‖ = 1.1830e-07, α = 2.33e-01, β = 3.84e-01, nfg = 2\n[ Info: CG: iter   15: f = -0.936207317101, ‖∇f‖ = 8.0831e-08, α = 2.09e-01, β = 4.50e-01, nfg = 2\n[ Info: CG: iter   16: f = -0.936207317101, ‖∇f‖ = 5.8991e-08, α = 2.06e-01, β = 4.67e-01, nfg = 2\n[ Info: CG: iter   17: f = -0.936207317101, ‖∇f‖ = 4.3695e-08, α = 2.09e-01, β = 5.30e-01, nfg = 2\n[ Info: CG: iter   18: f = -0.936207317101, ‖∇f‖ = 3.2093e-08, α = 1.97e-01, β = 5.52e-01, nfg = 2\n[ Info: CG: iter   19: f = -0.936207317101, ‖∇f‖ = 2.3767e-08, α = 2.23e-01, β = 5.39e-01, nfg = 2\n[ Info: CG: iter   20: f = -0.936207317101, ‖∇f‖ = 1.7986e-08, α = 2.39e-01, β = 5.49e-01, nfg = 2\n[ Info: CG: iter   21: f = -0.936207317101, ‖∇f‖ = 1.3820e-08, α = 2.37e-01, β = 5.73e-01, nfg = 2\n[ Info: CG: iter   22: f = -0.936207317101, ‖∇f‖ = 1.0492e-08, α = 2.20e-01, β = 5.91e-01, nfg = 2\n[ Info: CG: iter   23: f = -0.936207317101, ‖∇f‖ = 8.5940e-09, α = 2.39e-01, β = 5.76e-01, nfg = 2\n[ Info: CG: iter   24: f = -0.936207317101, ‖∇f‖ = 7.4331e-09, α = 2.67e-01, β = 6.72e-01, nfg = 2\n[ Info: CG: iter   25: f = -0.936207317101, ‖∇f‖ = 6.0167e-09, α = 2.45e-01, β = 7.48e-01, nfg = 2\n[ Info: CG: iter   26: f = -0.936207317101, ‖∇f‖ = 4.5352e-09, α = 2.12e-01, β = 6.55e-01, nfg = 2\n[ Info: CG: iter   27: f = -0.936207317101, ‖∇f‖ = 2.9325e-09, α = 1.91e-01, β = 5.68e-01, nfg = 2\n[ Info: CG: iter   28: f = -0.936207317101, ‖∇f‖ = 1.7500e-09, α = 1.76e-01, β = 4.18e-01, nfg = 2\n[ Info: CG: iter   29: f = -0.936207317101, ‖∇f‖ = 1.0053e-09, α = 1.85e-01, β = 3.56e-01, nfg = 2\n[ Info: CG: iter   30: f = -0.936207317101, ‖∇f‖ = 6.0296e-10, α = 2.02e-01, β = 3.30e-01, nfg = 2\n[ Info: CG: iter   31: f = -0.936207317101, ‖∇f‖ = 3.9119e-10, α = 2.11e-01, β = 3.60e-01, nfg = 2\n[ Info: CG: iter   32: f = -0.936207317101, ‖∇f‖ = 2.8042e-10, α = 2.19e-01, β = 4.21e-01, nfg = 2\n[ Info: CG: iter   33: f = -0.936207317101, ‖∇f‖ = 2.1988e-10, α = 2.21e-01, β = 5.14e-01, nfg = 2\n[ Info: CG: iter   34: f = -0.936207317101, ‖∇f‖ = 1.9308e-10, α = 2.56e-01, β = 6.15e-01, nfg = 2\n[ Info: CG: iter   35: f = -0.936207317101, ‖∇f‖ = 1.6850e-10, α = 2.54e-01, β = 7.71e-01, nfg = 2\n[ Info: CG: iter   36: f = -0.936207317101, ‖∇f‖ = 1.4140e-10, α = 2.25e-01, β = 7.61e-01, nfg = 2\n[ Info: CG: iter   37: f = -0.936207317101, ‖∇f‖ = 1.1451e-10, α = 2.29e-01, β = 7.04e-01, nfg = 2\n[ Info: CG: iter   38: f = -0.936207317101, ‖∇f‖ = 9.1346e-11, α = 2.33e-01, β = 6.55e-01, nfg = 2\n[ Info: CG: iter   39: f = -0.936207317101, ‖∇f‖ = 7.0586e-11, α = 2.35e-01, β = 6.37e-01, nfg = 2\n[ Info: CG: iter   40: f = -0.936207317101, ‖∇f‖ = 5.8120e-11, α = 2.60e-01, β = 5.97e-01, nfg = 2\n[ Info: CG: iter   41: f = -0.936207317101, ‖∇f‖ = 4.7058e-11, α = 2.59e-01, β = 6.78e-01, nfg = 2\n[ Info: CG: iter   42: f = -0.936207317101, ‖∇f‖ = 3.2408e-11, α = 2.24e-01, β = 6.55e-01, nfg = 2\n[ Info: CG: iter   43: f = -0.936207317101, ‖∇f‖ = 2.1412e-11, α = 2.07e-01, β = 4.75e-01, nfg = 2\n[ Info: CG: iter   44: f = -0.936207317101, ‖∇f‖ = 1.3598e-11, α = 1.86e-01, β = 4.35e-01, nfg = 2\n[ Info: CG: iter   45: f = -0.936207317101, ‖∇f‖ = 8.9005e-12, α = 1.76e-01, β = 4.05e-01, nfg = 2\n[ Info: CG: iter   46: f = -0.936207317101, ‖∇f‖ = 5.5988e-12, α = 1.85e-01, β = 4.27e-01, nfg = 2\n[ Info: CG: iter   47: f = -0.936207317101, ‖∇f‖ = 3.6664e-12, α = 2.10e-01, β = 3.97e-01, nfg = 2\n[ Info: CG: iter   48: f = -0.936207317101, ‖∇f‖ = 2.5881e-12, α = 2.24e-01, β = 4.29e-01, nfg = 2\n[ Info: CG: iter   49: f = -0.936207317101, ‖∇f‖ = 1.9556e-12, α = 2.36e-01, β = 4.95e-01, nfg = 2\n[ Info: CG: iter   50: f = -0.936207317101, ‖∇f‖ = 1.5149e-12, α = 2.25e-01, β = 5.73e-01, nfg = 2\n[ Info: CG: iter   51: f = -0.936207317101, ‖∇f‖ = 1.2152e-12, α = 2.33e-01, β = 6.02e-01, nfg = 2\n[ Info: CG: converged after 52 iterations: f = -0.936207317101, ‖∇f‖ = 9.9968e-13\n[ Info: Found excitations for p = 2.9321531433504737\n[ Info: Found excitations for p = 3.141592653589793\n[ Info: Found excitations for p = 2.722713633111154\n[ Info: Found excitations for p = 2.5132741228718345\n[ Info: Found excitations for p = 2.303834612632515\n[ Info: Found excitations for p = 0.0\n[ Info: Found excitations for p = 2.0943951023931953\n[ Info: Found excitations for p = 1.8849555921538759\n[ Info: Found excitations for p = 1.6755160819145563\n[ Info: Found excitations for p = 1.4660765716752369\n[ Info: Found excitations for p = 0.8377580409572781\n[ Info: Found excitations for p = 1.0471975511965976\n[ Info: Found excitations for p = 1.2566370614359172\n[ Info: Found excitations for p = 0.6283185307179586\n[ Info: Found excitations for p = 0.41887902047863906\n[ Info: Found excitations for p = 0.20943951023931953\nminimum @k = 0.0:\t ΔE = -0.2595611997968351\n","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"plot(kspace, real.(Es); xaxis=\"momentum\", yaxis=\"ΔE\", label=\"S = 1\")","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip400\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip401\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip402\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"166.42,1505.26 166.42,47.2441 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"842.082,1505.26 842.082,47.2441 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1517.74,1505.26 1517.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2193.41,1505.26 2193.41,47.2441 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,1505.26 166.42,1486.36 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"842.082,1505.26 842.082,1486.36 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1517.74,1505.26 1517.74,1486.36 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2193.41,1505.26 2193.41,1486.36 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M166.42 1536.18 Q162.809 1536.18 160.98 1539.74 Q159.175 1543.28 159.175 1550.41 Q159.175 1557.52 160.98 1561.09 Q162.809 1564.63 166.42 1564.63 Q170.054 1564.63 171.86 1561.09 Q173.688 1557.52 173.688 1550.41 Q173.688 1543.28 171.86 1539.74 Q170.054 1536.18 166.42 1536.18 M166.42 1532.47 Q172.23 1532.47 175.286 1537.08 Q178.364 1541.66 178.364 1550.41 Q178.364 1559.14 175.286 1563.75 Q172.23 1568.33 166.42 1568.33 Q160.61 1568.33 157.531 1563.75 Q154.475 1559.14 154.475 1550.41 Q154.475 1541.66 157.531 1537.08 Q160.61 1532.47 166.42 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M832.464 1563.72 L840.103 1563.72 L840.103 1537.36 L831.793 1539.03 L831.793 1534.77 L840.057 1533.1 L844.733 1533.1 L844.733 1563.72 L852.372 1563.72 L852.372 1567.66 L832.464 1567.66 L832.464 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1512.4 1563.72 L1528.72 1563.72 L1528.72 1567.66 L1506.77 1567.66 L1506.77 1563.72 Q1509.43 1560.97 1514.02 1556.34 Q1518.62 1551.69 1519.81 1550.35 Q1522.05 1547.82 1522.93 1546.09 Q1523.83 1544.33 1523.83 1542.64 Q1523.83 1539.88 1521.89 1538.15 Q1519.97 1536.41 1516.87 1536.41 Q1514.67 1536.41 1512.21 1537.17 Q1509.78 1537.94 1507 1539.49 L1507 1534.77 Q1509.83 1533.63 1512.28 1533.05 Q1514.74 1532.47 1516.77 1532.47 Q1522.14 1532.47 1525.34 1535.16 Q1528.53 1537.85 1528.53 1542.34 Q1528.53 1544.47 1527.72 1546.39 Q1526.93 1548.28 1524.83 1550.88 Q1524.25 1551.55 1521.15 1554.77 Q1518.05 1557.96 1512.4 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2197.66 1549.03 Q2201.01 1549.74 2202.89 1552.01 Q2204.78 1554.28 2204.78 1557.61 Q2204.78 1562.73 2201.27 1565.53 Q2197.75 1568.33 2191.27 1568.33 Q2189.09 1568.33 2186.78 1567.89 Q2184.48 1567.47 2182.03 1566.62 L2182.03 1562.1 Q2183.97 1563.24 2186.29 1563.82 Q2188.6 1564.4 2191.13 1564.4 Q2195.53 1564.4 2197.82 1562.66 Q2200.13 1560.92 2200.13 1557.61 Q2200.13 1554.56 2197.98 1552.85 Q2195.85 1551.11 2192.03 1551.11 L2188 1551.11 L2188 1547.27 L2192.22 1547.27 Q2195.66 1547.27 2197.49 1545.9 Q2199.32 1544.51 2199.32 1541.92 Q2199.32 1539.26 2197.42 1537.85 Q2195.55 1536.41 2192.03 1536.41 Q2190.11 1536.41 2187.91 1536.83 Q2185.71 1537.24 2183.07 1538.12 L2183.07 1533.96 Q2185.73 1533.22 2188.05 1532.85 Q2190.39 1532.47 2192.45 1532.47 Q2197.77 1532.47 2200.87 1534.91 Q2203.97 1537.31 2203.97 1541.43 Q2203.97 1544.3 2202.33 1546.29 Q2200.69 1548.26 2197.66 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1072.12 1621.32 Q1074.32 1617.37 1077.37 1615.49 Q1080.43 1613.62 1084.57 1613.62 Q1090.14 1613.62 1093.16 1617.53 Q1096.18 1621.41 1096.18 1628.61 L1096.18 1650.12 L1090.3 1650.12 L1090.3 1628.8 Q1090.3 1623.67 1088.48 1621.19 Q1086.67 1618.71 1082.94 1618.71 Q1078.39 1618.71 1075.75 1621.73 Q1073.11 1624.76 1073.11 1629.98 L1073.11 1650.12 L1067.22 1650.12 L1067.22 1628.8 Q1067.22 1623.64 1065.41 1621.19 Q1063.59 1618.71 1059.8 1618.71 Q1055.32 1618.71 1052.68 1621.76 Q1050.03 1624.79 1050.03 1629.98 L1050.03 1650.12 L1044.15 1650.12 L1044.15 1614.48 L1050.03 1614.48 L1050.03 1620.01 Q1052.04 1616.74 1054.84 1615.18 Q1057.64 1613.62 1061.49 1613.62 Q1065.37 1613.62 1068.08 1615.59 Q1070.82 1617.56 1072.12 1621.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1121.68 1618.58 Q1116.97 1618.58 1114.23 1622.27 Q1111.49 1625.93 1111.49 1632.33 Q1111.49 1638.73 1114.2 1642.42 Q1116.94 1646.08 1121.68 1646.08 Q1126.36 1646.08 1129.1 1642.39 Q1131.83 1638.7 1131.83 1632.33 Q1131.83 1626 1129.1 1622.31 Q1126.36 1618.58 1121.68 1618.58 M1121.68 1613.62 Q1129.32 1613.62 1133.68 1618.58 Q1138.04 1623.55 1138.04 1632.33 Q1138.04 1641.08 1133.68 1646.08 Q1129.32 1651.05 1121.68 1651.05 Q1114.01 1651.05 1109.65 1646.08 Q1105.32 1641.08 1105.32 1632.33 Q1105.32 1623.55 1109.65 1618.58 Q1114.01 1613.62 1121.68 1613.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1175.5 1621.32 Q1177.7 1617.37 1180.75 1615.49 Q1183.81 1613.62 1187.95 1613.62 Q1193.52 1613.62 1196.54 1617.53 Q1199.56 1621.41 1199.56 1628.61 L1199.56 1650.12 L1193.68 1650.12 L1193.68 1628.8 Q1193.68 1623.67 1191.86 1621.19 Q1190.05 1618.71 1186.32 1618.71 Q1181.77 1618.71 1179.13 1621.73 Q1176.49 1624.76 1176.49 1629.98 L1176.49 1650.12 L1170.6 1650.12 L1170.6 1628.8 Q1170.6 1623.64 1168.79 1621.19 Q1166.97 1618.71 1163.18 1618.71 Q1158.7 1618.71 1156.05 1621.76 Q1153.41 1624.79 1153.41 1629.98 L1153.41 1650.12 L1147.52 1650.12 L1147.52 1614.48 L1153.41 1614.48 L1153.41 1620.01 Q1155.42 1616.74 1158.22 1615.18 Q1161.02 1613.62 1164.87 1613.62 Q1168.75 1613.62 1171.46 1615.59 Q1174.2 1617.56 1175.5 1621.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1241.74 1630.84 L1241.74 1633.7 L1214.81 1633.7 Q1215.19 1639.75 1218.44 1642.93 Q1221.72 1646.08 1227.54 1646.08 Q1230.91 1646.08 1234.07 1645.25 Q1237.25 1644.43 1240.37 1642.77 L1240.37 1648.31 Q1237.22 1649.65 1233.91 1650.35 Q1230.6 1651.05 1227.19 1651.05 Q1218.66 1651.05 1213.66 1646.08 Q1208.7 1641.12 1208.7 1632.65 Q1208.7 1623.9 1213.41 1618.77 Q1218.15 1613.62 1226.17 1613.62 Q1233.37 1613.62 1237.54 1618.26 Q1241.74 1622.88 1241.74 1630.84 M1235.88 1629.12 Q1235.82 1624.31 1233.17 1621.45 Q1230.56 1618.58 1226.24 1618.58 Q1221.33 1618.58 1218.37 1621.35 Q1215.45 1624.12 1215 1629.15 L1235.88 1629.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1280.98 1628.61 L1280.98 1650.12 L1275.12 1650.12 L1275.12 1628.8 Q1275.12 1623.74 1273.15 1621.22 Q1271.18 1618.71 1267.23 1618.71 Q1262.49 1618.71 1259.75 1621.73 Q1257.01 1624.76 1257.01 1629.98 L1257.01 1650.12 L1251.13 1650.12 L1251.13 1614.48 L1257.01 1614.48 L1257.01 1620.01 Q1259.12 1616.8 1261.95 1615.21 Q1264.81 1613.62 1268.54 1613.62 Q1274.68 1613.62 1277.83 1617.44 Q1280.98 1621.22 1280.98 1628.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1298.46 1604.35 L1298.46 1614.48 L1310.52 1614.48 L1310.52 1619.03 L1298.46 1619.03 L1298.46 1638.38 Q1298.46 1642.74 1299.63 1643.98 Q1300.84 1645.22 1304.5 1645.22 L1310.52 1645.22 L1310.52 1650.12 L1304.5 1650.12 Q1297.72 1650.12 1295.14 1647.61 Q1292.57 1645.06 1292.57 1638.38 L1292.57 1619.03 L1288.27 1619.03 L1288.27 1614.48 L1292.57 1614.48 L1292.57 1604.35 L1298.46 1604.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1317.62 1636.06 L1317.62 1614.48 L1323.47 1614.48 L1323.47 1635.83 Q1323.47 1640.89 1325.45 1643.44 Q1327.42 1645.95 1331.37 1645.95 Q1336.11 1645.95 1338.85 1642.93 Q1341.61 1639.91 1341.61 1634.69 L1341.61 1614.48 L1347.47 1614.48 L1347.47 1650.12 L1341.61 1650.12 L1341.61 1644.65 Q1339.48 1647.9 1336.65 1649.49 Q1333.85 1651.05 1330.12 1651.05 Q1323.98 1651.05 1320.8 1647.23 Q1317.62 1643.41 1317.62 1636.06 M1332.35 1613.62 L1332.35 1613.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1387.29 1621.32 Q1389.48 1617.37 1392.54 1615.49 Q1395.6 1613.62 1399.73 1613.62 Q1405.3 1613.62 1408.33 1617.53 Q1411.35 1621.41 1411.35 1628.61 L1411.35 1650.12 L1405.46 1650.12 L1405.46 1628.8 Q1405.46 1623.67 1403.65 1621.19 Q1401.83 1618.71 1398.11 1618.71 Q1393.56 1618.71 1390.92 1621.73 Q1388.28 1624.76 1388.28 1629.98 L1388.28 1650.12 L1382.39 1650.12 L1382.39 1628.8 Q1382.39 1623.64 1380.57 1621.19 Q1378.76 1618.71 1374.97 1618.71 Q1370.48 1618.71 1367.84 1621.76 Q1365.2 1624.79 1365.2 1629.98 L1365.2 1650.12 L1359.31 1650.12 L1359.31 1614.48 L1365.2 1614.48 L1365.2 1620.01 Q1367.2 1616.74 1370.01 1615.18 Q1372.81 1613.62 1376.66 1613.62 Q1380.54 1613.62 1383.25 1615.59 Q1385.98 1617.56 1387.29 1621.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1377.41 2352.76,1377.41 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1086.67 2352.76,1086.67 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,795.927 2352.76,795.927 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,505.185 2352.76,505.185 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,214.443 2352.76,214.443 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1377.41 121.638,1377.41 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1086.67 121.638,1086.67 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,795.927 121.638,795.927 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,505.185 121.638,505.185 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,214.443 121.638,214.443 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M-38.6065 1377.86 L-8.93073 1377.86 L-8.93073 1381.8 L-38.6065 1381.8 L-38.6065 1377.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M11.1618 1363.21 Q7.55066 1363.21 5.72197 1366.77 Q3.91642 1370.32 3.91642 1377.45 Q3.91642 1384.55 5.72197 1388.12 Q7.55066 1391.66 11.1618 1391.66 Q14.796 1391.66 16.6015 1388.12 Q18.4302 1384.55 18.4302 1377.45 Q18.4302 1370.32 16.6015 1366.77 Q14.796 1363.21 11.1618 1363.21 M11.1618 1359.51 Q16.9719 1359.51 20.0274 1364.11 Q23.1061 1368.7 23.1061 1377.45 Q23.1061 1386.17 20.0274 1390.78 Q16.9719 1395.36 11.1618 1395.36 Q5.3516 1395.36 2.27291 1390.78 Q-0.782629 1386.17 -0.782629 1377.45 Q-0.782629 1368.7 2.27291 1364.11 Q5.3516 1359.51 11.1618 1359.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M31.3237 1388.81 L36.2079 1388.81 L36.2079 1394.69 L31.3237 1394.69 L31.3237 1388.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M50.4208 1390.76 L66.7402 1390.76 L66.7402 1394.69 L44.7958 1394.69 L44.7958 1390.76 Q47.4579 1388 52.0412 1383.37 Q56.6476 1378.72 57.8282 1377.38 Q60.0735 1374.85 60.9532 1373.12 Q61.8559 1371.36 61.8559 1369.67 Q61.8559 1366.91 59.9115 1365.18 Q57.9902 1363.44 54.8884 1363.44 Q52.6893 1363.44 50.2356 1364.2 Q47.8051 1364.97 45.0273 1366.52 L45.0273 1361.8 Q47.8514 1360.66 50.3051 1360.08 Q52.7588 1359.51 54.7958 1359.51 Q60.1661 1359.51 63.3605 1362.19 Q66.555 1364.88 66.555 1369.37 Q66.555 1371.5 65.7448 1373.42 Q64.9578 1375.32 62.8513 1377.91 Q62.2726 1378.58 59.1708 1381.8 Q56.0689 1384.99 50.4208 1390.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M9.56454 1072.47 Q5.95345 1072.47 4.12475 1076.03 Q2.31921 1079.57 2.31921 1086.7 Q2.31921 1093.81 4.12475 1097.37 Q5.95345 1100.92 9.56454 1100.92 Q13.1988 1100.92 15.0043 1097.37 Q16.833 1093.81 16.833 1086.7 Q16.833 1079.57 15.0043 1076.03 Q13.1988 1072.47 9.56454 1072.47 M9.56454 1068.76 Q15.3747 1068.76 18.4302 1073.37 Q21.5089 1077.95 21.5089 1086.7 Q21.5089 1095.43 18.4302 1100.04 Q15.3747 1104.62 9.56454 1104.62 Q3.75438 1104.62 0.675697 1100.04 Q-2.37984 1095.43 -2.37984 1086.7 Q-2.37984 1077.95 0.675697 1073.37 Q3.75438 1068.76 9.56454 1068.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M29.7265 1098.07 L34.6107 1098.07 L34.6107 1103.95 L29.7265 1103.95 L29.7265 1098.07 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M54.7958 1072.47 Q51.1847 1072.47 49.356 1076.03 Q47.5504 1079.57 47.5504 1086.7 Q47.5504 1093.81 49.356 1097.37 Q51.1847 1100.92 54.7958 1100.92 Q58.43 1100.92 60.2356 1097.37 Q62.0643 1093.81 62.0643 1086.7 Q62.0643 1079.57 60.2356 1076.03 Q58.43 1072.47 54.7958 1072.47 M54.7958 1068.76 Q60.6059 1068.76 63.6615 1073.37 Q66.7402 1077.95 66.7402 1086.7 Q66.7402 1095.43 63.6615 1100.04 Q60.6059 1104.62 54.7958 1104.62 Q48.9856 1104.62 45.9069 1100.04 Q42.8514 1095.43 42.8514 1086.7 Q42.8514 1077.95 45.9069 1073.37 Q48.9856 1068.76 54.7958 1068.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M11.1618 781.725 Q7.55066 781.725 5.72197 785.29 Q3.91642 788.832 3.91642 795.961 Q3.91642 803.068 5.72197 806.633 Q7.55066 810.174 11.1618 810.174 Q14.796 810.174 16.6015 806.633 Q18.4302 803.068 18.4302 795.961 Q18.4302 788.832 16.6015 785.29 Q14.796 781.725 11.1618 781.725 M11.1618 778.022 Q16.9719 778.022 20.0274 782.628 Q23.1061 787.211 23.1061 795.961 Q23.1061 804.688 20.0274 809.295 Q16.9719 813.878 11.1618 813.878 Q5.3516 813.878 2.27291 809.295 Q-0.782629 804.688 -0.782629 795.961 Q-0.782629 787.211 2.27291 782.628 Q5.3516 778.022 11.1618 778.022 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M31.3237 807.327 L36.2079 807.327 L36.2079 813.207 L31.3237 813.207 L31.3237 807.327 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M50.4208 809.272 L66.7402 809.272 L66.7402 813.207 L44.7958 813.207 L44.7958 809.272 Q47.4579 806.517 52.0412 801.887 Q56.6476 797.235 57.8282 795.892 Q60.0735 793.369 60.9532 791.633 Q61.8559 789.873 61.8559 788.184 Q61.8559 785.429 59.9115 783.693 Q57.9902 781.957 54.8884 781.957 Q52.6893 781.957 50.2356 782.721 Q47.8051 783.485 45.0273 785.036 L45.0273 780.313 Q47.8514 779.179 50.3051 778.6 Q52.7588 778.022 54.7958 778.022 Q60.1661 778.022 63.3605 780.707 Q66.555 783.392 66.555 787.883 Q66.555 790.012 65.7448 791.934 Q64.9578 793.832 62.8513 796.424 Q62.2726 797.096 59.1708 800.313 Q56.0689 803.508 50.4208 809.272 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M9.07843 490.983 Q5.46734 490.983 3.63864 494.548 Q1.8331 498.09 1.8331 505.219 Q1.8331 512.326 3.63864 515.891 Q5.46734 519.432 9.07843 519.432 Q12.7127 519.432 14.5182 515.891 Q16.3469 512.326 16.3469 505.219 Q16.3469 498.09 14.5182 494.548 Q12.7127 490.983 9.07843 490.983 M9.07843 487.28 Q14.8886 487.28 17.9441 491.886 Q21.0228 496.47 21.0228 505.219 Q21.0228 513.946 17.9441 518.553 Q14.8886 523.136 9.07843 523.136 Q3.26828 523.136 0.189588 518.553 Q-2.86595 513.946 -2.86595 505.219 Q-2.86595 496.47 0.189588 491.886 Q3.26828 487.28 9.07843 487.28 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M29.2404 516.585 L34.1246 516.585 L34.1246 522.465 L29.2404 522.465 L29.2404 516.585 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M57.1569 491.979 L45.3514 510.428 L57.1569 510.428 L57.1569 491.979 M55.93 487.905 L61.8096 487.905 L61.8096 510.428 L66.7402 510.428 L66.7402 514.317 L61.8096 514.317 L61.8096 522.465 L57.1569 522.465 L57.1569 514.317 L41.5551 514.317 L41.5551 509.803 L55.93 487.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M9.4025 200.242 Q5.79141 200.242 3.96272 203.806 Q2.15717 207.348 2.15717 214.478 Q2.15717 221.584 3.96272 225.149 Q5.79141 228.69 9.4025 228.69 Q13.0367 228.69 14.8423 225.149 Q16.671 221.584 16.671 214.478 Q16.671 207.348 14.8423 203.806 Q13.0367 200.242 9.4025 200.242 M9.4025 196.538 Q15.2127 196.538 18.2682 201.144 Q21.3469 205.728 21.3469 214.478 Q21.3469 223.204 18.2682 227.811 Q15.2127 232.394 9.4025 232.394 Q3.59235 232.394 0.51366 227.811 Q-2.54188 223.204 -2.54188 214.478 Q-2.54188 205.728 0.51366 201.144 Q3.59235 196.538 9.4025 196.538 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M29.5644 225.843 L34.4487 225.843 L34.4487 231.723 L29.5644 231.723 L29.5644 225.843 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M55.2124 212.579 Q52.0643 212.579 50.2125 214.732 Q48.3838 216.885 48.3838 220.635 Q48.3838 224.362 50.2125 226.538 Q52.0643 228.69 55.2124 228.69 Q58.3606 228.69 60.1893 226.538 Q62.0411 224.362 62.0411 220.635 Q62.0411 216.885 60.1893 214.732 Q58.3606 212.579 55.2124 212.579 M64.4948 197.927 L64.4948 202.186 Q62.7355 201.353 60.93 200.913 Q59.1476 200.473 57.3884 200.473 Q52.7588 200.473 50.3051 203.598 Q47.8745 206.723 47.5273 213.042 Q48.893 211.028 50.9532 209.964 Q53.0134 208.876 55.4902 208.876 Q60.6985 208.876 63.7078 212.047 Q66.7402 215.195 66.7402 220.635 Q66.7402 225.959 63.592 229.177 Q60.4439 232.394 55.2124 232.394 Q49.2171 232.394 46.0458 227.811 Q42.8745 223.204 42.8745 214.478 Q42.8745 206.283 46.7634 201.422 Q50.6523 196.538 57.2032 196.538 Q58.9624 196.538 60.7448 196.885 Q62.5504 197.232 64.4948 197.927 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M-130.049 795.031 L-94.2097 808.081 L-94.2097 781.949 L-130.049 795.031 M-88.8625 816.802 L-136.383 798.659 L-136.383 791.371 L-88.8625 773.26 L-88.8625 816.802 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M-136.383 766.321 L-136.383 736.275 L-130.972 736.275 L-130.972 759.892 L-116.903 759.892 L-116.903 737.262 L-111.493 737.262 L-111.493 759.892 L-94.2734 759.892 L-94.2734 735.702 L-88.8625 735.702 L-88.8625 766.321 L-136.383 766.321 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip402)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,1464 307.93,1068.71 449.441,985.025 590.951,838.035 732.462,849.507 873.972,677.099 1015.48,537.618 1156.99,482.762 1298.5,372.519 1440.01,289.781 1581.52,240.497 1723.03,182.407 1864.54,138.926 2006.06,115.645 2147.57,97.2925 2289.08,88.5087 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M177.741 199.525 L525.357 199.525 L525.357 95.8446 L177.741 95.8446  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"177.741,199.525 525.357,199.525 525.357,95.8446 177.741,95.8446 177.741,199.525 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"202.741,147.685 352.742,147.685 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M399.987 131.539 L399.987 136.099 Q397.325 134.826 394.964 134.201 Q392.603 133.576 390.404 133.576 Q386.585 133.576 384.501 135.057 Q382.441 136.539 382.441 139.27 Q382.441 141.562 383.807 142.743 Q385.196 143.9 389.038 144.618 L391.862 145.196 Q397.094 146.192 399.571 148.715 Q402.071 151.215 402.071 155.428 Q402.071 160.451 398.691 163.043 Q395.335 165.636 388.83 165.636 Q386.376 165.636 383.599 165.08 Q380.844 164.525 377.881 163.437 L377.881 158.622 Q380.728 160.219 383.46 161.029 Q386.191 161.84 388.83 161.84 Q392.835 161.84 395.011 160.266 Q397.186 158.692 397.186 155.775 Q397.186 153.229 395.612 151.793 Q394.061 150.358 390.497 149.641 L387.649 149.085 Q382.418 148.043 380.08 145.821 Q377.742 143.599 377.742 139.641 Q377.742 135.057 380.96 132.418 Q384.2 129.78 389.872 129.78 Q392.302 129.78 394.825 130.219 Q397.348 130.659 399.987 131.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M424.802 143.437 L454.478 143.437 L454.478 147.326 L424.802 147.326 L424.802 143.437 M424.802 152.881 L454.478 152.881 L454.478 156.817 L424.802 156.817 L424.802 152.881 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M480.45 161.029 L488.089 161.029 L488.089 134.664 L479.779 136.331 L479.779 132.071 L488.042 130.405 L492.718 130.405 L492.718 161.029 L500.357 161.029 L500.357 164.965 L480.45 164.965 L480.45 161.029 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"","category":"page"},{"location":"examples/quantum1d/2.haldane/","page":"The Haldane gap","title":"The Haldane gap","text":"This page was generated using Literate.jl.","category":"page"},{"location":"lib/lib/#Library-documentation","page":"Library","title":"Library documentation","text":"","category":"section"},{"location":"lib/lib/#lib_states","page":"Library","title":"States","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"FiniteMPS\nInfiniteMPS\nWindowMPS\nMPSMultiline","category":"page"},{"location":"lib/lib/#MPSKit.FiniteMPS","page":"Library","title":"MPSKit.FiniteMPS","text":"FiniteMPS{A<:GenericMPSTensor,B<:MPSBondTensor} <: AbstractFiniteMPS\n\nType that represents a finite Matrix Product State.\n\nFields\n\nALs – left-gauged MPS tensors\nARs – right-gauged MPS tensors\nACs – center-gauged MPS tensors\nCLs – gauge tensors\n\nWhere each is entry can be a tensor or missing.\n\nNotes\n\nBy convention, we have that:\n\nAL[i] * CL[i+1] = AC[i] = CL[i] * AR[i]\nAL[i]' * AL[i] = 1\nAR[i] * AR[i]' = 1\n\n\n\nConstructors\n\nFiniteMPS([f, eltype], physicalspaces::Vector{<:Union{S, CompositeSpace{S}},\n          virtualspaces::Vector{<:Union{S, CompositeSpace{S}};\n          normalize=true) where {S<:ElementarySpace}\nFiniteMPS([f, eltype], physicalspaces::Vector{<:Union{S,CompositeSpace{S}}},\n          maxvirtualspace::S;\n          normalize=true, left=oneunit(S), right=oneunit(S)) where {S<:ElementarySpace}\nFiniteMPS([f, eltype], N::Int, physicalspace::Union{S,CompositeSpace{S}},\n          maxvirtualspace::S;\n          normalize=true, left=oneunit(S), right=oneunit(S)) where {S<:ElementarySpace}\nFiniteMPS(As::Vector{<:GenericMPSTensor}; normalize=false, overwrite=false)\n\nConstruct an MPS via a specification of physical and virtual spaces, or from a list of tensors As. All cases reduce to the latter.\n\nArguments\n\nAs::Vector{<:GenericMPSTensor}: vector of site tensors\nf::Function=rand: initializer function for tensor data\neltype::Type{<:Number}=ComplexF64: scalar type of tensors\nphysicalspaces::Vector{<:Union{S, CompositeSpace{S}}: list of physical spaces\nN::Int: number of sites\nphysicalspace::Union{S,CompositeSpace{S}}: local physical space\nvirtualspaces::Vector{<:Union{S, CompositeSpace{S}}: list of virtual spaces\nmaxvirtualspace::S: maximum virtual space\n\nKeywords\n\nnormalize: normalize the constructed state\noverwrite=false: overwrite the given input tensors\nleft=oneunit(S): left-most virtual space\nright=oneunit(S): right-most virtual space\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.InfiniteMPS","page":"Library","title":"MPSKit.InfiniteMPS","text":"InfiniteMPS{A<:GenericMPSTensor,B<:MPSBondTensor} <: AbtractMPS\n\nType that represents an infinite Matrix Product State.\n\nFields\n\nAL – left-gauged MPS tensors\nAR – right-gauged MPS tensors\nAC – center-gauged MPS tensors\nCR – gauge tensors\n\nNotes\n\nBy convention, we have that:\n\nAL[i] * CR[i] = AC[i] = CR[i-1] * AR[i]\nAL[i]' * AL[i] = 1\nAR[i] * AR[i]' = 1\n\n\n\nConstructors\n\nInfiniteMPS([f, eltype], physicalspaces::Vector{<:Union{S, CompositeSpace{S}},\n            virtualspaces::Vector{<:Union{S, CompositeSpace{S}}) where\n            {S<:ElementarySpace}\nInfiniteMPS(As::AbstractVector{<:GenericMPSTensor}; tol=1e-14, maxiter=100)\nInfiniteMPS(ALs::AbstractVector{<:GenericMPSTensor}, C₀::MPSBondTensor;\n            tol=1e-14, maxiter=100)\n\nConstruct an MPS via a specification of physical and virtual spaces, or from a list of tensors As, or a list of left-gauged tensors ALs.\n\nArguments\n\nAs::AbstractVector{<:GenericMPSTensor}: vector of site tensors\nALs::AbstractVector{<:GenericMPSTensor}: vector of left-gauged site tensors\nC₀::MPSBondTensor: initial gauge tensor\nf::Function=rand: initializer function for tensor data\neltype::Type{<:Number}=ComplexF64: scalar type of tensors\nphysicalspaces::AbstractVector{<:Union{S, CompositeSpace{S}}: list of physical spaces\nvirtualspaces::AbstractVector{<:Union{S, CompositeSpace{S}}: list of virtual spaces\n\nKeywords\n\ntol: gauge fixing tolerance\nmaxiter: gauge fixing maximum iterations\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.WindowMPS","page":"Library","title":"MPSKit.WindowMPS","text":"WindowMPS{A<:GenericMPSTensor,B<:MPSBondTensor} <: AbstractFiniteMPS\n\nType that represents a finite Matrix Product State embedded in an infinte Matrix Product State.\n\nFields\n\nleft_gs::InfiniteMPS – left infinite environment\nwindow::FiniteMPS – finite window Matrix Product State\nright_gs::InfiniteMPS – right infinite environment\n\n\n\nConstructors\n\nWindowMPS(left_gs::InfiniteMPS, window_state::FiniteMPS, [right_gs::InfiniteMPS])\nWindowMPS(left_gs::InfiniteMPS, window_tensors::AbstractVector, [right_gs::InfiniteMPS])\nWindowMPS([f, eltype], physicalspaces::Vector{<:Union{S, CompositeSpace{S}},\n          virtualspaces::Vector{<:Union{S, CompositeSpace{S}}, left_gs::InfiniteMPS,\n          [right_gs::InfiniteMPS])\nWindowMPS([f, eltype], physicalspaces::Vector{<:Union{S,CompositeSpace{S}}},\n          maxvirtualspace::S, left_gs::InfiniteMPS, [right_gs::InfiniteMPS])\n\nConstruct a WindowMPS via a specification of left and right infinite environment, and either a window state or a vector of tensors to construct the window. Alternatively, it is possible to supply the same arguments as for the constructor of FiniteMPS, followed by a left (and right) environment to construct the WindowMPS in one step.\n\nnote: Note\nBy default, the right environment is chosen to be equal to the left, however no copy is made. In this case, changing the left state will also affect the right state.WindowMPS(state::InfiniteMPS, L::Int)\n\nConstruct a WindowMPS from an InfiniteMPS, by promoting a region of length L to a FiniteMPS.\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#Operators","page":"Library","title":"Operators","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"SparseMPO\nDenseMPO\nMPOHamiltonian","category":"page"},{"location":"lib/lib/#MPSKit.DenseMPO","page":"Library","title":"MPSKit.DenseMPO","text":"Represents a dense periodic mpo\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.MPOHamiltonian","page":"Library","title":"MPSKit.MPOHamiltonian","text":"MPOHamiltonian\n\nrepresents a general periodic quantum hamiltonian\n\nreally just a sparsempo, with some garantuees on its structure\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#Environments","page":"Library","title":"Environments","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"MPSKit.AbstractInfEnv\nMPSKit.PerMPOInfEnv\nMPSKit.MPOHamInfEnv\nMPSKit.FinEnv\nMPSKit.IDMRGEnvs","category":"page"},{"location":"lib/lib/#MPSKit.AbstractInfEnv","page":"Library","title":"MPSKit.AbstractInfEnv","text":"Abstract environment for an infinite state\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.PerMPOInfEnv","page":"Library","title":"MPSKit.PerMPOInfEnv","text":"This object manages the periodic mpo environments for an MPSMultiline\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.MPOHamInfEnv","page":"Library","title":"MPSKit.MPOHamInfEnv","text":"This object manages the hamiltonian environments for an InfiniteMPS\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.FinEnv","page":"Library","title":"MPSKit.FinEnv","text":"FinEnv keeps track of the environments for FiniteMPS / WindowMPS\nIt automatically checks if the queried environment is still correctly cached and if not - recalculates\n\nif above is set to nothing, above === below.\n\nopp can be a vector of nothing, in which case it'll just be the overlap\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#Generic-actions","page":"Library","title":"Generic actions","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"∂C\n∂∂C\n∂AC\n∂∂AC\n∂AC2\n∂∂AC2\n\nc_proj\nac_proj\nac2_proj\n\nexpectation_value","category":"page"},{"location":"lib/lib/#MPSKit.∂C","page":"Library","title":"MPSKit.∂C","text":"Zero-site derivative (the C matrix to the right of pos)\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#MPSKit.∂AC2","page":"Library","title":"MPSKit.∂AC2","text":"Two-site derivative\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#MPSKit.expectation_value","page":"Library","title":"MPSKit.expectation_value","text":"calculates the expectation value of op, where op is a plain tensormap where the first index works on site at\n\n\n\n\n\ncalculates the expectation value of op = op1op2op3*... (ie an N site operator) starting at site at\n\n\n\n\n\ncalculates the expectation value for the given operator/hamiltonian\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#Algorithms","page":"Library","title":"Algorithms","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"find_groundstate\ntimestep\nleading_boundary\ndynamicaldmrg\nchangebonds\nexcitations\napproximate","category":"page"},{"location":"lib/lib/#MPSKit.find_groundstate","page":"Library","title":"MPSKit.find_groundstate","text":"find_groundstate(Ψ, H, [environments]; kwargs...)\nfind_groundstate(Ψ, H, algorithm, environments)\n\nCompute the groundstate for Hamiltonian H with initial guess Ψ. If not specified, an optimization algorithm will be attempted based on the supplied keywords.\n\nArguments\n\nΨ::AbstractMPS: initial guess\nH::AbstractMPO: operator for which to find the groundstate\n[environments]: MPS environment manager\nalgorithm: optimization algorithm\n\nKeywords\n\ntol::Float64: tolerance for convergence criterium\nmaxiter::Int: maximum amount of iterations\nverbose::Bool: display progress information\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#MPSKit.timestep","page":"Library","title":"MPSKit.timestep","text":"timestep(Ψ, H, dt, algorithm, environments)\ntimestep!(Ψ, H, dt, algorithm, environments)\n\nCompute the time-evolved state Ψ  exp(-iHdt) Ψ.\n\nArguments\n\nΨ::AbstractMPS: current state\nH::AbstractMPO: evolution operator\ndt::Number: timestep\nalgorithm: evolution algorithm\n[environments]: environment manager\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#MPSKit.leading_boundary","page":"Library","title":"MPSKit.leading_boundary","text":"leading_boundary(state,opp,alg,envs=environments(state,ham))\n\napproximate the leading eigenvector for opp\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#MPSKit.excitations","page":"Library","title":"MPSKit.excitations","text":"excitations(H, algorithm::QuasiparticleAnsatz, Ψ::FiniteQP, [left_environments],\n            [right_environments]; num=1)\nexcitations(H, algorithm::QuasiparticleAnsatz, Ψ::InfiniteQP, [left_environments],\n            [right_environments]; num=1, solver=Defaults.solver)\nexcitations(H, algorithm::FiniteExcited, Ψs::NTuple{<:Any, <:FiniteMPS};\n            num=1, init=copy(first(Ψs)))\n\nCompute the first excited states and their energy gap above a groundstate.\n\nArguments\n\nH::AbstractMPO: operator for which to find the excitations\nalgorithm: optimization algorithm\nΨ::QP: initial quasiparticle guess\nΨs::NTuple{N, <:FiniteMPS}: N first excited states\n[left_environments]: left groundstate environment\n[right_environments]: right groundstate environment\n\nKeywords\n\nnum::Int: number of excited states to compute\nsolver: algorithm for the linear solver of the quasiparticle environments\ninit: initial excited state guess\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#MPSKit.approximate","page":"Library","title":"MPSKit.approximate","text":"approximate(state::InfiniteMPS, toapprox::Tuple{<:Union{SparseMPO,DenseMPO},<:InfiniteMPS}, alg, envs = environments(state,toapprox))\napproximate(state::MPSMultiline, toapprox::Tuple{<:MPOMultiline,<:MPSMultiline}, alg::VUMPS, envs = environments(state,toapprox))\napproximate(ost::MPSMultiline, toapprox::Tuple{<:MPOMultiline,<:MPSMultiline}, alg::IDMRG1, oenvs = environments(ost,toapprox))\napproximate(ost::MPSMultiline, toapprox::Tuple{<:MPOMultiline,<:MPSMultiline}, alg::IDMRG2, oenvs = environments(ost,toapprox))\n\nApproximate an infinite MPO-MPS state (a state obtained by applying an iMPO to an iMPS) by an iMPS with a smaller bond dimension.\n\n- The MPO-MPS state to be truncated is provided in `toapprox`, and the truncated state is initialized by the input `state`. The iMPO and iMPS can be periodic in the vertical direction (using `MPOMultiline` and `MPSMultiline`).\n- The truncation algorithm can be chosen among `VUMPS`, `IDMRG1`, `IDMRG2`.\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#lib_gs_alg","page":"Library","title":"Groundstate algorithms","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"VUMPS\nIDMRG1\nIDMRG2\nDMRG\nDMRG2\nGradientGrassmann","category":"page"},{"location":"lib/lib/#MPSKit.VUMPS","page":"Library","title":"MPSKit.VUMPS","text":"VUMPS{F} <: Algorithm\n\nVariational optimization algorithm for uniform matrix product states, as introduced in https://arxiv.org/abs/1701.07035.\n\nFields\n\ntol_galerkin::Float64: tolerance for convergence criterium\ntol_gauge::Float64: tolerance for gauging algorithm\nmaxiter::Int: maximum amount of iterations\northmaxiter::Int: maximum amount of gauging iterations\nfinalize::F: user-supplied function which is applied after each iteration, with   signature finalize(iter, Ψ, H, envs) -> Ψ, envs\nverbose::Bool: display progress information\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.IDMRG1","page":"Library","title":"MPSKit.IDMRG1","text":"IDMRG1{A} <: Algorithm\n\nSingle site infinite DMRG algorithm for finding groundstates.\n\nFields\n\ntol_galerkin::Float64: tolerance for convergence criterium\ntol_gauge::Float64: tolerance for gauging algorithm\neigalg::A: eigensolver algorithm\nmaxiter::Int: maximum number of outer iterations\nverbose::Bool: display progress information\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.IDMRG2","page":"Library","title":"MPSKit.IDMRG2","text":"IDMRG2{A} <: Algorithm\n\n2-site infinite DMRG algorithm for finding groundstates.\n\nFields\n\ntol_galerkin::Float64: tolerance for convergence criterium\ntol_gauge::Float64: tolerance for gauging algorithm\neigalg::A: eigensolver algorithm\nmaxiter::Int: maximum number of outer iterations\nverbose::Bool: display progress information\ntrscheme: truncation algorithm for [tsvd]TensorKit.tsvd\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.DMRG","page":"Library","title":"MPSKit.DMRG","text":"DMRG{A,F} <: Algorithm\n\nSingle site DMRG algorithm for finding groundstates.\n\nFields\n\ntol::Float64: tolerance for convergence criterium\neigalg::A: eigensolver algorithm\nmaxiter::Int: maximum number of outer iterations\nverbose::Bool: display progress information\nfinalize::F: user-supplied function which is applied after each iteration, with   signature finalize(iter, Ψ, H, envs) -> Ψ, envs\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.DMRG2","page":"Library","title":"MPSKit.DMRG2","text":"DMRG2{A,F} <: Algorithm\n\n2-site  DMRG algorithm for finding groundstates.\n\nFields\n\ntol::Float64: tolerance for convergence criterium\neigalg::A: eigensolver algorithm\nmaxiter::Int: maximum number of outer iterations\nverbose::Bool: display progress information\nfinalize::F: user-supplied function which is applied after each iteration, with   signature finalize(iter, Ψ, H, envs) -> Ψ, envs\ntrscheme: truncation algorithm for [tsvd]TensorKit.tsvd\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.GradientGrassmann","page":"Library","title":"MPSKit.GradientGrassmann","text":"GradientGrassmann <: Algorithm\n\nVariational gradient-based optimization algorithm that keeps the MPS in left-canonical form, as points on a Grassmann manifold. The optimization is then a Riemannian gradient descent  with a preconditioner to induce the metric from the Hilbert space inner product.\n\nFields\n\nmethod::OptimKit.OptimizationAlgorithm: algorithm to perform the gradient search\nfinalize!::Function: user-supplied function which is applied after each iteration, with   signature finalize!(x::GrassmannMPS.ManifoldPoint, f, g, numiter) -> x, f, g\n\n\n\nConstructors\n\nGradientGrassmann(; kwargs...)\n\nKeywords\n\nmethod=ConjugateGradient: instance of optimization algorithm, or type of optimization   algorithm to construct\nfinalize!: finalizer algorithm\ntol::Float64: tolerance for convergence criterium\nmaxiter::Int: maximum amount of iterations\nverbosity::Int: level of information display\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#lib_time_alg","page":"Library","title":"Time evolution algorithms","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"TDVP\nTDVP2\nTaylorCluster\nWII","category":"page"},{"location":"lib/lib/#MPSKit.TDVP","page":"Library","title":"MPSKit.TDVP","text":"TDVP{A} <: Algorithm\n\nSingle site TDVP algorithm for time evolution.\n\nFields\n\nexpalg::A: exponentiator algorithm\ntolgauge::Float64: tolerance for gauging algorithm\nmaxiter::Int: maximum amount of gauging iterations\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.TDVP2","page":"Library","title":"MPSKit.TDVP2","text":"TDVP2{A} <: Algorithm\n\n2-site TDVP algorithm for time evolution.\n\nFields\n\nexpalg::A: exponentiator algorithm\ntolgauge::Float64: tolerance for gauging algorithm\nmaxiter::Int: maximum amount of gauging iterations\ntrscheme: truncation algorithm for [tsvd]TensorKit.tsvd\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#lib_bound_alg","page":"Library","title":"Leading boundary algorithms","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"VUMPS\nGradientGrassmann","category":"page"},{"location":"lib/lib/#lib_bc_alg","page":"Library","title":"Bond change algorithms","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"OptimalExpand\nRandExpand\nVUMPSSvdCut\nSvdCut","category":"page"},{"location":"lib/lib/#MPSKit.OptimalExpand","page":"Library","title":"MPSKit.OptimalExpand","text":"expands the given mps using the algorithm given in the vumps paper\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.RandExpand","page":"Library","title":"MPSKit.RandExpand","text":"expands the bond dimension by adding random unitary vectors\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.VUMPSSvdCut","page":"Library","title":"MPSKit.VUMPSSvdCut","text":"use an idmrg2 step to truncate/expand the bond dimension\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.SvdCut","page":"Library","title":"MPSKit.SvdCut","text":"Truncate a given state using svd\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#[Excitations]","page":"Library","title":"[Excitations]","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"QuasiparticleAnsatz\nFiniteExcited","category":"page"},{"location":"lib/lib/#MPSKit.QuasiparticleAnsatz","page":"Library","title":"MPSKit.QuasiparticleAnsatz","text":"QuasiparticleAnsatz <: Algorithm\n\nOptimization algorithm for quasiparticle excitations on top of MPS groundstates, as introduced in this paper.\n\nFields\n\ntoler::Float64: tolerance for convergence criterium\nkrylovdim::Int: Krylov subspace dimension\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#MPSKit.FiniteExcited","page":"Library","title":"MPSKit.FiniteExcited","text":"FiniteExcited{A} <: Algorithm\n\nVariational optimization algorithm for excitations of finite Matrix Product States by minimizing the energy of H - λᵢ ψᵢψᵢ.\n\nFields\n\ngsalg::A: optimization algorithm.\nweight::Float64: energy penalty for previous states.\n\n\n\n\n\n","category":"type"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"EditURL = \"https://github.com/maartenvd/MPSKit.jl/examples/quantum1d/3.ising-dqpt/main.jl\"","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/#DQPT-in-the-Ising-model(@id-demo_dqpt)","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"","category":"section"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"In this tutorial we will try to reproduce the results from this paper. The needed packages are","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"using MPSKit, MPSKitModels, TensorKit\nusing TensorOperations: TensorOperations;\nTensorOperations.disable_cache(); # hide","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"Dynamical quantum phase transitions (DQPT in short) are signatures of equilibrium phase transitions in a dynamical quantity - the loschmidth echo. This quantity is given by L(t) = frac-2N ln(  psi(t)  psi(0)  ) where N is the system size. One typically starts from a groundstate and then quenches the hamiltonian to a different point. Non analycities in the loschmidth echo are called 'dynamical quantum phase transitions'.","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"In the mentioned paper they work with","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"H(g) = - sum^N-1_i=1 sigma^z_i sigma^z_i+1 + g sum_i=1^N sigma^x_i","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"and show that divergences occur when quenching across the critical point (g₀ → g₁) for t^*_n = t^*(n+frac12) with t^* = pie(g_1k^*), cos(k^*) = (1+g_0 g_1)  (g_0 + g_1), e(gk) = sqrt(g-cos k)^2 + sin^2 k.","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"The outline of the tutorial is as follows. We will pick g₀ = 05, g₁ = 20, and perform the time evolution at different system sizes and compare with the thermodynamic limit. For those g we expect non-analicities to occur at t_n  235 (n + 12).","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"First we construct the hamiltonian in mpo form, and obtain the pre-quenched groundstate:","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"H₀ = transverse_field_ising(; g=-0.5)\n\nL = 20\nψ₀ = FiniteMPS(rand, ComplexF64, L, ℂ^2, ℂ^10)\nψ₀, _ = find_groundstate(ψ₀, H₀, DMRG());","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"[ Info: Iteraton 0 error 0.06549008355303014\n[ Info: Iteraton 1 error 3.8736052080636905e-5\n[ Info: Iteraton 2 error 1.7276421455149173e-5\n[ Info: Iteraton 3 error 4.6807658588611276e-8\n[ Info: Iteraton 4 error 4.473231419129997e-11\n[ Info: Iteraton 5 error 9.43878140025498e-13\n","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/#Finite-MPS-quenching","page":"DQPT in the Ising model(@id demo_dqpt)","title":"Finite MPS quenching","text":"","category":"section"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"We can define a helper function that measures the loschmith echo","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"echo(ψ₀::FiniteMPS, ψₜ::FiniteMPS) = -2 * log(abs(dot(ψ₀, ψₜ))) / length(ψ₀)\n@assert isapprox(echo(ψ₀, ψ₀), 0, atol=1e-10)","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"We will initially use a two-site TDVP scheme to dynamically increase the bond dimension while time evolving, and later on switch to a faster one-site scheme. A single timestep can be done using","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"H₁ = transverse_field_ising(; g=-2.0)\nψₜ = deepcopy(ψ₀)\ndt = 0.01\nψₜ, envs = timestep(ψₜ, H₁, dt, TDVP2(; trscheme=truncdim(20)));","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"\"envs\" is a kind of cache object that keeps track of all environments in ψ. It is often advantageous to re-use the environment, so that mpskit doesn't need to recalculate everything.","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"Putting it all together, we get","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"function finite_sim(L; dt=0.05, finaltime=5.0)\n    ψ₀ = FiniteMPS(rand, ComplexF64, L, ℂ^2, ℂ^10)\n    ψ₀, _ = find_groundstate(ψ₀, H₀, DMRG())\n\n    ψₜ = deepcopy(ψ₀)\n    envs = environments(ψₜ, H₁)\n\n    echos = [echo(ψₜ, ψ₀)]\n    times = collect(0:dt:finaltime)\n\n    for t in times[2:end]\n        alg = t > 3 * dt ? TDVP() : TDVP2(; trscheme=truncdim(50))\n        ψₜ, envs = timestep(ψₜ, H₁, dt, alg, envs)\n        push!(echos, echo(ψₜ, ψ₀))\n    end\n\n    return times, echos\nend","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"finite_sim (generic function with 1 method)","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"(Image: )","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/#Infinite-MPS-quenching","page":"DQPT in the Ising model(@id demo_dqpt)","title":"Infinite MPS quenching","text":"","category":"section"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"Similarly we could start with an initial infinite state and find the pre-quench groundstate:","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"ψ₀ = InfiniteMPS([ℂ^2], [ℂ^10])\nψ₀, _ = find_groundstate(ψ₀, H₀, VUMPS());","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"[ Info: vumps @iteration 1 galerkin = 0.06601870321517138\n[ Info: vumps @iteration 2 galerkin = 2.2516739036323203e-5\n[ Info: vumps @iteration 3 galerkin = 3.4932735965628556e-8\n[ Info: vumps @iteration 4 galerkin = 1.1714311204809937e-9\n[ Info: vumps @iteration 5 galerkin = 9.49274778774588e-11\n[ Info: vumps @iteration 6 galerkin = 9.53461947599348e-12\n[ Info: vumps @iteration 7 galerkin = 1.0106476372085772e-12\n[ Info: vumps @iteration 8 galerkin = 1.2306829064204868e-13\n","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"The dot product of two infinite matrix product states scales as  alpha ^N where α is the dominant eigenvalue of the transfer matrix. It is this α that is returned when calling","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"dot(ψ₀, ψ₀)","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"0.9999999999999998 + 7.851374352485397e-16im","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"so the loschmidth echo takes on the pleasant form","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"echo(ψ₀::InfiniteMPS, ψₜ::InfiniteMPS) = -2 * log(abs(dot(ψ₀, ψₜ)))\n@assert isapprox(echo(ψ₀, ψ₀), 0, atol=1e-10)","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"This time we cannot use a two-site scheme to grow the bond dimension, as this isn't implemented (yet). Instead, we have to make use of the changebonds machinery. Multiple algorithms are available, but we will only focus on OptimalEpand(). Growing the bond dimension by 5 can be done by calling:","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"ψₜ = deepcopy(ψ₀)\nψₜ, envs = changebonds(ψₜ, H₁, OptimalExpand(; trscheme=truncdim(5)));","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"a single timestep is easy","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"dt = 0.01\nψₜ, envs = timestep(ψₜ, H₁, dt, TDVP(), envs);","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"With performance in mind we should once again try to re-use these \"envs\" cache objects. The final code is","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"function infinite_sim(dt=0.05, finaltime=5.0)\n    ψ₀ = InfiniteMPS([ℂ^2], [ℂ^10])\n    ψ₀, _ = find_groundstate(ψ₀, H₀, VUMPS())\n\n    ψₜ = deepcopy(ψ₀)\n    envs = environments(ψₜ, H₁)\n\n    echos = [echo(ψₜ, ψ₀)]\n    times = collect(0:dt:finaltime)\n\n    for t in times[2:end]\n        if t < 50dt # if t is sufficiently small, we increase the bond dimension\n            ψₜ, envs = changebonds(ψₜ, H₁, OptimalExpand(; trscheme=truncdim(1)), envs)\n        end\n        (ψₜ, envs) = timestep(ψₜ, H₁, dt, TDVP(), envs)\n        push!(echos, echo(ψₜ, ψ₀))\n    end\n\n    return times, echos\nend","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"infinite_sim (generic function with 3 methods)","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"(Image: )","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"","category":"page"},{"location":"examples/quantum1d/3.ising-dqpt/","page":"DQPT in the Ising model(@id demo_dqpt)","title":"DQPT in the Ising model(@id demo_dqpt)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/parallelism/#Parallelism-in-julia","page":"Parallelism in julia","title":"Parallelism in julia","text":"","category":"section"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"Julia has really great parallelism infrastructure, but there is a caveat that is relevant for all algorithms implemented in mpskit. The julia threads do not play nicely together with the BLAS threads, which are the threads used for matrix matrix multiplications (amongst other things).","category":"page"},{"location":"man/parallelism/#The-problem","page":"Parallelism in julia","title":"The problem","text":"","category":"section"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"The default behaviour is to have some BLAS threads running, which accept multiplication jobs, to which the julia threads can then submit jobs. These jobs are in turn sequentially executed over the BLAS threads. This means that if your program is waiting on a matrix multiplication to finish, it can not in parallel do other matrix multiplications!","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"The behaviour can be demonstrated using the following bit of code:","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"function parallelworker(As,Bs)\n   temp = similar.(As);\n   @sync for i in 1:length(As)\n       Threads.@spawn mul!($temp[i], $As[i],$Bs[i])\n   end\n   sum(temp);\nend\n\nfunction serialworker(As,Bs)\n    temp = similar.(As);\n    for i in 1:length(As)\n        mul!(temp[i], As[i],Bs[i])\n    end\n    sum(temp);\nend\n\nAs = [rand(1000,1000) for a in 1:50];\nBs = [rand(1000,1000) for b in 1:50];\n\n@btime parallelworker($As,$Bs);\n@btime serialworker($As,$Bs);","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"running this on my laptop with 4 julia threads and 4 BLAS threads, I see the following:","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"998.506 ms (513 allocations: 755.34 MiB)\n1.080 s (199 allocations: 755.32 MiB)","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"The julia threads give next to no speedup! Despite mpskit trying to implement parallel code, you will most likely not be able to exploit this to the fullest when running julia with the default settings.","category":"page"},{"location":"man/parallelism/#The-possible-solution","page":"Parallelism in julia","title":"The possible solution","text":"","category":"section"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"The short term 'solution' is to disable BLAS threads altogether. Multiplication jobs are then run in the julia thread that call them. Individual multiplication jobs will be slower, but they can be done in parallel.","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"using LinearAlgebra\nBLAS.set_num_threads(1);\n@btime parallelworker($As,$Bs);","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"outputs:","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"681.954 ms (514 allocations: 755.34 MiB)","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"This has some drawbacks: BLAS is also responsible for matrix factorizations, which will now run single threaded. If your program only needs to spawn 10 jobs then you will also not see any further improvement when running the code with even more julia threads, as those other threads have nothing to do. A possible solution to this is given by Strided.jl, which is internally used by TensorKit.jl and consequently also MPSKit. Strided has an option to subdivide multiplication jobs into smaller multiplication jobs distributed over julia threads. When BLAS is single threaded, those jobs will be done in parallel, and you may be able to further speed up your code! Controlling the number of threads over which strided will distribute the matrix multiplications can be done by calling:","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"Strided.enable_threaded_mul(); # enable the subdivision of jobs\nStrided.set_num_threads(N); # set the number of threads strided will use","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"In an ideal world we would have a julia implemention of BLAS, or some way to make the BLAS scheduler collaborate with the julia scheduler. Now however, the best performance can usually be achieved by experimenting with the number of julia and strided threads after disabling the BLAS threading.","category":"page"},{"location":"man/parallelism/#In-practice","page":"Parallelism in julia","title":"In practice","text":"","category":"section"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"Real world performance is dependent on the particular problem, and one typically needs to do some experimentation to get optimal settings. As an illustration I have benchmarked the time it takes to get environments of the second order time evolution operator for ising, with an mps of bond dimension 500.","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"I always took 50 samples and used the median timing. This may not be enough to do proper statistics, and there is even further randomness in the initial conditions, but it should be enough to get some kind of idea.","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"(Image: )","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"BLAS scales really well initially. The bond dimension is pretty big, which translates to fairly large blocks being multiplied. However, after a certain point, we start to see diminishing returns. Nothing is gained from further parallization.","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"If we just take the last point (14 threads) and set BLAS threading to 1, we can fully leverage julia multithreading. The only variable to play with is in how many jobs every matrix multiplication should be subdivided.","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"(Image: )","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"We clearly see that already by disabling BLAS multithreading we were able to get faster simulations, and allowing strided to further subdivide mutiplications iallows us to push the simulation even further! The optimal amount of strided jobs is very problem and architecture dependent. Below I remade the same plot at bond dimension 100. Because of the smaller bond dimension we don't benefit from having a large amount of jobs per multiplication. In fact, we are probably seeing all but numerical noise.","category":"page"},{"location":"man/parallelism/","page":"Parallelism in julia","title":"Parallelism in julia","text":"(Image: )","category":"page"},{"location":"man/environments/#um_environments","page":"Environments","title":"Environments","text":"","category":"section"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"In many tensor network algorithms we encounter partially contracted tensor networks. In dmrg for example, one needs to know the sum of all the hamiltonian contributions left and right of the site that we want to optimize. If you then optimize the neighboring site to the right, you only need to add one new contribution to the previous sum of hamiltonian contributions.","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"This kind of information is stored in the environment objects (at the moment called \"Cache\" in our code, but the name is subject to change). The goal is that the user should preferably never have to deal with the caches, but being aware of the inner workings may allow you to write more efficient code. That is why they are nonetheless included in the manual.","category":"page"},{"location":"man/environments/#Finite-Environments","page":"Environments","title":"Finite Environments","text":"","category":"section"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"When you create a state and a hamiltonian:","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"state = FiniteMPS(rand,ComplexF64,20,ℂ^2,ℂ^10);\noperator = nonsym_ising_ham();","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"an environment object can be created by calling","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"cache = environments(state,operator)","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"The partially contracted mpohamiltonian left of site i can then be queried using:","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"leftenv(cache,i,state)","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"This may take some time, but a subsequent call to","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"leftenv(cache,i-1,state)","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"Should pretty much be free. Behind the scenes the cache stored all tensors it used to calculate leftenv (state.AL[1 .. i]) and when queried again, it checks if the tensors it previously used are identical (using ===). If so, it can simply return the previously stored results. If not, it will recalculate again. If you update a tensor in-place, the caches cannot know using === that the actual tensors have changed. If you do this, you have to call poison!(state,i).","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"As an optional argument, many algorithms allow you to pass in an environment object, and they also return an updated one. Therefore, for time evolution code, it is more efficient to give it the updated caches every time step, instead of letting it recalculate.","category":"page"},{"location":"man/environments/#Infinite-Environments","page":"Environments","title":"Infinite Environments","text":"","category":"section"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"Infinite Environments are very similar :","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"state = InfiniteMPS([ℂ^2],[ℂ^10]);\noperator = nonsym_ising_ham();\ncache = environments(state,operator)","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"There are also some notable differences. Infinite environments typically require solving linear problems or eigenvalue problems iteratively with finite precision. To find out what precision we used we can type:","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"(cache.tol,cache.maxiter)","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"To recalculate with a different precision :","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"cache.tol=1e-8;\nrecalculate!(cache,state)","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"Unlike their finite counterparts, recalculating is not done automatically. To get the environment for a different state one has to recalculate explicitly!","category":"page"},{"location":"man/environments/","page":"Environments","title":"Environments","text":"different_state = InfiniteMPS([ℂ^2],[ℂ^10]);\nrecalculate!(cache,different_state)\nleftenv(cache,3,different_state)","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Quantum-(11)d","page":"Examples","title":"Quantum (1+1)d","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Pages = map(file -> joinpath(\"quantum1d\", file, \"index.md\"), readdir(\"quantum1d\"))\nDepth = 1","category":"page"},{"location":"examples/#Classical-(20)d","page":"Examples","title":"Classical (2+0)d","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Pages = map(file -> joinpath(\"classic2d\", file, \"index.md\"), readdir(\"classic2d\"))\nDepth = 1","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"EditURL = \"https://github.com/maartenvd/MPSKit.jl/examples/classic2d/1.hard-hexagon/main.jl\"","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/#demo_hardhexagon","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"","category":"section"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"(Image: logo)","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"Tensor networks are a natural way to do statistical mechanics on a lattice. As an example of this we will extract the central charge of the hard hexagon model. This model is known to have central charge 0.8, and has very peculiar non-local (anyonic) symmetries. Because TensorKit supports anyonic symmetries, so does MPSKit. To follow the tutorial you need the following packages.","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"using MPSKit, MPSKitModels, TensorKit, Plots, Polynomials\nimport TensorOperations; TensorOperations.disable_cache(); # hide","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"The hard hexagon model is a 2-dimensional lattice model of a gas, where particles are allowed to be on the vertices of a triangular lattice, but no two particles may be adjacent. This can be encoded in a transfer matrix with a local MPO tensor using anyonic symmetries, and the resulting MPO has been implemented in MPSKitModels.","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"In order to use these anyonic symmetries, we need to generalise the notion of the bond dimension and define how it interacts with the symmetry. Thus, we implement away of converting integers to symmetric spaces of the given dimension, which provides a crude guess for how the final MPS would distribute its Schmidt spectrum.","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"mpo = hard_hexagon()\nP = space(mpo.opp[1], 2)\nfunction virtual_space(D::Integer)\n    _D = round(Int, D / sum(dim, values(FibonacciAnyon)))\n    return Vect[FibonacciAnyon](sector => _D for sector in (:I, :τ))\nend\n\n@assert isapprox(dim(virtual_space(100)), 100; atol=3)","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/#The-leading-boundary","page":"The Hard Hexagon model","title":"The leading boundary","text":"","category":"section"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"One way to study statistical mechanics in infinite systems with tensor networks is by approximating the dominant eigenvector of the transfer matrix by an MPS. This dominant eigenvector contains a lot of hidden information. For example, the free energy can be extracted by computing the expectation value of the mpo. Additionally, we can compute the entanglement entropy as well as the correlation length of the state:","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"D = 10\nV = virtual_space(D)\nψ₀ = InfiniteMPS([P], [V])\nψ, envs, = leading_boundary(ψ₀, mpo, VUMPS(; verbose=false))\nF = real(first(expectation_value(ψ, mpo)))\nS = real(first(entropy(ψ)))\nξ = correlation_length(ψ)\nprintln(\"F = $F\\tS = $S\\tξ = $ξ\")","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"F = 0.883903705170386\tS = 1.2807829621983375\tξ = 13.849682582471392\n","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/#The-scaling-hypothesis","page":"The Hard Hexagon model","title":"The scaling hypothesis","text":"","category":"section"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"The dominant eigenvector is of course only an approximation. The finite bond dimension enforces a finite correlation length, which effectively introduces a length scale in the system. This can be exploited to formulate a scaling hypothesis, which in turn allows to extract the central charge.","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"First we need to know the entropy and correlation length at a bunch of different bond dimensions. Our approach will be to re-use the previous approximated dominant eigenvector, and then expanding its bond dimension and re-running VUMPS. According to the scaling hypothesis we should have S propto fracc6 log(ξ). Therefore we should find c using","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"function scaling_simulations(ψ₀, mpo, Ds; verbose=false, tol=1e-6)\n    entropies = similar(Ds, Float64)\n    correlations = similar(Ds, Float64)\n    alg = VUMPS(; verbose=verbose, tol_galerkin=tol)\n\n    ψ, envs, = leading_boundary(ψ₀, mpo, alg)\n    entropies[1] = real(entropy(ψ)[1])\n    correlations[1] = correlation_length(ψ)\n\n    for (i, d) in enumerate(diff(Ds))\n        ψ, envs = changebonds(ψ, mpo, OptimalExpand(; trscheme=truncdim(d)), envs)\n        ψ, envs, = leading_boundary(ψ, mpo, alg, envs)\n        entropies[i+1] = real(entropy(ψ)[1])\n        correlations[i+1] = correlation_length(ψ)\n    end\n    return entropies, correlations\nend\n\n\nbond_dimensions = 10:5:25\nψ₀ = InfiniteMPS([P], [virtual_space(bond_dimensions[1])])\nSs, ξs = scaling_simulations(ψ₀, mpo, bond_dimensions)\n\nf = fit(log.(ξs), 6 * Ss, 1)\nc = f.coeffs[2]","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"0.8025228820464224","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"p = plot(; xlabel=\"logarithmic correlation length\", ylabel=\"entanglement entropy\")\np = plot(log.(ξs), Ss; seriestype=:scatter, label=nothing)\nplot!(p, ξ -> f(ξ) / 6; label=\"fit\")","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip220\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip221\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M184.191 1486.45 L2352.76 1486.45 L2352.76 47.2441 L184.191 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip222\">\n    <rect x=\"184\" y=\"47\" width=\"2170\" height=\"1440\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"401.779,1486.45 401.779,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"722.585,1486.45 722.585,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1043.39,1486.45 1043.39,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1364.2,1486.45 1364.2,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1685,1486.45 1685,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2005.81,1486.45 2005.81,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2326.62,1486.45 2326.62,47.2441 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"184.191,1486.45 2352.76,1486.45 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"401.779,1486.45 401.779,1467.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"722.585,1486.45 722.585,1467.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1043.39,1486.45 1043.39,1467.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1364.2,1486.45 1364.2,1467.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1685,1486.45 1685,1467.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2005.81,1486.45 2005.81,1467.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2326.62,1486.45 2326.62,1467.55 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M358.435 1544.91 L374.754 1544.91 L374.754 1548.85 L352.81 1548.85 L352.81 1544.91 Q355.472 1542.16 360.055 1537.53 Q364.661 1532.88 365.842 1531.53 Q368.087 1529.01 368.967 1527.27 Q369.87 1525.51 369.87 1523.82 Q369.87 1521.07 367.925 1519.33 Q366.004 1517.6 362.902 1517.6 Q360.703 1517.6 358.249 1518.36 Q355.819 1519.13 353.041 1520.68 L353.041 1515.95 Q355.865 1514.82 358.319 1514.24 Q360.773 1513.66 362.81 1513.66 Q368.18 1513.66 371.374 1516.35 Q374.569 1519.03 374.569 1523.52 Q374.569 1525.65 373.759 1527.57 Q372.972 1529.47 370.865 1532.07 Q370.286 1532.74 367.185 1535.95 Q364.083 1539.15 358.435 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M384.569 1542.97 L389.453 1542.97 L389.453 1548.85 L384.569 1548.85 L384.569 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M398.458 1514.29 L420.68 1514.29 L420.68 1516.28 L408.133 1548.85 L403.249 1548.85 L415.055 1518.22 L398.458 1518.22 L398.458 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M429.846 1514.29 L448.203 1514.29 L448.203 1518.22 L434.129 1518.22 L434.129 1526.7 Q435.147 1526.35 436.166 1526.19 Q437.184 1526 438.203 1526 Q443.99 1526 447.369 1529.17 Q450.749 1532.34 450.749 1537.76 Q450.749 1543.34 447.277 1546.44 Q443.805 1549.52 437.485 1549.52 Q435.309 1549.52 433.041 1549.15 Q430.795 1548.78 428.388 1548.04 L428.388 1543.34 Q430.471 1544.47 432.693 1545.03 Q434.916 1545.58 437.393 1545.58 Q441.397 1545.58 443.735 1543.48 Q446.073 1541.37 446.073 1537.76 Q446.073 1534.15 443.735 1532.04 Q441.397 1529.94 437.393 1529.94 Q435.518 1529.94 433.643 1530.35 Q431.791 1530.77 429.846 1531.65 L429.846 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M688.812 1530.21 Q692.169 1530.93 694.044 1533.2 Q695.942 1535.47 695.942 1538.8 Q695.942 1543.92 692.423 1546.72 Q688.905 1549.52 682.424 1549.52 Q680.248 1549.52 677.933 1549.08 Q675.641 1548.66 673.187 1547.81 L673.187 1543.29 Q675.132 1544.43 677.447 1545.01 Q679.762 1545.58 682.285 1545.58 Q686.683 1545.58 688.974 1543.85 Q691.289 1542.11 691.289 1538.8 Q691.289 1535.75 689.136 1534.03 Q687.007 1532.3 683.187 1532.3 L679.16 1532.3 L679.16 1528.45 L683.373 1528.45 Q686.822 1528.45 688.65 1527.09 Q690.479 1525.7 690.479 1523.11 Q690.479 1520.45 688.581 1519.03 Q686.706 1517.6 683.187 1517.6 Q681.266 1517.6 679.067 1518.01 Q676.868 1518.43 674.229 1519.31 L674.229 1515.14 Q676.891 1514.4 679.206 1514.03 Q681.544 1513.66 683.604 1513.66 Q688.928 1513.66 692.03 1516.09 Q695.132 1518.5 695.132 1522.62 Q695.132 1525.49 693.488 1527.48 Q691.845 1529.45 688.812 1530.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M704.808 1542.97 L709.692 1542.97 L709.692 1548.85 L704.808 1548.85 L704.808 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M729.877 1517.37 Q726.266 1517.37 724.437 1520.93 Q722.632 1524.47 722.632 1531.6 Q722.632 1538.71 724.437 1542.27 Q726.266 1545.82 729.877 1545.82 Q733.511 1545.82 735.317 1542.27 Q737.145 1538.71 737.145 1531.6 Q737.145 1524.47 735.317 1520.93 Q733.511 1517.37 729.877 1517.37 M729.877 1513.66 Q735.687 1513.66 738.743 1518.27 Q741.821 1522.85 741.821 1531.6 Q741.821 1540.33 738.743 1544.94 Q735.687 1549.52 729.877 1549.52 Q724.067 1549.52 720.988 1544.94 Q717.933 1540.33 717.933 1531.6 Q717.933 1522.85 720.988 1518.27 Q724.067 1513.66 729.877 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M760.039 1517.37 Q756.428 1517.37 754.599 1520.93 Q752.794 1524.47 752.794 1531.6 Q752.794 1538.71 754.599 1542.27 Q756.428 1545.82 760.039 1545.82 Q763.673 1545.82 765.479 1542.27 Q767.307 1538.71 767.307 1531.6 Q767.307 1524.47 765.479 1520.93 Q763.673 1517.37 760.039 1517.37 M760.039 1513.66 Q765.849 1513.66 768.905 1518.27 Q771.983 1522.85 771.983 1531.6 Q771.983 1540.33 768.905 1544.94 Q765.849 1549.52 760.039 1549.52 Q754.229 1549.52 751.15 1544.94 Q748.094 1540.33 748.094 1531.6 Q748.094 1522.85 751.15 1518.27 Q754.229 1513.66 760.039 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1010.12 1530.21 Q1013.47 1530.93 1015.35 1533.2 Q1017.25 1535.47 1017.25 1538.8 Q1017.25 1543.92 1013.73 1546.72 Q1010.21 1549.52 1003.73 1549.52 Q1001.55 1549.52 999.237 1549.08 Q996.945 1548.66 994.491 1547.81 L994.491 1543.29 Q996.436 1544.43 998.75 1545.01 Q1001.07 1545.58 1003.59 1545.58 Q1007.99 1545.58 1010.28 1543.85 Q1012.59 1542.11 1012.59 1538.8 Q1012.59 1535.75 1010.44 1534.03 Q1008.31 1532.3 1004.49 1532.3 L1000.46 1532.3 L1000.46 1528.45 L1004.68 1528.45 Q1008.13 1528.45 1009.95 1527.09 Q1011.78 1525.7 1011.78 1523.11 Q1011.78 1520.45 1009.88 1519.03 Q1008.01 1517.6 1004.49 1517.6 Q1002.57 1517.6 1000.37 1518.01 Q998.172 1518.43 995.533 1519.31 L995.533 1515.14 Q998.195 1514.4 1000.51 1514.03 Q1002.85 1513.66 1004.91 1513.66 Q1010.23 1513.66 1013.33 1516.09 Q1016.44 1518.5 1016.44 1522.62 Q1016.44 1525.49 1014.79 1527.48 Q1013.15 1529.45 1010.12 1530.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1026.11 1542.97 L1031 1542.97 L1031 1548.85 L1026.11 1548.85 L1026.11 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1045.21 1544.91 L1061.53 1544.91 L1061.53 1548.85 L1039.58 1548.85 L1039.58 1544.91 Q1042.25 1542.16 1046.83 1537.53 Q1051.44 1532.88 1052.62 1531.53 Q1054.86 1529.01 1055.74 1527.27 Q1056.64 1525.51 1056.64 1523.82 Q1056.64 1521.07 1054.7 1519.33 Q1052.78 1517.6 1049.68 1517.6 Q1047.48 1517.6 1045.02 1518.36 Q1042.59 1519.13 1039.82 1520.68 L1039.82 1515.95 Q1042.64 1514.82 1045.09 1514.24 Q1047.55 1513.66 1049.58 1513.66 Q1054.95 1513.66 1058.15 1516.35 Q1061.34 1519.03 1061.34 1523.52 Q1061.34 1525.65 1060.53 1527.57 Q1059.75 1529.47 1057.64 1532.07 Q1057.06 1532.74 1053.96 1535.95 Q1050.86 1539.15 1045.21 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1071.39 1514.29 L1089.75 1514.29 L1089.75 1518.22 L1075.67 1518.22 L1075.67 1526.7 Q1076.69 1526.35 1077.71 1526.19 Q1078.73 1526 1079.75 1526 Q1085.53 1526 1088.91 1529.17 Q1092.29 1532.34 1092.29 1537.76 Q1092.29 1543.34 1088.82 1546.44 Q1085.35 1549.52 1079.03 1549.52 Q1076.85 1549.52 1074.58 1549.15 Q1072.34 1548.78 1069.93 1548.04 L1069.93 1543.34 Q1072.01 1544.47 1074.24 1545.03 Q1076.46 1545.58 1078.94 1545.58 Q1082.94 1545.58 1085.28 1543.48 Q1087.62 1541.37 1087.62 1537.76 Q1087.62 1534.15 1085.28 1532.04 Q1082.94 1529.94 1078.94 1529.94 Q1077.06 1529.94 1075.19 1530.35 Q1073.33 1530.77 1071.39 1531.65 L1071.39 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1330.42 1530.21 Q1333.78 1530.93 1335.66 1533.2 Q1337.55 1535.47 1337.55 1538.8 Q1337.55 1543.92 1334.04 1546.72 Q1330.52 1549.52 1324.04 1549.52 Q1321.86 1549.52 1319.54 1549.08 Q1317.25 1548.66 1314.8 1547.81 L1314.8 1543.29 Q1316.74 1544.43 1319.06 1545.01 Q1321.37 1545.58 1323.9 1545.58 Q1328.29 1545.58 1330.59 1543.85 Q1332.9 1542.11 1332.9 1538.8 Q1332.9 1535.75 1330.75 1534.03 Q1328.62 1532.3 1324.8 1532.3 L1320.77 1532.3 L1320.77 1528.45 L1324.98 1528.45 Q1328.43 1528.45 1330.26 1527.09 Q1332.09 1525.7 1332.09 1523.11 Q1332.09 1520.45 1330.19 1519.03 Q1328.32 1517.6 1324.8 1517.6 Q1322.88 1517.6 1320.68 1518.01 Q1318.48 1518.43 1315.84 1519.31 L1315.84 1515.14 Q1318.5 1514.4 1320.82 1514.03 Q1323.16 1513.66 1325.22 1513.66 Q1330.54 1513.66 1333.64 1516.09 Q1336.74 1518.5 1336.74 1522.62 Q1336.74 1525.49 1335.1 1527.48 Q1333.46 1529.45 1330.42 1530.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1346.42 1542.97 L1351.3 1542.97 L1351.3 1548.85 L1346.42 1548.85 L1346.42 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1361.54 1514.29 L1379.89 1514.29 L1379.89 1518.22 L1365.82 1518.22 L1365.82 1526.7 Q1366.84 1526.35 1367.85 1526.19 Q1368.87 1526 1369.89 1526 Q1375.68 1526 1379.06 1529.17 Q1382.44 1532.34 1382.44 1537.76 Q1382.44 1543.34 1378.97 1546.44 Q1375.49 1549.52 1369.17 1549.52 Q1367 1549.52 1364.73 1549.15 Q1362.48 1548.78 1360.08 1548.04 L1360.08 1543.34 Q1362.16 1544.47 1364.38 1545.03 Q1366.6 1545.58 1369.08 1545.58 Q1373.09 1545.58 1375.42 1543.48 Q1377.76 1541.37 1377.76 1537.76 Q1377.76 1534.15 1375.42 1532.04 Q1373.09 1529.94 1369.08 1529.94 Q1367.21 1529.94 1365.33 1530.35 Q1363.48 1530.77 1361.54 1531.65 L1361.54 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1401.65 1517.37 Q1398.04 1517.37 1396.21 1520.93 Q1394.41 1524.47 1394.41 1531.6 Q1394.41 1538.71 1396.21 1542.27 Q1398.04 1545.82 1401.65 1545.82 Q1405.29 1545.82 1407.09 1542.27 Q1408.92 1538.71 1408.92 1531.6 Q1408.92 1524.47 1407.09 1520.93 Q1405.29 1517.37 1401.65 1517.37 M1401.65 1513.66 Q1407.46 1513.66 1410.52 1518.27 Q1413.6 1522.85 1413.6 1531.6 Q1413.6 1540.33 1410.52 1544.94 Q1407.46 1549.52 1401.65 1549.52 Q1395.84 1549.52 1392.76 1544.94 Q1389.71 1540.33 1389.71 1531.6 Q1389.71 1522.85 1392.76 1518.27 Q1395.84 1513.66 1401.65 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1651.73 1530.21 Q1655.08 1530.93 1656.96 1533.2 Q1658.86 1535.47 1658.86 1538.8 Q1658.86 1543.92 1655.34 1546.72 Q1651.82 1549.52 1645.34 1549.52 Q1643.16 1549.52 1640.85 1549.08 Q1638.56 1548.66 1636.1 1547.81 L1636.1 1543.29 Q1638.05 1544.43 1640.36 1545.01 Q1642.68 1545.58 1645.2 1545.58 Q1649.6 1545.58 1651.89 1543.85 Q1654.21 1542.11 1654.21 1538.8 Q1654.21 1535.75 1652.05 1534.03 Q1649.92 1532.3 1646.1 1532.3 L1642.08 1532.3 L1642.08 1528.45 L1646.29 1528.45 Q1649.74 1528.45 1651.57 1527.09 Q1653.39 1525.7 1653.39 1523.11 Q1653.39 1520.45 1651.5 1519.03 Q1649.62 1517.6 1646.1 1517.6 Q1644.18 1517.6 1641.98 1518.01 Q1639.78 1518.43 1637.15 1519.31 L1637.15 1515.14 Q1639.81 1514.4 1642.12 1514.03 Q1644.46 1513.66 1646.52 1513.66 Q1651.84 1513.66 1654.95 1516.09 Q1658.05 1518.5 1658.05 1522.62 Q1658.05 1525.49 1656.4 1527.48 Q1654.76 1529.45 1651.73 1530.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1667.72 1542.97 L1672.61 1542.97 L1672.61 1548.85 L1667.72 1548.85 L1667.72 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1681.61 1514.29 L1703.83 1514.29 L1703.83 1516.28 L1691.29 1548.85 L1686.4 1548.85 L1698.21 1518.22 L1681.61 1518.22 L1681.61 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1713 1514.29 L1731.36 1514.29 L1731.36 1518.22 L1717.28 1518.22 L1717.28 1526.7 Q1718.3 1526.35 1719.32 1526.19 Q1720.34 1526 1721.36 1526 Q1727.14 1526 1730.52 1529.17 Q1733.9 1532.34 1733.9 1537.76 Q1733.9 1543.34 1730.43 1546.44 Q1726.96 1549.52 1720.64 1549.52 Q1718.46 1549.52 1716.2 1549.15 Q1713.95 1548.78 1711.54 1548.04 L1711.54 1543.34 Q1713.63 1544.47 1715.85 1545.03 Q1718.07 1545.58 1720.55 1545.58 Q1724.55 1545.58 1726.89 1543.48 Q1729.23 1541.37 1729.23 1537.76 Q1729.23 1534.15 1726.89 1532.04 Q1724.55 1529.94 1720.55 1529.94 Q1718.67 1529.94 1716.8 1530.35 Q1714.95 1530.77 1713 1531.65 L1713 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1971.37 1518.36 L1959.56 1536.81 L1971.37 1536.81 L1971.37 1518.36 M1970.14 1514.29 L1976.02 1514.29 L1976.02 1536.81 L1980.95 1536.81 L1980.95 1540.7 L1976.02 1540.7 L1976.02 1548.85 L1971.37 1548.85 L1971.37 1540.7 L1955.76 1540.7 L1955.76 1536.19 L1970.14 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1988.68 1542.97 L1993.56 1542.97 L1993.56 1548.85 L1988.68 1548.85 L1988.68 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2013.75 1517.37 Q2010.14 1517.37 2008.31 1520.93 Q2006.5 1524.47 2006.5 1531.6 Q2006.5 1538.71 2008.31 1542.27 Q2010.14 1545.82 2013.75 1545.82 Q2017.38 1545.82 2019.19 1542.27 Q2021.02 1538.71 2021.02 1531.6 Q2021.02 1524.47 2019.19 1520.93 Q2017.38 1517.37 2013.75 1517.37 M2013.75 1513.66 Q2019.56 1513.66 2022.62 1518.27 Q2025.69 1522.85 2025.69 1531.6 Q2025.69 1540.33 2022.62 1544.94 Q2019.56 1549.52 2013.75 1549.52 Q2007.94 1549.52 2004.86 1544.94 Q2001.8 1540.33 2001.8 1531.6 Q2001.8 1522.85 2004.86 1518.27 Q2007.94 1513.66 2013.75 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2043.91 1517.37 Q2040.3 1517.37 2038.47 1520.93 Q2036.67 1524.47 2036.67 1531.6 Q2036.67 1538.71 2038.47 1542.27 Q2040.3 1545.82 2043.91 1545.82 Q2047.55 1545.82 2049.35 1542.27 Q2051.18 1538.71 2051.18 1531.6 Q2051.18 1524.47 2049.35 1520.93 Q2047.55 1517.37 2043.91 1517.37 M2043.91 1513.66 Q2049.72 1513.66 2052.78 1518.27 Q2055.86 1522.85 2055.86 1531.6 Q2055.86 1540.33 2052.78 1544.94 Q2049.72 1549.52 2043.91 1549.52 Q2038.1 1549.52 2035.02 1544.94 Q2031.97 1540.33 2031.97 1531.6 Q2031.97 1522.85 2035.02 1518.27 Q2038.1 1513.66 2043.91 1513.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2292.67 1518.36 L2280.86 1536.81 L2292.67 1536.81 L2292.67 1518.36 M2291.44 1514.29 L2297.32 1514.29 L2297.32 1536.81 L2302.25 1536.81 L2302.25 1540.7 L2297.32 1540.7 L2297.32 1548.85 L2292.67 1548.85 L2292.67 1540.7 L2277.07 1540.7 L2277.07 1536.19 L2291.44 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2309.98 1542.97 L2314.87 1542.97 L2314.87 1548.85 L2309.98 1548.85 L2309.98 1542.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2329.08 1544.91 L2345.4 1544.91 L2345.4 1548.85 L2323.46 1548.85 L2323.46 1544.91 Q2326.12 1542.16 2330.7 1537.53 Q2335.31 1532.88 2336.49 1531.53 Q2338.73 1529.01 2339.61 1527.27 Q2340.52 1525.51 2340.52 1523.82 Q2340.52 1521.07 2338.57 1519.33 Q2336.65 1517.6 2333.55 1517.6 Q2331.35 1517.6 2328.9 1518.36 Q2326.47 1519.13 2323.69 1520.68 L2323.69 1515.95 Q2326.51 1514.82 2328.97 1514.24 Q2331.42 1513.66 2333.46 1513.66 Q2338.83 1513.66 2342.02 1516.35 Q2345.22 1519.03 2345.22 1523.52 Q2345.22 1525.65 2344.4 1527.57 Q2343.62 1529.47 2341.51 1532.07 Q2340.93 1532.74 2337.83 1535.95 Q2334.73 1539.15 2329.08 1544.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2355.26 1514.29 L2373.62 1514.29 L2373.62 1518.22 L2359.54 1518.22 L2359.54 1526.7 Q2360.56 1526.35 2361.58 1526.19 Q2362.6 1526 2363.62 1526 Q2369.4 1526 2372.78 1529.17 Q2376.16 1532.34 2376.16 1537.76 Q2376.16 1543.34 2372.69 1546.44 Q2369.22 1549.52 2362.9 1549.52 Q2360.72 1549.52 2358.46 1549.15 Q2356.21 1548.78 2353.8 1548.04 L2353.8 1543.34 Q2355.89 1544.47 2358.11 1545.03 Q2360.33 1545.58 2362.81 1545.58 Q2366.81 1545.58 2369.15 1543.48 Q2371.49 1541.37 2371.49 1537.76 Q2371.49 1534.15 2369.15 1532.04 Q2366.81 1529.94 2362.81 1529.94 Q2360.93 1529.94 2359.06 1530.35 Q2357.21 1530.77 2355.26 1531.65 L2355.26 1514.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"184.191,1324 2352.76,1324 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"184.191,1007.32 2352.76,1007.32 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"184.191,690.642 2352.76,690.642 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"184.191,373.96 2352.76,373.96 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"184.191,57.2787 2352.76,57.2787 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"184.191,1486.45 184.191,47.2441 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"184.191,1324 203.088,1324 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"184.191,1007.32 203.088,1007.32 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"184.191,690.642 203.088,690.642 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"184.191,373.96 203.088,373.96 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"184.191,57.2787 203.088,57.2787 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M51.6634 1337.35 L59.3023 1337.35 L59.3023 1310.98 L50.9921 1312.65 L50.9921 1308.39 L59.256 1306.72 L63.9319 1306.72 L63.9319 1337.35 L71.5707 1337.35 L71.5707 1341.28 L51.6634 1341.28 L51.6634 1337.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M81.0151 1335.4 L85.8993 1335.4 L85.8993 1341.28 L81.0151 1341.28 L81.0151 1335.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M110.251 1322.65 Q113.608 1323.37 115.483 1325.64 Q117.381 1327.91 117.381 1331.24 Q117.381 1336.35 113.862 1339.15 Q110.344 1341.96 103.862 1341.96 Q101.686 1341.96 99.3715 1341.52 Q97.0798 1341.1 94.6262 1340.24 L94.6262 1335.73 Q96.5706 1336.86 98.8854 1337.44 Q101.2 1338.02 103.723 1338.02 Q108.121 1338.02 110.413 1336.28 Q112.728 1334.55 112.728 1331.24 Q112.728 1328.18 110.575 1326.47 Q108.446 1324.73 104.626 1324.73 L100.598 1324.73 L100.598 1320.89 L104.811 1320.89 Q108.26 1320.89 110.089 1319.53 Q111.918 1318.14 111.918 1315.54 Q111.918 1312.88 110.02 1311.47 Q108.145 1310.03 104.626 1310.03 Q102.705 1310.03 100.506 1310.45 Q98.3067 1310.87 95.6678 1311.75 L95.6678 1307.58 Q98.3298 1306.84 100.645 1306.47 Q102.983 1306.1 105.043 1306.1 Q110.367 1306.1 113.469 1308.53 Q116.57 1310.94 116.57 1315.06 Q116.57 1317.93 114.927 1319.92 Q113.283 1321.89 110.251 1322.65 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M136.246 1309.8 Q132.635 1309.8 130.807 1313.37 Q129.001 1316.91 129.001 1324.04 Q129.001 1331.15 130.807 1334.71 Q132.635 1338.25 136.246 1338.25 Q139.881 1338.25 141.686 1334.71 Q143.515 1331.15 143.515 1324.04 Q143.515 1316.91 141.686 1313.37 Q139.881 1309.8 136.246 1309.8 M136.246 1306.1 Q142.056 1306.1 145.112 1310.71 Q148.191 1315.29 148.191 1324.04 Q148.191 1332.77 145.112 1337.37 Q142.056 1341.96 136.246 1341.96 Q130.436 1341.96 127.357 1337.37 Q124.302 1332.77 124.302 1324.04 Q124.302 1315.29 127.357 1310.71 Q130.436 1306.1 136.246 1306.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M52.6588 1020.67 L60.2976 1020.67 L60.2976 994.302 L51.9875 995.969 L51.9875 991.71 L60.2513 990.043 L64.9272 990.043 L64.9272 1020.67 L72.5661 1020.67 L72.5661 1024.6 L52.6588 1024.6 L52.6588 1020.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M82.0105 1018.72 L86.8947 1018.72 L86.8947 1024.6 L82.0105 1024.6 L82.0105 1018.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M111.246 1005.97 Q114.603 1006.69 116.478 1008.96 Q118.376 1011.22 118.376 1014.56 Q118.376 1019.67 114.858 1022.47 Q111.339 1025.27 104.858 1025.27 Q102.682 1025.27 100.367 1024.83 Q98.0752 1024.42 95.6215 1023.56 L95.6215 1019.05 Q97.566 1020.18 99.8808 1020.76 Q102.196 1021.34 104.719 1021.34 Q109.117 1021.34 111.408 1019.6 Q113.723 1017.87 113.723 1014.56 Q113.723 1011.5 111.571 1009.79 Q109.441 1008.05 105.621 1008.05 L101.594 1008.05 L101.594 1004.21 L105.807 1004.21 Q109.256 1004.21 111.084 1002.84 Q112.913 1001.46 112.913 998.863 Q112.913 996.2 111.015 994.788 Q109.14 993.353 105.621 993.353 Q103.7 993.353 101.501 993.77 Q99.3021 994.187 96.6632 995.066 L96.6632 990.9 Q99.3252 990.159 101.64 989.788 Q103.978 989.418 106.038 989.418 Q111.362 989.418 114.464 991.849 Q117.566 994.256 117.566 998.376 Q117.566 1001.25 115.922 1003.24 Q114.279 1005.21 111.246 1005.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M127.288 990.043 L145.644 990.043 L145.644 993.978 L131.57 993.978 L131.57 1002.45 Q132.589 1002.1 133.607 1001.94 Q134.626 1001.76 135.644 1001.76 Q141.431 1001.76 144.811 1004.93 Q148.191 1008.1 148.191 1013.52 Q148.191 1019.09 144.718 1022.2 Q141.246 1025.27 134.927 1025.27 Q132.751 1025.27 130.482 1024.9 Q128.237 1024.53 125.83 1023.79 L125.83 1019.09 Q127.913 1020.23 130.135 1020.78 Q132.357 1021.34 134.834 1021.34 Q138.839 1021.34 141.177 1019.23 Q143.515 1017.13 143.515 1013.52 Q143.515 1009.9 141.177 1007.8 Q138.839 1005.69 134.834 1005.69 Q132.959 1005.69 131.084 1006.11 Q129.232 1006.52 127.288 1007.4 L127.288 990.043 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M51.6634 703.986 L59.3023 703.986 L59.3023 677.621 L50.9921 679.288 L50.9921 675.028 L59.256 673.362 L63.9319 673.362 L63.9319 703.986 L71.5707 703.986 L71.5707 707.922 L51.6634 707.922 L51.6634 703.986 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M81.0151 702.042 L85.8993 702.042 L85.8993 707.922 L81.0151 707.922 L81.0151 702.042 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M108.932 677.436 L97.1261 695.885 L108.932 695.885 L108.932 677.436 M107.705 673.362 L113.584 673.362 L113.584 695.885 L118.515 695.885 L118.515 699.774 L113.584 699.774 L113.584 707.922 L108.932 707.922 L108.932 699.774 L93.3299 699.774 L93.3299 695.26 L107.705 673.362 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M136.246 676.44 Q132.635 676.44 130.807 680.005 Q129.001 683.547 129.001 690.676 Q129.001 697.783 130.807 701.348 Q132.635 704.889 136.246 704.889 Q139.881 704.889 141.686 701.348 Q143.515 697.783 143.515 690.676 Q143.515 683.547 141.686 680.005 Q139.881 676.44 136.246 676.44 M136.246 672.737 Q142.056 672.737 145.112 677.343 Q148.191 681.926 148.191 690.676 Q148.191 699.403 145.112 704.01 Q142.056 708.593 136.246 708.593 Q130.436 708.593 127.357 704.01 Q124.302 699.403 124.302 690.676 Q124.302 681.926 127.357 677.343 Q130.436 672.737 136.246 672.737 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M52.6588 387.305 L60.2976 387.305 L60.2976 360.939 L51.9875 362.606 L51.9875 358.347 L60.2513 356.68 L64.9272 356.68 L64.9272 387.305 L72.5661 387.305 L72.5661 391.24 L52.6588 391.24 L52.6588 387.305 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M82.0105 385.361 L86.8947 385.361 L86.8947 391.24 L82.0105 391.24 L82.0105 385.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M109.927 360.754 L98.1215 379.203 L109.927 379.203 L109.927 360.754 M108.7 356.68 L114.58 356.68 L114.58 379.203 L119.51 379.203 L119.51 383.092 L114.58 383.092 L114.58 391.24 L109.927 391.24 L109.927 383.092 L94.3252 383.092 L94.3252 378.578 L108.7 356.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M127.288 356.68 L145.644 356.68 L145.644 360.615 L131.57 360.615 L131.57 369.087 Q132.589 368.74 133.607 368.578 Q134.626 368.393 135.644 368.393 Q141.431 368.393 144.811 371.564 Q148.191 374.736 148.191 380.152 Q148.191 385.731 144.718 388.833 Q141.246 391.911 134.927 391.911 Q132.751 391.911 130.482 391.541 Q128.237 391.171 125.83 390.43 L125.83 385.731 Q127.913 386.865 130.135 387.421 Q132.357 387.976 134.834 387.976 Q138.839 387.976 141.177 385.87 Q143.515 383.763 143.515 380.152 Q143.515 376.541 141.177 374.435 Q138.839 372.328 134.834 372.328 Q132.959 372.328 131.084 372.745 Q129.232 373.162 127.288 374.041 L127.288 356.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M51.6634 70.6235 L59.3023 70.6235 L59.3023 44.2579 L50.9921 45.9246 L50.9921 41.6653 L59.256 39.9987 L63.9319 39.9987 L63.9319 70.6235 L71.5707 70.6235 L71.5707 74.5587 L51.6634 74.5587 L51.6634 70.6235 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M81.0151 68.6791 L85.8993 68.6791 L85.8993 74.5587 L81.0151 74.5587 L81.0151 68.6791 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M96.1308 39.9987 L114.487 39.9987 L114.487 43.9338 L100.413 43.9338 L100.413 52.406 Q101.432 52.0588 102.45 51.8967 Q103.469 51.7116 104.487 51.7116 Q110.274 51.7116 113.654 54.8828 Q117.033 58.0541 117.033 63.4708 Q117.033 69.0494 113.561 72.1513 Q110.089 75.23 103.77 75.23 Q101.594 75.23 99.3252 74.8596 Q97.0798 74.4892 94.6724 73.7485 L94.6724 69.0494 Q96.7558 70.1837 98.978 70.7392 Q101.2 71.2948 103.677 71.2948 Q107.682 71.2948 110.02 69.1883 Q112.358 67.0819 112.358 63.4708 Q112.358 59.8597 110.02 57.7532 Q107.682 55.6467 103.677 55.6467 Q101.802 55.6467 99.927 56.0634 Q98.0752 56.4801 96.1308 57.3597 L96.1308 39.9987 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M136.246 43.0774 Q132.635 43.0774 130.807 46.6421 Q129.001 50.1838 129.001 57.3134 Q129.001 64.4198 130.807 67.9846 Q132.635 71.5263 136.246 71.5263 Q139.881 71.5263 141.686 67.9846 Q143.515 64.4198 143.515 57.3134 Q143.515 50.1838 141.686 46.6421 Q139.881 43.0774 136.246 43.0774 M136.246 39.3737 Q142.056 39.3737 145.112 43.9801 Q148.191 48.5634 148.191 57.3134 Q148.191 66.0402 145.112 70.6466 Q142.056 75.23 136.246 75.23 Q130.436 75.23 127.357 70.6466 Q124.302 66.0402 124.302 57.3134 Q124.302 48.5634 127.357 43.9801 Q130.436 39.3737 136.246 39.3737 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip222)\" cx=\"245.565\" cy=\"1445.72\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip222)\" cx=\"1413.65\" cy=\"665.086\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip222)\" cx=\"1820.78\" cy=\"421.125\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip222)\" cx=\"2291.38\" cy=\"87.9763\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"245.565,1445.39 258.885,1436.59 382.041,1355.29 456.054,1306.43 518.63,1265.12 586.605,1220.24 649.273,1178.87 716.459,1134.52 794.3,1083.13 863.477,1037.46 924.138,997.411 990.276,953.75 1056.81,909.828 1130.36,861.267 1200.35,815.063 1273.12,767.021 1334.38,726.58 1409.17,677.207 1477.68,631.977 1540.96,590.204 1605.06,547.889 1676.89,500.466 1741.98,457.494 1816.51,408.293 1885.52,362.737 1953.55,317.824 2019.6,274.218 2087.32,229.516 2161.5,180.54 2269.27,109.393 2291.38,94.7975 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M256.476 198.898 L519.559 198.898 L519.559 95.2176 L256.476 95.2176  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"256.476,198.898 519.559,198.898 519.559,95.2176 256.476,95.2176 256.476,198.898 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"280.571,147.058 425.142,147.058 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M465.742 128.319 L465.742 131.861 L461.668 131.861 Q459.376 131.861 458.474 132.787 Q457.594 133.713 457.594 136.12 L457.594 138.412 L464.608 138.412 L464.608 141.722 L457.594 141.722 L457.594 164.338 L453.312 164.338 L453.312 141.722 L449.238 141.722 L449.238 138.412 L453.312 138.412 L453.312 136.606 Q453.312 132.278 455.325 130.31 Q457.339 128.319 461.714 128.319 L465.742 128.319 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M469.307 138.412 L473.566 138.412 L473.566 164.338 L469.307 164.338 L469.307 138.412 M469.307 128.319 L473.566 128.319 L473.566 133.713 L469.307 133.713 L469.307 128.319 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M486.691 131.051 L486.691 138.412 L495.464 138.412 L495.464 141.722 L486.691 141.722 L486.691 155.796 Q486.691 158.967 487.548 159.87 Q488.427 160.773 491.089 160.773 L495.464 160.773 L495.464 164.338 L491.089 164.338 Q486.159 164.338 484.284 162.509 Q482.409 160.657 482.409 155.796 L482.409 141.722 L479.284 141.722 L479.284 138.412 L482.409 138.412 L482.409 131.051 L486.691 131.051 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"","category":"page"},{"location":"examples/classic2d/1.hard-hexagon/","page":"The Hard Hexagon model","title":"The Hard Hexagon model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/states/#um_states","page":"States","title":"States","text":"","category":"section"},{"location":"man/states/#FiniteMPS","page":"States","title":"FiniteMPS","text":"","category":"section"},{"location":"man/states/","page":"States","title":"States","text":"A FiniteMPS is - at its core - a chain of mps tensors.","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"(Image: )","category":"page"},{"location":"man/states/#Usage","page":"States","title":"Usage","text":"","category":"section"},{"location":"man/states/","page":"States","title":"States","text":"A FiniteMPS can be created by passing in a vector of tensormaps:","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"data = fill(TensorMap(rand,ComplexF64,ℂ^1*ℂ^2,ℂ^1),10);\nFiniteMPS(data);","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"Or alternatively by","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"len = 10;\nmax_bond_dimension = ℂ^10;\nphysical_space = ℂ^2;\nFiniteMPS(rand,ComplexF64,len,physical_space,max_bond_dimension);","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"You can take dot products, renormalize!, expectation values,....","category":"page"},{"location":"man/states/#Gauging","page":"States","title":"Gauging","text":"","category":"section"},{"location":"man/states/","page":"States","title":"States","text":"There is residual gauge freedom in such a finite mps :","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"(Image: )","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"which is often exploited in mps algorithms. The gauging logic is handled behind the scenes, if you call","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"state.AL[3]","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"then the state will be gauged such that the third tensor is a left isometry (similarly for state.AR).","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"state.AC[3]","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"gauges the state in such a way that all tensors to the left are left isometries, and to the right will be right isometries.As a result you should have","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"norm(state) == norm(state.AC[3])","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"lastly there is also the CR field, with the following property:","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"@tensor a[-1 -2;-3] := state.AL[3][-1 -2;1]*state.CR[3][1;-3]\n@tensor b[-1 -2;-3] := state.CR[2][-1;1]*state.AR[3][1 -2;-3]\na ≈ state.AC[3];\nb ≈ state.AC[3];","category":"page"},{"location":"man/states/#Implementation-details","page":"States","title":"Implementation details","text":"","category":"section"},{"location":"man/states/","page":"States","title":"States","text":"Behind the scenes, a finite mps has 4 fields","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"ALs::Vector{Union{Missing,A}}\nARs::Vector{Union{Missing,A}}\nACs::Vector{Union{Missing,A}}\nCLs::Vector{Union{Missing,B}}","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"calling state.AC returns an \"orthoview\" instance, which is a very simple dummy object. When you call get/setindex on an orthoview, it will move the gauge for the underlying state, and return the result. The idea behind this construction is that one never has to worry about how the state is gauged, as this gets handled automagically.","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"The following bit of code shows the logic in action:","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"state = FiniteMPS(10,ℂ^2,ℂ^10); # a random initial state\n@show ismissing.(state.ALs) # all AL fields are already calculated\n@show ismissing.(state.ARs) # all AR fields are missing\n\n#if we now query state.AC[2], it should calculate and store all AR fields left of position 2\nstate.AC[2];\n@show ismissing.(state.ARs)","category":"page"},{"location":"man/states/#InfiniteMPS","page":"States","title":"InfiniteMPS","text":"","category":"section"},{"location":"man/states/","page":"States","title":"States","text":"An infinite mps can be thought of as a finite mps, where the set of tensors is repeated periodically.","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"It can be created by passing in a vector of tensormaps:","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"data = fill(TensorMap(rand,ComplexF64,ℂ^10*ℂ^2,ℂ^10),2);\nInfiniteMPS(data);","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"The above code would create an infinite mps with an A-B structure (a 2 site unit cell).","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"much like a finite mps, we can again query the fields state.AL, state.AR, state.AC and state.CR. The implementation is much easier, as they are now just plain fields in the struct","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"AL::PeriodicArray{A,1}\nAR::PeriodicArray{A,1}\nCR::PeriodicArray{B,1}\nAC::PeriodicArray{A,1}","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"The periodic array is an array-like type where all indices are repeated periodically.","category":"page"},{"location":"man/states/#WindowMPS","page":"States","title":"WindowMPS","text":"","category":"section"},{"location":"man/states/","page":"States","title":"States","text":"WindowMPS is a bit of a mix between an infinite mps and a finite mps. It represents a window of mutable tensors embedded in an infinite mps.","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"It can be created using:","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"mpco = WindowMPS(left_infinite_mps,window_of_tensors,right_infinite_mps)","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"Algorithms will then act on this window of tensors, while leaving the left and right infinite mps's invariant.","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"Behind the scenes it uses the same orthoview logic as finitemps.","category":"page"},{"location":"man/states/#Multiline","page":"States","title":"Multiline","text":"","category":"section"},{"location":"man/states/","page":"States","title":"States","text":"Statistical physics partition functions can be represented by an infinite tensor network which then needs to be contracted. This is done by finding approximate fixpoint infinite matrix product states. However, there is no good reason why a single mps should suffice and indeed we find in practice that this can require a nontrivial unit cell in both dimensions.","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"In other words, the fixpoints can be well described by a set of matrix product states.","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"Such a set can be created by","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"data = fill(TensorMap(rand,ComplexF64,ℂ^10*ℂ^2,ℂ^10),2,2);\nMPSMultiline(data);","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"MPSMultiline is also used extensively in as of yet unreleased peps code.","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"You can access properties by calling","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"state.AL[row,collumn]\nstate.AC[row,collumn]\nstate.AR[row,collumn]\nstate.CR[row,collumn]","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"Behind the scenes, we have a type called Multiline, defined as:","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"struct Multiline{T}\n    data::PeriodicArray{T,1}\nend","category":"page"},{"location":"man/states/","page":"States","title":"States","text":"MPSMultiline/MPOMultiline are then defined as ```julia const MPSMultiline = Multiline{<:InfiniteMPS} const MPOMultiline = Multiline{<:DenseMPO}","category":"page"},{"location":"man/intro/#Prerequisites","page":"Prerequisites","title":"Prerequisites","text":"","category":"section"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"The following sections describe the prerequisites for using MPSKit. If you are already familiar with the concepts of MPSKit and TensorKit, you can skip to the Overview section.","category":"page"},{"location":"man/intro/#TensorKit","page":"Prerequisites","title":"TensorKit","text":"","category":"section"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"using TensorKit","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"MPSKit uses the tensors defined in TensorKit.jl as its underlying data structure. This is what allows the library to be generic with respect to the symmetry of the tensors. The main difference with regular multi-dimensional arrays is the notion of a partition of the dimensions in incoming and outgoing, which are respectively called domain and codomain. In other words, a TensorMap can be interpreted as a linear map from its domain to its codomain. Additionally, as generic symmetries are supported, in general the structure of the indices are not just integers, but are given by spaces.","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"The general syntax for creating a tensor is one of the following equivalent forms:","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"TensorMap(initializer, scalartype, codomain, domain)\nTensorMap(initializer, scalartype, codomain ← domain) # ← is the `\\leftarrow` operator","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"For example, the following creates a random tensor with three legs, each of which has dimension two, however with different partitions.","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"V1 = ℂ^2 # ℂ is the `\\bbC` operator, equivalent to ComplexSpace(10)\nt1 = Tensor(rand, Float64, V1 ⊗ V1 ⊗ V1) # all spaces in codomain\nt2 = TensorMap(rand, Float64, V1, V1 ⊗ V1) # one space in codomain, two in domain\n\ntry\n    t1 + t2 # incompatible partition\ncatch err\n    println(err)\nend\n\ntry\n    t1 + permute(t2, (1, 2, 3), ()) # incompatible arrows\ncatch err\n    println(err)\nend","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"These abstract objects can represent not only plain arrays but also symmetric tensors. The following creates a symmetric tensor with ℤ₂ symmetry, again with three legs of dimension two. However, now the dimension two is now split over even and odd sectors of ℤ₂.","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"V2 = Z2Space(0 => 1, 1 => 1)\nt3 = TensorMap(rand, Float64, V2 ⊗ V2, V2)","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"For more information, check out the TensorKit documentation!","category":"page"},{"location":"man/intro/#Conventions","page":"Prerequisites","title":"Conventions","text":"","category":"section"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"The general definition of an MPS tensor is as follows:","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"(Image: convention MPSTensor)","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"These tensors are allowed to have an arbitrary number of physical legs, and both FiniteMPS as well as InfiniteMPS will be able to handle the resulting objects. This allows for example for the definition of boundary tensors in PEPS code, which have two physical legs.","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"Similarly, the definition of a bond tensor, appearing in between two MPS tensors, is as follows:","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"(Image: convention BondTensor)","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"Finally, the definition of a MPO tensor, which is used to represent statistical mechanics problems as well as quantum hamiltonians, is represented as:","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"(Image: convention MPOTensor)","category":"page"},{"location":"man/intro/","page":"Prerequisites","title":"Prerequisites","text":"While this results at first glance in the not very intuitive ordering of spaces as V_l otimes P leftarrow P otimes V_r, this is actually the most natural ordering for keeping the algorithms planar. In particular, this is relevant for dealing with fermionic systems, where additional crossings would lead to sign problems.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"EditURL = \"https://github.com/maartenvd/MPSKit.jl/examples/quantum1d/4.xxz-heisenberg/main.jl\"","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/#The-XXZ-model","page":"The XXZ model","title":"The XXZ model","text":"","category":"section"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"In this file we will give step by step instructions on how to analyze the spin 1/2 XXZ model. The necessary packages to follow this tutorial are:","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"using MPSKit, MPSKitModels, TensorKit, Plots\nimport TensorOperations; TensorOperations.disable_cache(); # hide","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/#Failure","page":"The XXZ model","title":"Failure","text":"","category":"section"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"First we should define the hamiltonian we want to work with. Then we specify an initial guess, which we then further optimize. Working directly in the thermodynamic limit, this is achieved as follows:","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"H = heisenberg_XXX(; spin=1//2);","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"We then need an intial state, which we shall later optimize. In this example we work directly in the thermodynamic limit.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"random_data = TensorMap(rand, ComplexF64, ℂ^20 * ℂ^2, ℂ^20);\nstate = InfiniteMPS([random_data]);","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"The groundstate can then be found by calling find_groundstate.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"groundstate, cache, delta = find_groundstate(state, H, VUMPS());","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"[ Info: vumps @iteration 1 galerkin = 0.0019242263942779228\n[ Info: vumps @iteration 2 galerkin = 0.5067408588166973\n[ Info: vumps @iteration 3 galerkin = 0.5474972759534885\n[ Info: vumps @iteration 4 galerkin = 0.4168154015411327\n[ Info: vumps @iteration 5 galerkin = 0.4806893124927422\n[ Info: vumps @iteration 6 galerkin = 0.581849808090621\n[ Info: vumps @iteration 7 galerkin = 0.4629065039439779\n[ Info: vumps @iteration 8 galerkin = 0.5357623441824556\n[ Info: vumps @iteration 9 galerkin = 0.621157091706479\n[ Info: vumps @iteration 10 galerkin = 0.47106200621980143\n[ Info: vumps @iteration 11 galerkin = 0.5088153680821039\n[ Info: vumps @iteration 12 galerkin = 0.5738407270229899\n[ Info: vumps @iteration 13 galerkin = 0.5338972456645936\n[ Info: vumps @iteration 14 galerkin = 0.46538664026783766\n[ Info: vumps @iteration 15 galerkin = 0.5440680638307281\n[ Info: vumps @iteration 16 galerkin = 0.43664605051192157\n[ Info: vumps @iteration 17 galerkin = 0.44872729654452964\n[ Info: vumps @iteration 18 galerkin = 0.560666581968847\n[ Info: vumps @iteration 19 galerkin = 0.40516717311961686\n[ Info: vumps @iteration 20 galerkin = 0.4344568164411861\n[ Info: vumps @iteration 21 galerkin = 0.4746888593385685\n[ Info: vumps @iteration 22 galerkin = 0.454325637132033\n[ Info: vumps @iteration 23 galerkin = 0.45663946762746405\n[ Info: vumps @iteration 24 galerkin = 0.44678438312899066\n[ Info: vumps @iteration 25 galerkin = 0.519279346766618\n[ Info: vumps @iteration 26 galerkin = 0.4741741271215243\n[ Info: vumps @iteration 27 galerkin = 0.6346658975680737\n[ Info: vumps @iteration 28 galerkin = 0.5488227304972035\n[ Info: vumps @iteration 29 galerkin = 0.48718109181985414\n[ Info: vumps @iteration 30 galerkin = 0.42106606686320575\n[ Info: vumps @iteration 31 galerkin = 0.4916043811743643\n[ Info: vumps @iteration 32 galerkin = 0.47282866401630097\n[ Info: vumps @iteration 33 galerkin = 0.41323715336460665\n[ Info: vumps @iteration 34 galerkin = 0.523555714183004\n[ Info: vumps @iteration 35 galerkin = 0.4634575464919588\n[ Info: vumps @iteration 36 galerkin = 0.41612706437218766\n[ Info: vumps @iteration 37 galerkin = 0.5540109038424794\n[ Info: vumps @iteration 38 galerkin = 0.4870005216688081\n[ Info: vumps @iteration 39 galerkin = 0.4189422149322912\n[ Info: vumps @iteration 40 galerkin = 0.32011796266631437\n[ Info: vumps @iteration 41 galerkin = 0.34741566657561407\n[ Info: vumps @iteration 42 galerkin = 0.5646493177482353\n[ Info: vumps @iteration 43 galerkin = 0.5551031905049472\n[ Info: vumps @iteration 44 galerkin = 0.5070948102817086\n[ Info: vumps @iteration 45 galerkin = 0.4797861812514866\n[ Info: vumps @iteration 46 galerkin = 0.49834550554002255\n[ Info: vumps @iteration 47 galerkin = 0.5930542084415547\n[ Info: vumps @iteration 48 galerkin = 0.4754198543444197\n[ Info: vumps @iteration 49 galerkin = 0.41777692435301345\n[ Info: vumps @iteration 50 galerkin = 0.5090230593612637\n[ Info: vumps @iteration 51 galerkin = 0.5550718125714121\n[ Info: vumps @iteration 52 galerkin = 0.51549084198176\n[ Info: vumps @iteration 53 galerkin = 0.5909627471437727\n[ Info: vumps @iteration 54 galerkin = 0.3955611770984787\n[ Info: vumps @iteration 55 galerkin = 0.23872379725266638\n[ Info: vumps @iteration 56 galerkin = 0.39046712938831485\n[ Info: vumps @iteration 57 galerkin = 0.459915679596779\n[ Info: vumps @iteration 58 galerkin = 0.4579779170412874\n[ Info: vumps @iteration 59 galerkin = 0.43040630841660293\n[ Info: vumps @iteration 60 galerkin = 0.5111383749627532\n[ Info: vumps @iteration 61 galerkin = 0.5476595214667267\n[ Info: vumps @iteration 62 galerkin = 0.4068939862957921\n[ Info: vumps @iteration 63 galerkin = 0.28134856834864236\n[ Info: vumps @iteration 64 galerkin = 0.5161588403489049\n[ Info: vumps @iteration 65 galerkin = 0.6258917364786235\n[ Info: vumps @iteration 66 galerkin = 0.5665186736820358\n[ Info: vumps @iteration 67 galerkin = 0.4890232677251687\n[ Info: vumps @iteration 68 galerkin = 0.47998319188425204\n[ Info: vumps @iteration 69 galerkin = 0.5243729491394613\n[ Info: vumps @iteration 70 galerkin = 0.25756795354318657\n[ Info: vumps @iteration 71 galerkin = 0.5009644474658383\n[ Info: vumps @iteration 72 galerkin = 0.5695635747050043\n[ Info: vumps @iteration 73 galerkin = 0.5239053090221844\n[ Info: vumps @iteration 74 galerkin = 0.4007689121201031\n[ Info: vumps @iteration 75 galerkin = 0.4981839423126167\n[ Info: vumps @iteration 76 galerkin = 0.5483014123187407\n[ Info: vumps @iteration 77 galerkin = 0.5643096582419224\n[ Info: vumps @iteration 78 galerkin = 0.5497348778472185\n[ Info: vumps @iteration 79 galerkin = 0.5802458428449252\n[ Info: vumps @iteration 80 galerkin = 0.508357308852087\n[ Info: vumps @iteration 81 galerkin = 0.5069715865339941\n[ Info: vumps @iteration 82 galerkin = 0.5391717740650553\n[ Info: vumps @iteration 83 galerkin = 0.5064339702727855\n[ Info: vumps @iteration 84 galerkin = 0.5295881240360713\n[ Info: vumps @iteration 85 galerkin = 0.5123642367111289\n[ Info: vumps @iteration 86 galerkin = 0.48314535660787217\n[ Info: vumps @iteration 87 galerkin = 0.354731077934103\n[ Info: vumps @iteration 88 galerkin = 0.47668228966147763\n[ Info: vumps @iteration 89 galerkin = 0.5791799213636952\n[ Info: vumps @iteration 90 galerkin = 0.5578566881086952\n[ Info: vumps @iteration 91 galerkin = 0.6407042924739444\n[ Info: vumps @iteration 92 galerkin = 0.533444142639943\n[ Info: vumps @iteration 93 galerkin = 0.49484427573093387\n[ Info: vumps @iteration 94 galerkin = 0.523533421178115\n[ Info: vumps @iteration 95 galerkin = 0.41048138655493355\n[ Info: vumps @iteration 96 galerkin = 0.5300882532694351\n[ Info: vumps @iteration 97 galerkin = 0.459560575317228\n[ Info: vumps @iteration 98 galerkin = 0.5540344299371909\n[ Info: vumps @iteration 99 galerkin = 0.39420641359095077\n[ Info: vumps @iteration 100 galerkin = 0.5007324793885246\n┌ Warning: vumps didn't converge 0.5007324793885246\n└ @ MPSKit ~/projects/MPSKit.jl/src/algorithms/groundstate/vumps.jl:69\n","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"As you can see, VUMPS struggles to converge. On it's own, that is already quite curious. Maybe we can do better using another algorithm, such as gradient descent.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"groundstate, cache, delta = find_groundstate(state, H, GradientGrassmann(maxiter=20));","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"[ Info: CG: initializing with f = 0.249998045291, ‖∇f‖ = 2.7213e-03\n[ Info: CG: iter    1: f = 0.027983869055, ‖∇f‖ = 4.9854e-01, α = 4.53e+06, β = 0.00e+00, nfg = 15\n[ Info: CG: iter    2: f = -0.007248790849, ‖∇f‖ = 5.6340e-01, α = 1.70e+03, β = 5.46e+04, nfg = 6\n[ Info: CG: iter    3: f = -0.009065888038, ‖∇f‖ = 5.3992e-01, α = 1.70e+03, β = 8.95e-01, nfg = 14\n┌ Warning: resorting to η\n└ @ OptimKit ~/.julia/packages/OptimKit/xpmbV/src/cg.jl:139\n[ Info: CG: iter    4: f = -0.113399422496, ‖∇f‖ = 5.9410e-01, α = 1.64e+00, β = 1.33e-04, nfg = 13\n[ Info: CG: iter    5: f = -0.163354320004, ‖∇f‖ = 6.2182e-01, α = 1.56e+00, β = 3.55e-01, nfg = 3\n[ Info: CG: iter    6: f = -0.185885945737, ‖∇f‖ = 6.5958e-01, α = 1.53e+00, β = 2.95e-01, nfg = 3\n[ Info: CG: iter    7: f = -0.324574949511, ‖∇f‖ = 5.2427e-01, α = 8.68e-01, β = 2.35e-01, nfg = 3\n[ Info: CG: iter    8: f = -0.360508886098, ‖∇f‖ = 4.8227e-01, α = 9.15e-01, β = 2.92e-01, nfg = 2\n[ Info: CG: iter    9: f = -0.416239990466, ‖∇f‖ = 2.4436e-01, α = 4.88e-01, β = 1.22e-01, nfg = 3\n[ Info: CG: iter   10: f = -0.428092734623, ‖∇f‖ = 1.6497e-01, α = 3.33e-01, β = 2.48e-01, nfg = 2\n[ Info: CG: iter   11: f = -0.433514580822, ‖∇f‖ = 1.2579e-01, α = 2.74e-01, β = 3.22e-01, nfg = 2\n[ Info: CG: iter   12: f = -0.436203941069, ‖∇f‖ = 1.0199e-01, α = 2.03e-01, β = 4.42e-01, nfg = 2\n[ Info: CG: iter   13: f = -0.438441798247, ‖∇f‖ = 7.7849e-02, α = 3.00e-01, β = 3.58e-01, nfg = 2\n[ Info: CG: iter   14: f = -0.440123669198, ‖∇f‖ = 5.4230e-02, α = 4.41e-01, β = 2.67e-01, nfg = 2\n[ Info: CG: iter   15: f = -0.440752043066, ‖∇f‖ = 4.4439e-02, α = 2.43e-01, β = 3.95e-01, nfg = 2\n[ Info: CG: iter   16: f = -0.441068862280, ‖∇f‖ = 3.9089e-02, α = 1.15e-01, β = 8.18e-01, nfg = 2\n[ Info: CG: iter   17: f = -0.441381839812, ‖∇f‖ = 3.6473e-02, α = 2.32e-01, β = 4.16e-01, nfg = 3\n[ Info: CG: iter   18: f = -0.441746553345, ‖∇f‖ = 3.1605e-02, α = 4.37e-01, β = 2.63e-01, nfg = 2\n[ Info: CG: iter   19: f = -0.442016272848, ‖∇f‖ = 2.4861e-02, α = 3.32e-01, β = 4.30e-01, nfg = 2\n┌ Warning: CG: not converged to requested tol: f = -0.442115096391, ‖∇f‖ = 2.3694e-02\n└ @ OptimKit ~/.julia/packages/OptimKit/xpmbV/src/cg.jl:103\n","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"Convergence is quite slow and even fails after sufficiently many iterations. To understand why, we can look at the transfer matrix spectrum.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"transferplot(groundstate, groundstate)","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip430\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip431\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip432\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"166.42,1505.26 166.42,47.2441 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"520.196,1505.26 520.196,47.2441 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"873.972,1505.26 873.972,47.2441 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1227.75,1505.26 1227.75,47.2441 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1581.52,1505.26 1581.52,47.2441 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1935.3,1505.26 1935.3,47.2441 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2289.08,1505.26 2289.08,47.2441 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,1505.26 166.42,1486.36 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"520.196,1505.26 520.196,1486.36 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"873.972,1505.26 873.972,1486.36 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1227.75,1505.26 1227.75,1486.36 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1581.52,1505.26 1581.52,1486.36 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1935.3,1505.26 1935.3,1486.36 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2289.08,1505.26 2289.08,1486.36 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M120.182 1536.18 Q116.571 1536.18 114.742 1539.74 Q112.936 1543.28 112.936 1550.41 Q112.936 1557.52 114.742 1561.09 Q116.571 1564.63 120.182 1564.63 Q123.816 1564.63 125.621 1561.09 Q127.45 1557.52 127.45 1550.41 Q127.45 1543.28 125.621 1539.74 Q123.816 1536.18 120.182 1536.18 M120.182 1532.47 Q125.992 1532.47 129.047 1537.08 Q132.126 1541.66 132.126 1550.41 Q132.126 1559.14 129.047 1563.75 Q125.992 1568.33 120.182 1568.33 Q114.372 1568.33 111.293 1563.75 Q108.237 1559.14 108.237 1550.41 Q108.237 1541.66 111.293 1537.08 Q114.372 1532.47 120.182 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M147.311 1533.1 L151.246 1533.1 L139.209 1572.06 L135.274 1572.06 L147.311 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M163.283 1533.1 L167.218 1533.1 L155.181 1572.06 L151.246 1572.06 L163.283 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M173.098 1563.72 L180.737 1563.72 L180.737 1537.36 L172.427 1539.03 L172.427 1534.77 L180.691 1533.1 L185.367 1533.1 L185.367 1563.72 L193.005 1563.72 L193.005 1567.66 L173.098 1567.66 L173.098 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M199.093 1541.73 L223.931 1541.73 L223.931 1545.99 L220.667 1545.99 L220.667 1561.92 Q220.667 1563.59 221.223 1564.33 Q221.801 1565.04 223.075 1565.04 Q223.422 1565.04 223.931 1565 Q224.44 1564.93 224.602 1564.91 L224.602 1567.98 Q223.792 1568.28 222.936 1568.42 Q222.079 1568.56 221.223 1568.56 Q218.445 1568.56 217.38 1567.06 Q216.315 1565.53 216.315 1561.46 L216.315 1545.99 L206.755 1545.99 L206.755 1567.66 L202.403 1567.66 L202.403 1545.99 L199.093 1545.99 L199.093 1541.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M463.726 1563.72 L471.365 1563.72 L471.365 1537.36 L463.055 1539.03 L463.055 1534.77 L471.319 1533.1 L475.995 1533.1 L475.995 1563.72 L483.634 1563.72 L483.634 1567.66 L463.726 1567.66 L463.726 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M500.046 1533.1 L503.981 1533.1 L491.944 1572.06 L488.009 1572.06 L500.046 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M516.018 1533.1 L519.953 1533.1 L507.916 1572.06 L503.981 1572.06 L516.018 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M539.189 1549.03 Q542.545 1549.74 544.42 1552.01 Q546.318 1554.28 546.318 1557.61 Q546.318 1562.73 542.8 1565.53 Q539.281 1568.33 532.8 1568.33 Q530.624 1568.33 528.309 1567.89 Q526.018 1567.47 523.564 1566.62 L523.564 1562.1 Q525.508 1563.24 527.823 1563.82 Q530.138 1564.4 532.661 1564.4 Q537.059 1564.4 539.351 1562.66 Q541.666 1560.92 541.666 1557.61 Q541.666 1554.56 539.513 1552.85 Q537.383 1551.11 533.564 1551.11 L529.536 1551.11 L529.536 1547.27 L533.749 1547.27 Q537.198 1547.27 539.027 1545.9 Q540.856 1544.51 540.856 1541.92 Q540.856 1539.26 538.957 1537.85 Q537.082 1536.41 533.564 1536.41 Q531.643 1536.41 529.444 1536.83 Q527.244 1537.24 524.606 1538.12 L524.606 1533.96 Q527.268 1533.22 529.582 1532.85 Q531.92 1532.47 533.981 1532.47 Q539.305 1532.47 542.406 1534.91 Q545.508 1537.31 545.508 1541.43 Q545.508 1544.3 543.865 1546.29 Q542.221 1548.26 539.189 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M551.828 1541.73 L576.666 1541.73 L576.666 1545.99 L573.402 1545.99 L573.402 1561.92 Q573.402 1563.59 573.957 1564.33 Q574.536 1565.04 575.809 1565.04 Q576.156 1565.04 576.666 1565 Q577.175 1564.93 577.337 1564.91 L577.337 1567.98 Q576.527 1568.28 575.67 1568.42 Q574.814 1568.56 573.957 1568.56 Q571.179 1568.56 570.115 1567.06 Q569.05 1565.53 569.05 1561.46 L569.05 1545.99 L559.49 1545.99 L559.49 1567.66 L555.138 1567.66 L555.138 1545.99 L551.828 1545.99 L551.828 1541.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M821.588 1563.72 L837.907 1563.72 L837.907 1567.66 L815.963 1567.66 L815.963 1563.72 Q818.625 1560.97 823.208 1556.34 Q827.815 1551.69 828.995 1550.35 Q831.241 1547.82 832.12 1546.09 Q833.023 1544.33 833.023 1542.64 Q833.023 1539.88 831.079 1538.15 Q829.157 1536.41 826.056 1536.41 Q823.856 1536.41 821.403 1537.17 Q818.972 1537.94 816.195 1539.49 L816.195 1534.77 Q819.019 1533.63 821.472 1533.05 Q823.926 1532.47 825.963 1532.47 Q831.333 1532.47 834.528 1535.16 Q837.722 1537.85 837.722 1542.34 Q837.722 1544.47 836.912 1546.39 Q836.125 1548.28 834.018 1550.88 Q833.44 1551.55 830.338 1554.77 Q827.236 1557.96 821.588 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M854.69 1533.1 L858.625 1533.1 L846.588 1572.06 L842.653 1572.06 L854.69 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M870.662 1533.1 L874.597 1533.1 L862.56 1572.06 L858.625 1572.06 L870.662 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M893.833 1549.03 Q897.189 1549.74 899.064 1552.01 Q900.963 1554.28 900.963 1557.61 Q900.963 1562.73 897.444 1565.53 Q893.926 1568.33 887.444 1568.33 Q885.268 1568.33 882.953 1567.89 Q880.662 1567.47 878.208 1566.62 L878.208 1562.1 Q880.152 1563.24 882.467 1563.82 Q884.782 1564.4 887.305 1564.4 Q891.703 1564.4 893.995 1562.66 Q896.31 1560.92 896.31 1557.61 Q896.31 1554.56 894.157 1552.85 Q892.027 1551.11 888.208 1551.11 L884.18 1551.11 L884.18 1547.27 L888.393 1547.27 Q891.842 1547.27 893.671 1545.9 Q895.5 1544.51 895.5 1541.92 Q895.5 1539.26 893.601 1537.85 Q891.727 1536.41 888.208 1536.41 Q886.287 1536.41 884.088 1536.83 Q881.889 1537.24 879.25 1538.12 L879.25 1533.96 Q881.912 1533.22 884.227 1532.85 Q886.564 1532.47 888.625 1532.47 Q893.949 1532.47 897.051 1534.91 Q900.152 1537.31 900.152 1541.43 Q900.152 1544.3 898.509 1546.29 Q896.865 1548.26 893.833 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M906.472 1541.73 L931.31 1541.73 L931.31 1545.99 L928.046 1545.99 L928.046 1561.92 Q928.046 1563.59 928.601 1564.33 Q929.18 1565.04 930.453 1565.04 Q930.8 1565.04 931.31 1565 Q931.819 1564.93 931.981 1564.91 L931.981 1567.98 Q931.171 1568.28 930.314 1568.42 Q929.458 1568.56 928.601 1568.56 Q925.824 1568.56 924.759 1567.06 Q923.694 1565.53 923.694 1561.46 L923.694 1545.99 L914.134 1545.99 L914.134 1567.66 L909.782 1567.66 L909.782 1545.99 L906.472 1545.99 L906.472 1541.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1171.28 1563.72 L1178.92 1563.72 L1178.92 1537.36 L1170.61 1539.03 L1170.61 1534.77 L1178.87 1533.1 L1183.55 1533.1 L1183.55 1563.72 L1191.19 1563.72 L1191.19 1567.66 L1171.28 1567.66 L1171.28 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1207.6 1533.1 L1211.53 1533.1 L1199.5 1572.06 L1195.56 1572.06 L1207.6 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1223.57 1533.1 L1227.5 1533.1 L1215.47 1572.06 L1211.53 1572.06 L1223.57 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1233.38 1563.72 L1241.02 1563.72 L1241.02 1537.36 L1232.71 1539.03 L1232.71 1534.77 L1240.98 1533.1 L1245.65 1533.1 L1245.65 1563.72 L1253.29 1563.72 L1253.29 1567.66 L1233.38 1567.66 L1233.38 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1259.38 1541.73 L1284.22 1541.73 L1284.22 1545.99 L1280.95 1545.99 L1280.95 1561.92 Q1280.95 1563.59 1281.51 1564.33 Q1282.09 1565.04 1283.36 1565.04 Q1283.71 1565.04 1284.22 1565 Q1284.73 1564.93 1284.89 1564.91 L1284.89 1567.98 Q1284.08 1568.28 1283.22 1568.42 Q1282.37 1568.56 1281.51 1568.56 Q1278.73 1568.56 1277.67 1567.06 Q1276.6 1565.53 1276.6 1561.46 L1276.6 1545.99 L1267.04 1545.99 L1267.04 1567.66 L1262.69 1567.66 L1262.69 1545.99 L1259.38 1545.99 L1259.38 1541.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1538.54 1537.17 L1526.73 1555.62 L1538.54 1555.62 L1538.54 1537.17 M1537.31 1533.1 L1543.19 1533.1 L1543.19 1555.62 L1548.12 1555.62 L1548.12 1559.51 L1543.19 1559.51 L1543.19 1567.66 L1538.54 1567.66 L1538.54 1559.51 L1522.94 1559.51 L1522.94 1555 L1537.31 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1562.82 1533.1 L1566.76 1533.1 L1554.72 1572.06 L1550.78 1572.06 L1562.82 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1578.79 1533.1 L1582.73 1533.1 L1570.69 1572.06 L1566.76 1572.06 L1578.79 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1601.96 1549.03 Q1605.32 1549.74 1607.2 1552.01 Q1609.09 1554.28 1609.09 1557.61 Q1609.09 1562.73 1605.57 1565.53 Q1602.06 1568.33 1595.57 1568.33 Q1593.4 1568.33 1591.08 1567.89 Q1588.79 1567.47 1586.34 1566.62 L1586.34 1562.1 Q1588.28 1563.24 1590.6 1563.82 Q1592.91 1564.4 1595.44 1564.4 Q1599.83 1564.4 1602.13 1562.66 Q1604.44 1560.92 1604.44 1557.61 Q1604.44 1554.56 1602.29 1552.85 Q1600.16 1551.11 1596.34 1551.11 L1592.31 1551.11 L1592.31 1547.27 L1596.52 1547.27 Q1599.97 1547.27 1601.8 1545.9 Q1603.63 1544.51 1603.63 1541.92 Q1603.63 1539.26 1601.73 1537.85 Q1599.86 1536.41 1596.34 1536.41 Q1594.42 1536.41 1592.22 1536.83 Q1590.02 1537.24 1587.38 1538.12 L1587.38 1533.96 Q1590.04 1533.22 1592.36 1532.85 Q1594.7 1532.47 1596.76 1532.47 Q1602.08 1532.47 1605.18 1534.91 Q1608.28 1537.31 1608.28 1541.43 Q1608.28 1544.3 1606.64 1546.29 Q1605 1548.26 1601.96 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1614.6 1541.73 L1639.44 1541.73 L1639.44 1545.99 L1636.18 1545.99 L1636.18 1561.92 Q1636.18 1563.59 1636.73 1564.33 Q1637.31 1565.04 1638.58 1565.04 Q1638.93 1565.04 1639.44 1565 Q1639.95 1564.93 1640.11 1564.91 L1640.11 1567.98 Q1639.3 1568.28 1638.45 1568.42 Q1637.59 1568.56 1636.73 1568.56 Q1633.95 1568.56 1632.89 1567.06 Q1631.82 1565.53 1631.82 1561.46 L1631.82 1545.99 L1622.26 1545.99 L1622.26 1567.66 L1617.91 1567.66 L1617.91 1545.99 L1614.6 1545.99 L1614.6 1541.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1878.84 1533.1 L1897.2 1533.1 L1897.2 1537.04 L1883.12 1537.04 L1883.12 1545.51 Q1884.14 1545.16 1885.16 1545 Q1886.18 1544.81 1887.2 1544.81 Q1892.99 1544.81 1896.37 1547.98 Q1899.74 1551.16 1899.74 1556.57 Q1899.74 1562.15 1896.27 1565.25 Q1892.8 1568.33 1886.48 1568.33 Q1884.31 1568.33 1882.04 1567.96 Q1879.79 1567.59 1877.38 1566.85 L1877.38 1562.15 Q1879.47 1563.28 1881.69 1563.84 Q1883.91 1564.4 1886.39 1564.4 Q1890.39 1564.4 1892.73 1562.29 Q1895.07 1560.18 1895.07 1556.57 Q1895.07 1552.96 1892.73 1550.85 Q1890.39 1548.75 1886.39 1548.75 Q1884.51 1548.75 1882.64 1549.16 Q1880.79 1549.58 1878.84 1550.46 L1878.84 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1915.93 1533.1 L1919.86 1533.1 L1907.82 1572.06 L1903.89 1572.06 L1915.93 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1931.9 1533.1 L1935.83 1533.1 L1923.8 1572.06 L1919.86 1572.06 L1931.9 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1955.07 1549.03 Q1958.43 1549.74 1960.3 1552.01 Q1962.2 1554.28 1962.2 1557.61 Q1962.2 1562.73 1958.68 1565.53 Q1955.16 1568.33 1948.68 1568.33 Q1946.5 1568.33 1944.19 1567.89 Q1941.9 1567.47 1939.44 1566.62 L1939.44 1562.1 Q1941.39 1563.24 1943.7 1563.82 Q1946.02 1564.4 1948.54 1564.4 Q1952.94 1564.4 1955.23 1562.66 Q1957.55 1560.92 1957.55 1557.61 Q1957.55 1554.56 1955.39 1552.85 Q1953.26 1551.11 1949.44 1551.11 L1945.42 1551.11 L1945.42 1547.27 L1949.63 1547.27 Q1953.08 1547.27 1954.91 1545.9 Q1956.74 1544.51 1956.74 1541.92 Q1956.74 1539.26 1954.84 1537.85 Q1952.96 1536.41 1949.44 1536.41 Q1947.52 1536.41 1945.32 1536.83 Q1943.12 1537.24 1940.49 1538.12 L1940.49 1533.96 Q1943.15 1533.22 1945.46 1532.85 Q1947.8 1532.47 1949.86 1532.47 Q1955.18 1532.47 1958.29 1534.91 Q1961.39 1537.31 1961.39 1541.43 Q1961.39 1544.3 1959.74 1546.29 Q1958.1 1548.26 1955.07 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1967.71 1541.73 L1992.55 1541.73 L1992.55 1545.99 L1989.28 1545.99 L1989.28 1561.92 Q1989.28 1563.59 1989.84 1564.33 Q1990.42 1565.04 1991.69 1565.04 Q1992.04 1565.04 1992.55 1565 Q1993.05 1564.93 1993.22 1564.91 L1993.22 1567.98 Q1992.41 1568.28 1991.55 1568.42 Q1990.69 1568.56 1989.84 1568.56 Q1987.06 1568.56 1985.99 1567.06 Q1984.93 1565.53 1984.93 1561.46 L1984.93 1545.99 L1975.37 1545.99 L1975.37 1567.66 L1971.02 1567.66 L1971.02 1545.99 L1967.71 1545.99 L1967.71 1541.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2236.69 1563.72 L2253.01 1563.72 L2253.01 1567.66 L2231.07 1567.66 L2231.07 1563.72 Q2233.73 1560.97 2238.31 1556.34 Q2242.92 1551.69 2244.1 1550.35 Q2246.34 1547.82 2247.22 1546.09 Q2248.13 1544.33 2248.13 1542.64 Q2248.13 1539.88 2246.18 1538.15 Q2244.26 1536.41 2241.16 1536.41 Q2238.96 1536.41 2236.51 1537.17 Q2234.08 1537.94 2231.3 1539.49 L2231.3 1534.77 Q2234.12 1533.63 2236.58 1533.05 Q2239.03 1532.47 2241.07 1532.47 Q2246.44 1532.47 2249.63 1535.16 Q2252.83 1537.85 2252.83 1542.34 Q2252.83 1544.47 2252.02 1546.39 Q2251.23 1548.28 2249.12 1550.88 Q2248.54 1551.55 2245.44 1554.77 Q2242.34 1557.96 2236.69 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2269.79 1533.1 L2273.73 1533.1 L2261.69 1572.06 L2257.76 1572.06 L2269.79 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2285.77 1533.1 L2289.7 1533.1 L2277.66 1572.06 L2273.73 1572.06 L2285.77 1533.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2295.58 1563.72 L2303.22 1563.72 L2303.22 1537.36 L2294.91 1539.03 L2294.91 1534.77 L2303.17 1533.1 L2307.85 1533.1 L2307.85 1563.72 L2315.49 1563.72 L2315.49 1567.66 L2295.58 1567.66 L2295.58 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2321.58 1541.73 L2346.41 1541.73 L2346.41 1545.99 L2343.15 1545.99 L2343.15 1561.92 Q2343.15 1563.59 2343.71 1564.33 Q2344.28 1565.04 2345.56 1565.04 Q2345.9 1565.04 2346.41 1565 Q2346.92 1564.93 2347.09 1564.91 L2347.09 1567.98 Q2346.27 1568.28 2345.42 1568.42 Q2344.56 1568.56 2343.71 1568.56 Q2340.93 1568.56 2339.86 1567.06 Q2338.8 1565.53 2338.8 1561.46 L2338.8 1545.99 L2329.24 1545.99 L2329.24 1567.66 L2324.89 1567.66 L2324.89 1545.99 L2321.58 1545.99 L2321.58 1541.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1237.87 1627.53 L1217.59 1627.53 Q1218.07 1637.04 1220.27 1641.08 Q1223.01 1646.05 1227.75 1646.05 Q1232.52 1646.05 1235.16 1641.05 Q1237.49 1636.66 1237.87 1627.53 M1237.77 1622.11 Q1236.88 1613.08 1235.16 1609.89 Q1232.43 1604.86 1227.75 1604.86 Q1222.88 1604.86 1220.3 1609.83 Q1218.26 1613.84 1217.66 1622.11 L1237.77 1622.11 M1227.75 1600.09 Q1235.39 1600.09 1239.75 1606.84 Q1244.11 1613.55 1244.11 1625.46 Q1244.11 1637.33 1239.75 1644.08 Q1235.39 1650.86 1227.75 1650.86 Q1220.08 1650.86 1215.75 1644.08 Q1211.39 1637.33 1211.39 1625.46 Q1211.39 1613.55 1215.75 1606.84 Q1220.08 1600.09 1227.75 1600.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1261.07 2352.76,1261.07 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,957.615 2352.76,957.615 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,654.158 2352.76,654.158 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,350.701 2352.76,350.701 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1261.07 121.638,1261.07 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,957.615 121.638,957.615 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,654.158 121.638,654.158 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,350.701 121.638,350.701 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M-19.602 1246.87 Q-23.2131 1246.87 -25.0418 1250.44 Q-26.8473 1253.98 -26.8473 1261.11 Q-26.8473 1268.21 -25.0418 1271.78 Q-23.2131 1275.32 -19.602 1275.32 Q-15.9677 1275.32 -14.1622 1271.78 Q-12.3335 1268.21 -12.3335 1261.11 Q-12.3335 1253.98 -14.1622 1250.44 Q-15.9677 1246.87 -19.602 1246.87 M-19.602 1243.17 Q-13.7918 1243.17 -10.7363 1247.77 Q-7.65759 1252.36 -7.65759 1261.11 Q-7.65759 1269.83 -10.7363 1274.44 Q-13.7918 1279.02 -19.602 1279.02 Q-25.4121 1279.02 -28.4908 1274.44 Q-31.5464 1269.83 -31.5464 1261.11 Q-31.5464 1252.36 -28.4908 1247.77 Q-25.4121 1243.17 -19.602 1243.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M0.559957 1272.47 L5.44419 1272.47 L5.44419 1278.35 L0.559957 1278.35 L0.559957 1272.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M25.6293 1261.94 Q22.296 1261.94 20.3747 1263.72 Q18.4765 1265.51 18.4765 1268.63 Q18.4765 1271.76 20.3747 1273.54 Q22.296 1275.32 25.6293 1275.32 Q28.9626 1275.32 30.8839 1273.54 Q32.8052 1271.73 32.8052 1268.63 Q32.8052 1265.51 30.8839 1263.72 Q28.9857 1261.94 25.6293 1261.94 M20.9534 1259.95 Q17.9441 1259.21 16.2543 1257.15 Q14.5877 1255.09 14.5877 1252.13 Q14.5877 1247.98 17.5275 1245.57 Q20.4904 1243.17 25.6293 1243.17 Q30.7913 1243.17 33.7311 1245.57 Q36.6709 1247.98 36.6709 1252.13 Q36.6709 1255.09 34.9811 1257.15 Q33.3144 1259.21 30.3283 1259.95 Q33.7079 1260.74 35.5829 1263.03 Q37.4811 1265.32 37.4811 1268.63 Q37.4811 1273.65 34.4024 1276.34 Q31.3468 1279.02 25.6293 1279.02 Q19.9117 1279.02 16.833 1276.34 Q13.7775 1273.65 13.7775 1268.63 Q13.7775 1265.32 15.6756 1263.03 Q17.5738 1260.74 20.9534 1259.95 M19.2404 1252.57 Q19.2404 1255.25 20.9071 1256.76 Q22.5969 1258.26 25.6293 1258.26 Q28.6385 1258.26 30.3283 1256.76 Q32.0413 1255.25 32.0413 1252.57 Q32.0413 1249.88 30.3283 1248.38 Q28.6385 1246.87 25.6293 1246.87 Q22.5969 1246.87 20.9071 1248.38 Q19.2404 1249.88 19.2404 1252.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M45.8375 1243.79 L64.1939 1243.79 L64.1939 1247.73 L50.1199 1247.73 L50.1199 1256.2 Q51.1384 1255.85 52.1569 1255.69 Q53.1754 1255.51 54.1939 1255.51 Q59.9809 1255.51 63.3605 1258.68 Q66.7402 1261.85 66.7402 1267.26 Q66.7402 1272.84 63.268 1275.94 Q59.7958 1279.02 53.4763 1279.02 Q51.3004 1279.02 49.0319 1278.65 Q46.7866 1278.28 44.3792 1277.54 L44.3792 1272.84 Q46.4625 1273.98 48.6847 1274.53 Q50.9069 1275.09 53.3837 1275.09 Q57.3884 1275.09 59.7263 1272.98 Q62.0643 1270.88 62.0643 1267.26 Q62.0643 1263.65 59.7263 1261.55 Q57.3884 1259.44 53.3837 1259.44 Q51.5088 1259.44 49.6338 1259.86 Q47.7819 1260.27 45.8375 1261.15 L45.8375 1243.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M-20.5973 943.414 Q-24.2084 943.414 -26.0371 946.979 Q-27.8427 950.52 -27.8427 957.65 Q-27.8427 964.756 -26.0371 968.321 Q-24.2084 971.863 -20.5973 971.863 Q-16.9631 971.863 -15.1576 968.321 Q-13.3289 964.756 -13.3289 957.65 Q-13.3289 950.52 -15.1576 946.979 Q-16.9631 943.414 -20.5973 943.414 M-20.5973 939.71 Q-14.7872 939.71 -11.7316 944.317 Q-8.65296 948.9 -8.65296 957.65 Q-8.65296 966.377 -11.7316 970.983 Q-14.7872 975.567 -20.5973 975.567 Q-26.4075 975.567 -29.4862 970.983 Q-32.5417 966.377 -32.5417 957.65 Q-32.5417 948.9 -29.4862 944.317 Q-26.4075 939.71 -20.5973 939.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M-0.435408 969.016 L4.44882 969.016 L4.44882 974.895 L-0.435408 974.895 L-0.435408 969.016 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M14.7728 974.178 L14.7728 969.918 Q16.5321 970.752 18.3376 971.192 Q20.1432 971.631 21.8793 971.631 Q26.5089 971.631 28.9394 968.53 Q31.3931 965.405 31.7403 959.062 Q30.3978 961.053 28.3376 962.118 Q26.2774 963.182 23.7774 963.182 Q18.5923 963.182 15.5599 960.057 Q12.5506 956.909 12.5506 951.469 Q12.5506 946.145 15.6988 942.928 Q18.8469 939.71 24.0783 939.71 Q30.0737 939.71 33.2218 944.317 Q36.3931 948.9 36.3931 957.65 Q36.3931 965.821 32.5042 970.705 Q28.6385 975.567 22.0876 975.567 Q20.3284 975.567 18.5228 975.219 Q16.7173 974.872 14.7728 974.178 M24.0783 959.525 Q27.2265 959.525 29.0552 957.372 Q30.907 955.219 30.907 951.469 Q30.907 947.743 29.0552 945.59 Q27.2265 943.414 24.0783 943.414 Q20.9302 943.414 19.0784 945.59 Q17.2497 947.743 17.2497 951.469 Q17.2497 955.219 19.0784 957.372 Q20.9302 959.525 24.0783 959.525 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M54.7958 943.414 Q51.1847 943.414 49.356 946.979 Q47.5504 950.52 47.5504 957.65 Q47.5504 964.756 49.356 968.321 Q51.1847 971.863 54.7958 971.863 Q58.43 971.863 60.2356 968.321 Q62.0643 964.756 62.0643 957.65 Q62.0643 950.52 60.2356 946.979 Q58.43 943.414 54.7958 943.414 M54.7958 939.71 Q60.6059 939.71 63.6615 944.317 Q66.7402 948.9 66.7402 957.65 Q66.7402 966.377 63.6615 970.983 Q60.6059 975.567 54.7958 975.567 Q48.9856 975.567 45.9069 970.983 Q42.8514 966.377 42.8514 957.65 Q42.8514 948.9 45.9069 944.317 Q48.9856 939.71 54.7958 939.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M-19.602 639.957 Q-23.2131 639.957 -25.0418 643.522 Q-26.8473 647.063 -26.8473 654.193 Q-26.8473 661.299 -25.0418 664.864 Q-23.2131 668.406 -19.602 668.406 Q-15.9677 668.406 -14.1622 664.864 Q-12.3335 661.299 -12.3335 654.193 Q-12.3335 647.063 -14.1622 643.522 Q-15.9677 639.957 -19.602 639.957 M-19.602 636.253 Q-13.7918 636.253 -10.7363 640.86 Q-7.65759 645.443 -7.65759 654.193 Q-7.65759 662.92 -10.7363 667.526 Q-13.7918 672.109 -19.602 672.109 Q-25.4121 672.109 -28.4908 667.526 Q-31.5464 662.92 -31.5464 654.193 Q-31.5464 645.443 -28.4908 640.86 Q-25.4121 636.253 -19.602 636.253 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M0.559957 665.559 L5.44419 665.559 L5.44419 671.438 L0.559957 671.438 L0.559957 665.559 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M15.7682 670.721 L15.7682 666.461 Q17.5275 667.295 19.333 667.734 Q21.1385 668.174 22.8747 668.174 Q27.5043 668.174 29.9348 665.072 Q32.3885 661.947 32.7357 655.605 Q31.3931 657.596 29.333 658.66 Q27.2728 659.725 24.7728 659.725 Q19.5876 659.725 16.5552 656.6 Q13.546 653.452 13.546 648.012 Q13.546 642.688 16.6941 639.471 Q19.8423 636.253 25.0737 636.253 Q31.0691 636.253 34.2172 640.86 Q37.3885 645.443 37.3885 654.193 Q37.3885 662.364 33.4996 667.248 Q29.6339 672.109 23.083 672.109 Q21.3237 672.109 19.5182 671.762 Q17.7126 671.415 15.7682 670.721 M25.0737 656.068 Q28.2218 656.068 30.0505 653.915 Q31.9024 651.762 31.9024 648.012 Q31.9024 644.286 30.0505 642.133 Q28.2218 639.957 25.0737 639.957 Q21.9256 639.957 20.0737 642.133 Q18.245 644.286 18.245 648.012 Q18.245 651.762 20.0737 653.915 Q21.9256 656.068 25.0737 656.068 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M45.8375 636.878 L64.1939 636.878 L64.1939 640.813 L50.1199 640.813 L50.1199 649.286 Q51.1384 648.938 52.1569 648.776 Q53.1754 648.591 54.1939 648.591 Q59.9809 648.591 63.3605 651.762 Q66.7402 654.934 66.7402 660.35 Q66.7402 665.929 63.268 669.031 Q59.7958 672.109 53.4763 672.109 Q51.3004 672.109 49.0319 671.739 Q46.7866 671.369 44.3792 670.628 L44.3792 665.929 Q46.4625 667.063 48.6847 667.619 Q50.9069 668.174 53.3837 668.174 Q57.3884 668.174 59.7263 666.068 Q62.0643 663.961 62.0643 660.35 Q62.0643 656.739 59.7263 654.633 Q57.3884 652.526 53.3837 652.526 Q51.5088 652.526 49.6338 652.943 Q47.7819 653.36 45.8375 654.239 L45.8375 636.878 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M-29.7871 364.046 L-22.1483 364.046 L-22.1483 337.68 L-30.4584 339.347 L-30.4584 335.088 L-22.1946 333.421 L-17.5187 333.421 L-17.5187 364.046 L-9.8798 364.046 L-9.8798 367.981 L-29.7871 367.981 L-29.7871 364.046 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M-0.435408 362.102 L4.44882 362.102 L4.44882 367.981 L-0.435408 367.981 L-0.435408 362.102 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M24.6339 336.5 Q21.0228 336.5 19.1941 340.065 Q17.3886 343.606 17.3886 350.736 Q17.3886 357.842 19.1941 361.407 Q21.0228 364.949 24.6339 364.949 Q28.2681 364.949 30.0737 361.407 Q31.9024 357.842 31.9024 350.736 Q31.9024 343.606 30.0737 340.065 Q28.2681 336.5 24.6339 336.5 M24.6339 332.796 Q30.4441 332.796 33.4996 337.403 Q36.5783 341.986 36.5783 350.736 Q36.5783 359.463 33.4996 364.069 Q30.4441 368.652 24.6339 368.652 Q18.8237 368.652 15.7451 364.069 Q12.6895 359.463 12.6895 350.736 Q12.6895 341.986 15.7451 337.403 Q18.8237 332.796 24.6339 332.796 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M54.7958 336.5 Q51.1847 336.5 49.356 340.065 Q47.5504 343.606 47.5504 350.736 Q47.5504 357.842 49.356 361.407 Q51.1847 364.949 54.7958 364.949 Q58.43 364.949 60.2356 361.407 Q62.0643 357.842 62.0643 350.736 Q62.0643 343.606 60.2356 340.065 Q58.43 336.5 54.7958 336.5 M54.7958 332.796 Q60.6059 332.796 63.6615 337.403 Q66.7402 341.986 66.7402 350.736 Q66.7402 359.463 63.6615 364.069 Q60.6059 368.652 54.7958 368.652 Q48.9856 368.652 45.9069 364.069 Q42.8514 359.463 42.8514 350.736 Q42.8514 341.986 45.9069 337.403 Q48.9856 332.796 54.7958 332.796 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M-112.971 765.812 Q-113.544 766.799 -113.799 767.977 Q-114.085 769.122 -114.085 770.523 Q-114.085 775.488 -110.839 778.162 Q-107.624 780.803 -101.577 780.803 L-82.7977 780.803 L-82.7977 786.692 L-118.446 786.692 L-118.446 780.803 L-112.908 780.803 Q-116.154 778.957 -117.714 775.997 Q-119.305 773.037 -119.305 768.804 Q-119.305 768.199 -119.21 767.467 Q-119.146 766.735 -118.987 765.844 L-112.971 765.812 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><line clip-path=\"url(#clip432)\" x1=\"166.42\" y1=\"350.701\" x2=\"166.42\" y2=\"334.701\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"166.42\" y1=\"350.701\" x2=\"150.42\" y2=\"350.701\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"166.42\" y1=\"350.701\" x2=\"166.42\" y2=\"366.701\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"166.42\" y1=\"350.701\" x2=\"182.42\" y2=\"350.701\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1227.75\" y1=\"350.753\" x2=\"1227.75\" y2=\"334.753\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1227.75\" y1=\"350.753\" x2=\"1211.75\" y2=\"350.753\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1227.75\" y1=\"350.753\" x2=\"1227.75\" y2=\"366.753\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1227.75\" y1=\"350.753\" x2=\"1243.75\" y2=\"350.753\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"700.474\" y1=\"698.36\" x2=\"700.474\" y2=\"682.36\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"700.474\" y1=\"698.36\" x2=\"684.474\" y2=\"698.36\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"700.474\" y1=\"698.36\" x2=\"700.474\" y2=\"714.36\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"700.474\" y1=\"698.36\" x2=\"716.474\" y2=\"698.36\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1755.02\" y1=\"698.36\" x2=\"1755.02\" y2=\"682.36\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1755.02\" y1=\"698.36\" x2=\"1739.02\" y2=\"698.36\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1755.02\" y1=\"698.36\" x2=\"1755.02\" y2=\"714.36\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1755.02\" y1=\"698.36\" x2=\"1771.02\" y2=\"698.36\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1761.8\" y1=\"698.372\" x2=\"1761.8\" y2=\"682.372\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1761.8\" y1=\"698.372\" x2=\"1745.8\" y2=\"698.372\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1761.8\" y1=\"698.372\" x2=\"1761.8\" y2=\"714.372\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1761.8\" y1=\"698.372\" x2=\"1777.8\" y2=\"698.372\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"693.694\" y1=\"698.372\" x2=\"693.694\" y2=\"682.372\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"693.694\" y1=\"698.372\" x2=\"677.694\" y2=\"698.372\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"693.694\" y1=\"698.372\" x2=\"693.694\" y2=\"714.372\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"693.694\" y1=\"698.372\" x2=\"709.694\" y2=\"698.372\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1413.8\" y1=\"1032.39\" x2=\"1413.8\" y2=\"1016.39\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1413.8\" y1=\"1032.39\" x2=\"1397.8\" y2=\"1032.39\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1413.8\" y1=\"1032.39\" x2=\"1413.8\" y2=\"1048.39\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1413.8\" y1=\"1032.39\" x2=\"1429.8\" y2=\"1032.39\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1041.7\" y1=\"1032.39\" x2=\"1041.7\" y2=\"1016.39\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1041.7\" y1=\"1032.39\" x2=\"1025.7\" y2=\"1032.39\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1041.7\" y1=\"1032.39\" x2=\"1041.7\" y2=\"1048.39\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1041.7\" y1=\"1032.39\" x2=\"1057.7\" y2=\"1032.39\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2103.03\" y1=\"1032.49\" x2=\"2103.03\" y2=\"1016.49\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2103.03\" y1=\"1032.49\" x2=\"2087.03\" y2=\"1032.49\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2103.03\" y1=\"1032.49\" x2=\"2103.03\" y2=\"1048.49\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2103.03\" y1=\"1032.49\" x2=\"2119.03\" y2=\"1032.49\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"352.469\" y1=\"1032.49\" x2=\"352.469\" y2=\"1016.49\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"352.469\" y1=\"1032.49\" x2=\"336.469\" y2=\"1032.49\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"352.469\" y1=\"1032.49\" x2=\"352.469\" y2=\"1048.49\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"352.469\" y1=\"1032.49\" x2=\"368.469\" y2=\"1032.49\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"881.331\" y1=\"1334.86\" x2=\"881.331\" y2=\"1318.86\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"881.331\" y1=\"1334.86\" x2=\"865.331\" y2=\"1334.86\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"881.331\" y1=\"1334.86\" x2=\"881.331\" y2=\"1350.86\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"881.331\" y1=\"1334.86\" x2=\"897.331\" y2=\"1334.86\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1574.17\" y1=\"1334.86\" x2=\"1574.17\" y2=\"1318.86\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1574.17\" y1=\"1334.86\" x2=\"1558.17\" y2=\"1334.86\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1574.17\" y1=\"1334.86\" x2=\"1574.17\" y2=\"1350.86\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1574.17\" y1=\"1334.86\" x2=\"1590.17\" y2=\"1334.86\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1942.65\" y1=\"1335.23\" x2=\"1942.65\" y2=\"1319.23\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1942.65\" y1=\"1335.23\" x2=\"1926.65\" y2=\"1335.23\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1942.65\" y1=\"1335.23\" x2=\"1942.65\" y2=\"1351.23\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1942.65\" y1=\"1335.23\" x2=\"1958.65\" y2=\"1335.23\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"512.846\" y1=\"1335.23\" x2=\"512.846\" y2=\"1319.23\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"512.846\" y1=\"1335.23\" x2=\"496.846\" y2=\"1335.23\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"512.846\" y1=\"1335.23\" x2=\"512.846\" y2=\"1351.23\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"512.846\" y1=\"1335.23\" x2=\"528.846\" y2=\"1335.23\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1340.72\" y1=\"1360.14\" x2=\"1340.72\" y2=\"1344.14\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1340.72\" y1=\"1360.14\" x2=\"1324.72\" y2=\"1360.14\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1340.72\" y1=\"1360.14\" x2=\"1340.72\" y2=\"1376.14\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1340.72\" y1=\"1360.14\" x2=\"1356.72\" y2=\"1360.14\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1114.78\" y1=\"1360.14\" x2=\"1114.78\" y2=\"1344.14\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1114.78\" y1=\"1360.14\" x2=\"1098.78\" y2=\"1360.14\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1114.78\" y1=\"1360.14\" x2=\"1114.78\" y2=\"1376.14\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"1114.78\" y1=\"1360.14\" x2=\"1130.78\" y2=\"1360.14\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"279.39\" y1=\"1360.16\" x2=\"279.39\" y2=\"1344.16\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"279.39\" y1=\"1360.16\" x2=\"263.39\" y2=\"1360.16\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"279.39\" y1=\"1360.16\" x2=\"279.39\" y2=\"1376.16\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"279.39\" y1=\"1360.16\" x2=\"295.39\" y2=\"1360.16\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2176.11\" y1=\"1360.16\" x2=\"2176.11\" y2=\"1344.16\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2176.11\" y1=\"1360.16\" x2=\"2160.11\" y2=\"1360.16\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2176.11\" y1=\"1360.16\" x2=\"2176.11\" y2=\"1376.16\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2176.11\" y1=\"1360.16\" x2=\"2192.11\" y2=\"1360.16\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2289.08\" y1=\"1495.64\" x2=\"2289.08\" y2=\"1479.64\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2289.08\" y1=\"1495.64\" x2=\"2273.08\" y2=\"1495.64\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2289.08\" y1=\"1495.64\" x2=\"2289.08\" y2=\"1511.64\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip432)\" x1=\"2289.08\" y1=\"1495.64\" x2=\"2305.08\" y2=\"1495.64\" style=\"stroke:#009af9; stroke-width:3.2; stroke-opacity:1\"/>\n<path clip-path=\"url(#clip430)\" d=\"M1881.6 199.525 L2277.76 199.525 L2277.76 95.8446 L1881.6 95.8446  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1881.6,199.525 2277.76,199.525 2277.76,95.8446 1881.6,95.8446 1881.6,199.525 \"/>\n<line clip-path=\"url(#clip430)\" x1=\"1981.6\" y1=\"147.685\" x2=\"1981.6\" y2=\"124.929\" style=\"stroke:#009af9; stroke-width:4.55111; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip430)\" x1=\"1981.6\" y1=\"147.685\" x2=\"1958.84\" y2=\"147.685\" style=\"stroke:#009af9; stroke-width:4.55111; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip430)\" x1=\"1981.6\" y1=\"147.685\" x2=\"1981.6\" y2=\"170.44\" style=\"stroke:#009af9; stroke-width:4.55111; stroke-opacity:1\"/>\n<line clip-path=\"url(#clip430)\" x1=\"1981.6\" y1=\"147.685\" x2=\"2004.35\" y2=\"147.685\" style=\"stroke:#009af9; stroke-width:4.55111; stroke-opacity:1\"/>\n<path clip-path=\"url(#clip430)\" d=\"M2081.6 130.405 L2110.83 130.405 L2110.83 134.34 L2098.57 134.34 L2098.57 164.965 L2093.87 164.965 L2093.87 134.34 L2081.6 134.34 L2081.6 130.405 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2123.22 143.02 Q2122.5 142.604 2121.64 142.418 Q2120.81 142.21 2119.79 142.21 Q2116.18 142.21 2114.24 144.571 Q2112.32 146.909 2112.32 151.307 L2112.32 164.965 L2108.03 164.965 L2108.03 139.039 L2112.32 139.039 L2112.32 143.067 Q2113.66 140.705 2115.81 139.571 Q2117.96 138.414 2121.04 138.414 Q2121.48 138.414 2122.02 138.483 Q2122.55 138.53 2123.2 138.645 L2123.22 143.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2127.69 139.039 L2131.95 139.039 L2131.95 164.965 L2127.69 164.965 L2127.69 139.039 M2127.69 128.946 L2131.95 128.946 L2131.95 134.34 L2127.69 134.34 L2127.69 128.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2137.8 139.039 L2142.32 139.039 L2150.42 160.798 L2158.52 139.039 L2163.03 139.039 L2153.31 164.965 L2147.52 164.965 L2137.8 139.039 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2168.91 139.039 L2173.17 139.039 L2173.17 164.965 L2168.91 164.965 L2168.91 139.039 M2168.91 128.946 L2173.17 128.946 L2173.17 134.34 L2168.91 134.34 L2168.91 128.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2193.87 151.932 Q2188.7 151.932 2186.71 153.113 Q2184.72 154.293 2184.72 157.141 Q2184.72 159.409 2186.2 160.752 Q2187.71 162.071 2190.28 162.071 Q2193.82 162.071 2195.95 159.571 Q2198.1 157.048 2198.1 152.881 L2198.1 151.932 L2193.87 151.932 M2202.36 150.173 L2202.36 164.965 L2198.1 164.965 L2198.1 161.029 Q2196.64 163.391 2194.47 164.525 Q2192.29 165.636 2189.14 165.636 Q2185.16 165.636 2182.8 163.414 Q2180.46 161.168 2180.46 157.418 Q2180.46 153.043 2183.38 150.821 Q2186.32 148.599 2192.13 148.599 L2198.1 148.599 L2198.1 148.182 Q2198.1 145.243 2196.16 143.645 Q2194.24 142.025 2190.74 142.025 Q2188.52 142.025 2186.41 142.557 Q2184.31 143.09 2182.36 144.155 L2182.36 140.219 Q2184.7 139.317 2186.9 138.877 Q2189.1 138.414 2191.18 138.414 Q2196.81 138.414 2199.58 141.33 Q2202.36 144.247 2202.36 150.173 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2211.14 128.946 L2215.39 128.946 L2215.39 164.965 L2211.14 164.965 L2211.14 128.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2234.54 128.993 Q2231.44 134.317 2229.93 139.525 Q2228.43 144.733 2228.43 150.08 Q2228.43 155.428 2229.93 160.682 Q2231.46 165.914 2234.54 171.215 L2230.83 171.215 Q2227.36 165.775 2225.63 160.52 Q2223.91 155.266 2223.91 150.08 Q2223.91 144.918 2225.63 139.687 Q2227.34 134.456 2230.83 128.993 L2234.54 128.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2242.13 128.993 L2245.83 128.993 Q2249.31 134.456 2251.02 139.687 Q2252.76 144.918 2252.76 150.08 Q2252.76 155.266 2251.02 160.52 Q2249.31 165.775 2245.83 171.215 L2242.13 171.215 Q2245.21 165.914 2246.71 160.682 Q2248.24 155.428 2248.24 150.08 Q2248.24 144.733 2246.71 139.525 Q2245.21 134.317 2242.13 128.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"We can clearly see multiple eigenvalues close to the unit circle. Our state is close to being non-injective, and represents the sum of multiple injective states. This is numerically very problematic, but also indicates that we used an incorrect ansatz to approximate the groundstate. We should retry with a larger unit cell.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/#Success","page":"The XXZ model","title":"Success","text":"","category":"section"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"Let's initialize a different initial state, this time with a 2-site unit cell:","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"A = TensorMap(rand, ComplexF64, ℂ^20 * ℂ^2, ℂ^20);\nB = TensorMap(rand, ComplexF64, ℂ^20 * ℂ^2, ℂ^20);\nstate = InfiniteMPS([A, B]);","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"In MPSKit, we require that the periodicity of the hamiltonian equals that of the state it is applied to. This is not a big obstacle, you can simply repeat the original hamiltonian. Alternatively, the hamiltonian can be constructed directly on a two-site unitcell by making use of MPSKitModels.jl's @mpoham.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"# H2 = repeat(H, 2); -- copies the one-site version\nH2 = heisenberg_XXX(ComplexF64, Trivial, InfiniteChain(2); spin=1//2)\ngroundstate, cache, delta = find_groundstate(state, H2, VUMPS(maxiter=100, tol_galerkin=1e-12));","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"[ Info: vumps @iteration 1 galerkin = 0.02471859426649394\n[ Info: vumps @iteration 2 galerkin = 0.5336462487537379\n[ Info: vumps @iteration 3 galerkin = 0.0569498471517149\n[ Info: vumps @iteration 4 galerkin = 0.011737509034280391\n[ Info: vumps @iteration 5 galerkin = 0.005671183022423362\n[ Info: vumps @iteration 6 galerkin = 0.004077548522492758\n[ Info: vumps @iteration 7 galerkin = 0.00346337288080226\n[ Info: vumps @iteration 8 galerkin = 0.0034035609887699382\n[ Info: vumps @iteration 9 galerkin = 0.00287009341833206\n[ Info: vumps @iteration 10 galerkin = 0.0025564618256067205\n[ Info: vumps @iteration 11 galerkin = 0.0021642270141732705\n[ Info: vumps @iteration 12 galerkin = 0.0018441235813095455\n[ Info: vumps @iteration 13 galerkin = 0.0014633303800817082\n[ Info: vumps @iteration 14 galerkin = 0.0011712932289634713\n[ Info: vumps @iteration 15 galerkin = 0.0009913458194573896\n[ Info: vumps @iteration 16 galerkin = 0.0008217238684913961\n[ Info: vumps @iteration 17 galerkin = 0.0007361821761678524\n[ Info: vumps @iteration 18 galerkin = 0.0006617948964504855\n[ Info: vumps @iteration 19 galerkin = 0.0006489547393933417\n[ Info: vumps @iteration 20 galerkin = 0.0006407065150521205\n[ Info: vumps @iteration 21 galerkin = 0.0006743676283582835\n[ Info: vumps @iteration 22 galerkin = 0.0006961838099902785\n[ Info: vumps @iteration 23 galerkin = 0.0007643378799570455\n[ Info: vumps @iteration 24 galerkin = 0.0007875205457767738\n[ Info: vumps @iteration 25 galerkin = 0.0008815286455277601\n[ Info: vumps @iteration 26 galerkin = 0.0008558478898623038\n[ Info: vumps @iteration 27 galerkin = 0.0009116355699367757\n[ Info: vumps @iteration 28 galerkin = 0.0007623629840894187\n[ Info: vumps @iteration 29 galerkin = 0.000672377451120019\n[ Info: vumps @iteration 30 galerkin = 0.00048085346690758047\n[ Info: vumps @iteration 31 galerkin = 0.00035449545930500026\n[ Info: vumps @iteration 32 galerkin = 0.00024413974829683903\n[ Info: vumps @iteration 33 galerkin = 0.00017834863026853348\n[ Info: vumps @iteration 34 galerkin = 0.00012808618458122543\n[ Info: vumps @iteration 35 galerkin = 0.00010326719961492054\n[ Info: vumps @iteration 36 galerkin = 7.867589343745876e-5\n[ Info: vumps @iteration 37 galerkin = 7.053565151804916e-5\n[ Info: vumps @iteration 38 galerkin = 5.948713817537439e-5\n[ Info: vumps @iteration 39 galerkin = 5.422654237532789e-5\n[ Info: vumps @iteration 40 galerkin = 4.845663869976372e-5\n[ Info: vumps @iteration 41 galerkin = 4.475633416122732e-5\n[ Info: vumps @iteration 42 galerkin = 4.1190093998679165e-5\n[ Info: vumps @iteration 43 galerkin = 3.85239925976723e-5\n[ Info: vumps @iteration 44 galerkin = 3.6044698840578785e-5\n[ Info: vumps @iteration 45 galerkin = 3.404482970387514e-5\n[ Info: vumps @iteration 46 galerkin = 3.2188107894692364e-5\n[ Info: vumps @iteration 47 galerkin = 3.062569959549822e-5\n[ Info: vumps @iteration 48 galerkin = 2.9165433187232117e-5\n[ Info: vumps @iteration 49 galerkin = 2.7900865769739046e-5\n[ Info: vumps @iteration 50 galerkin = 2.6711166327490825e-5\n[ Info: vumps @iteration 51 galerkin = 2.565761829651515e-5\n[ Info: vumps @iteration 52 galerkin = 2.4661686248805343e-5\n[ Info: vumps @iteration 53 galerkin = 2.376419540361395e-5\n[ Info: vumps @iteration 54 galerkin = 2.291251665465714e-5\n[ Info: vumps @iteration 55 galerkin = 2.213302486372592e-5\n[ Info: vumps @iteration 56 galerkin = 2.1391830433156613e-5\n[ Info: vumps @iteration 57 galerkin = 2.0705485004797336e-5\n[ Info: vumps @iteration 58 galerkin = 2.005192472064174e-5\n[ Info: vumps @iteration 59 galerkin = 1.9441023808069207e-5\n[ Info: vumps @iteration 60 galerkin = 1.885852147774356e-5\n[ Info: vumps @iteration 61 galerkin = 1.8310012048485025e-5\n[ Info: vumps @iteration 62 galerkin = 1.7786308494324262e-5\n[ Info: vumps @iteration 63 galerkin = 1.72903624363058e-5\n[ Info: vumps @iteration 64 galerkin = 1.6816250191303885e-5\n[ Info: vumps @iteration 65 galerkin = 1.6365296440222392e-5\n[ Info: vumps @iteration 66 galerkin = 1.593364545283235e-5\n[ Info: vumps @iteration 67 galerkin = 1.552165903559916e-5\n[ Info: vumps @iteration 68 galerkin = 1.5126791793981698e-5\n[ Info: vumps @iteration 69 galerkin = 1.4748867586218179e-5\n[ Info: vumps @iteration 70 galerkin = 1.4386169727011887e-5\n[ Info: vumps @iteration 71 galerkin = 1.403824545447022e-5\n[ Info: vumps @iteration 72 galerkin = 1.3703901794543526e-5\n[ Info: vumps @iteration 73 galerkin = 1.338256532221321e-5\n[ Info: vumps @iteration 74 galerkin = 1.3073375132290958e-5\n[ Info: vumps @iteration 75 galerkin = 1.2775726965457211e-5\n[ Info: vumps @iteration 76 galerkin = 1.2488972607840078e-5\n[ Info: vumps @iteration 77 galerkin = 1.2212525817334619e-5\n[ Info: vumps @iteration 78 galerkin = 1.1945876828772046e-5\n[ Info: vumps @iteration 79 galerkin = 1.168848170019128e-5\n[ Info: vumps @iteration 80 galerkin = 1.1439923479389565e-5\n[ Info: vumps @iteration 81 galerkin = 1.1199710005861933e-5\n[ Info: vumps @iteration 82 galerkin = 1.0967489028039206e-5\n[ Info: vumps @iteration 83 galerkin = 1.074282179233689e-5\n[ Info: vumps @iteration 84 galerkin = 1.0525402955735938e-5\n[ Info: vumps @iteration 85 galerkin = 1.0314844781101482e-5\n[ Info: vumps @iteration 86 galerkin = 1.0110877760209823e-5\n[ Info: vumps @iteration 87 galerkin = 9.913160582105227e-6\n[ Info: vumps @iteration 88 galerkin = 9.721452298717816e-6\n[ Info: vumps @iteration 89 galerkin = 9.535452900229216e-6\n[ Info: vumps @iteration 90 galerkin = 9.354945274958686e-6\n[ Info: vumps @iteration 91 galerkin = 9.179665419379877e-6\n[ Info: vumps @iteration 92 galerkin = 9.00941678988538e-6\n[ Info: vumps @iteration 93 galerkin = 8.843966616555081e-6\n[ Info: vumps @iteration 94 galerkin = 8.683136285553438e-6\n[ Info: vumps @iteration 95 galerkin = 8.526720081125945e-6\n[ Info: vumps @iteration 96 galerkin = 8.374555369559546e-6\n[ Info: vumps @iteration 97 galerkin = 8.226459753719479e-6\n[ Info: vumps @iteration 98 galerkin = 8.082284990169496e-6\n[ Info: vumps @iteration 99 galerkin = 7.941868662016613e-6\n[ Info: vumps @iteration 100 galerkin = 7.805075630903694e-6\n┌ Warning: vumps didn't converge 7.805075630903694e-6\n└ @ MPSKit ~/projects/MPSKit.jl/src/algorithms/groundstate/vumps.jl:69\n","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"We get convergence, but it takes an enormous amount of iterations. The reason behind this becomes more obvious at higher bond dimensions:","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"groundstate, cache, delta = find_groundstate(state, H2, IDMRG2(trscheme=truncdim(50), maxiter=20, tol_galerkin=1e-12))\nentanglementplot(groundstate)","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip460\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip460)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip461\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip460)\" d=\"M86.9921 1505.26 L2352.76 1505.26 L2352.76 62.9921 L86.9921 62.9921  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip462\">\n    <rect x=\"86\" y=\"62\" width=\"2267\" height=\"1443\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"151.118,1505.26 151.118,62.9921 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"86.9921,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"151.118,1505.26 151.118,1524.16 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M17.8728 1661.2 L38.5457 1640.52 L41.3283 1643.3 L32.6532 1651.98 L54.3082 1673.63 L50.9855 1676.96 L29.3305 1655.3 L20.6554 1663.98 L17.8728 1661.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M56.2233 1640.69 Q55.4213 1640.9 54.6847 1641.37 Q53.9481 1641.82 53.2279 1642.54 Q50.6745 1645.09 50.9691 1648.13 Q51.2638 1651.15 54.3737 1654.26 L64.0309 1663.91 L61.0028 1666.94 L42.6705 1648.61 L45.6986 1645.58 L48.5467 1648.43 Q47.8265 1645.81 48.5467 1643.48 Q49.2505 1641.14 51.4275 1638.97 Q51.7384 1638.66 52.164 1638.33 Q52.5732 1637.99 53.1134 1637.61 L56.2233 1640.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M56.567 1634.71 L59.5788 1631.7 L77.9111 1650.03 L74.8993 1653.04 L56.567 1634.71 M49.4305 1627.58 L52.4423 1624.56 L56.256 1628.38 L53.2443 1631.39 L49.4305 1627.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M63.7199 1627.56 L66.9117 1624.37 L88.0266 1634.02 L78.3694 1612.91 L81.5612 1609.72 L93.0189 1634.92 L88.9268 1639.02 L63.7199 1627.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M85.7187 1605.56 L88.7304 1602.55 L107.063 1620.88 L104.051 1623.89 L85.7187 1605.56 M78.5822 1598.42 L81.5939 1595.41 L85.4077 1599.23 L82.3959 1602.24 L78.5822 1598.42 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M112.481 1597.03 Q108.83 1600.68 108.258 1602.92 Q107.685 1605.17 109.698 1607.18 Q111.302 1608.78 113.299 1608.69 Q115.296 1608.56 117.113 1606.74 Q119.617 1604.23 119.355 1600.96 Q119.093 1597.65 116.147 1594.71 L115.476 1594.04 L112.481 1597.03 M117.244 1589.78 L127.703 1600.24 L124.691 1603.25 L121.909 1600.47 Q122.547 1603.17 121.81 1605.51 Q121.057 1607.84 118.831 1610.06 Q116.016 1612.88 112.775 1612.97 Q109.534 1613.04 106.883 1610.39 Q103.789 1607.29 104.28 1603.66 Q104.788 1600.01 108.896 1595.9 L113.119 1591.68 L112.824 1591.39 Q110.746 1589.31 108.241 1589.55 Q105.737 1589.76 103.265 1592.24 Q101.694 1593.81 100.581 1595.67 Q99.4679 1597.54 98.8459 1599.67 L96.0633 1596.88 Q97.0782 1594.59 98.3221 1592.73 Q99.5497 1590.84 101.023 1589.37 Q105 1585.39 109.027 1585.49 Q113.053 1585.59 117.244 1589.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M108.438 1568.57 L111.449 1565.56 L136.918 1591.03 L133.906 1594.04 L108.438 1568.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M125.019 1552.05 Q126.59 1558.01 129.209 1562.76 Q131.828 1567.5 135.609 1571.29 Q139.39 1575.07 144.169 1577.72 Q148.949 1580.34 154.874 1581.91 L152.255 1584.53 Q145.953 1583.14 141.01 1580.65 Q136.083 1578.14 132.417 1574.48 Q128.767 1570.83 126.279 1565.92 Q123.791 1561.01 122.4 1554.67 L125.019 1552.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M130.387 1546.68 L133.006 1544.06 Q139.324 1545.47 144.235 1547.96 Q149.162 1550.43 152.812 1554.08 Q156.478 1557.75 158.966 1562.69 Q161.47 1567.62 162.862 1573.92 L160.243 1576.54 Q158.671 1570.61 156.036 1565.85 Q153.401 1561.05 149.62 1557.27 Q145.839 1553.49 141.076 1550.89 Q136.329 1548.27 130.387 1546.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1136.07 1763.92 L1131.33 1751.73 L1121.56 1769.56 L1114.65 1769.56 L1128.46 1744.35 L1122.67 1729.36 Q1121.11 1725.35 1116.21 1725.35 L1114.65 1725.35 L1114.65 1720.32 L1116.88 1720.38 Q1125.09 1720.6 1127.16 1725.92 L1131.87 1738.11 L1141.64 1720.29 L1148.55 1720.29 L1134.73 1745.49 L1140.53 1760.49 Q1142.09 1764.5 1146.99 1764.5 L1148.55 1764.5 L1148.55 1769.53 L1146.32 1769.46 Q1138.11 1769.24 1136.07 1763.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1178.05 1726.37 L1218.86 1726.37 L1218.86 1731.71 L1178.05 1731.71 L1178.05 1726.37 M1178.05 1739.35 L1218.86 1739.35 L1218.86 1744.76 L1178.05 1744.76 L1178.05 1739.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1253.52 1708.45 L1278.76 1708.45 L1278.76 1713.86 L1259.41 1713.86 L1259.41 1725.51 Q1260.81 1725.03 1262.21 1724.81 Q1263.61 1724.55 1265.01 1724.55 Q1272.96 1724.55 1277.61 1728.91 Q1282.26 1733.27 1282.26 1740.72 Q1282.26 1748.39 1277.48 1752.66 Q1272.71 1756.89 1264.02 1756.89 Q1261.03 1756.89 1257.91 1756.38 Q1254.82 1755.87 1251.51 1754.85 L1251.51 1748.39 Q1254.38 1749.95 1257.43 1750.71 Q1260.49 1751.48 1263.89 1751.48 Q1269.4 1751.48 1272.61 1748.58 Q1275.83 1745.69 1275.83 1740.72 Q1275.83 1735.76 1272.61 1732.86 Q1269.4 1729.96 1263.89 1729.96 Q1261.31 1729.96 1258.74 1730.54 Q1256.19 1731.11 1253.52 1732.32 L1253.52 1708.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1308.68 1712.68 Q1303.71 1712.68 1301.2 1717.58 Q1298.71 1722.45 1298.71 1732.25 Q1298.71 1742.03 1301.2 1746.93 Q1303.71 1751.8 1308.68 1751.8 Q1313.67 1751.8 1316.16 1746.93 Q1318.67 1742.03 1318.67 1732.25 Q1318.67 1722.45 1316.16 1717.58 Q1313.67 1712.68 1308.68 1712.68 M1308.68 1707.59 Q1316.66 1707.59 1320.87 1713.92 Q1325.1 1720.22 1325.1 1732.25 Q1325.1 1744.25 1320.87 1750.59 Q1316.66 1756.89 1308.68 1756.89 Q1300.69 1756.89 1296.45 1750.59 Q1292.25 1744.25 1292.25 1732.25 Q1292.25 1720.22 1296.45 1713.92 Q1300.69 1707.59 1308.68 1707.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"86.9921,1502.22 2352.76,1502.22 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"86.9921,1156.2 2352.76,1156.2 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"86.9921,810.179 2352.76,810.179 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"86.9921,464.156 2352.76,464.156 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"86.9921,118.134 2352.76,118.134 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"86.9921,1505.26 86.9921,62.9921 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"86.9921,1502.22 105.89,1502.22 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"86.9921,1156.2 105.89,1156.2 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"86.9921,810.179 105.89,810.179 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"86.9921,464.156 105.89,464.156 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"86.9921,118.134 105.89,118.134 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M-50.8404 1522.02 L-43.2015 1522.02 L-43.2015 1495.65 L-51.5117 1497.32 L-51.5117 1493.06 L-43.2478 1491.39 L-38.5719 1491.39 L-38.5719 1522.02 L-30.9331 1522.02 L-30.9331 1525.95 L-50.8404 1525.95 L-50.8404 1522.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M-11.4887 1494.47 Q-15.0998 1494.47 -16.9285 1498.04 Q-18.7341 1501.58 -18.7341 1508.71 Q-18.7341 1515.81 -16.9285 1519.38 Q-15.0998 1522.92 -11.4887 1522.92 Q-7.85449 1522.92 -6.04895 1519.38 Q-4.22025 1515.81 -4.22025 1508.71 Q-4.22025 1501.58 -6.04895 1498.04 Q-7.85449 1494.47 -11.4887 1494.47 M-11.4887 1490.77 Q-5.67858 1490.77 -2.62304 1495.37 Q0.455649 1499.96 0.455649 1508.71 Q0.455649 1517.43 -2.62304 1522.04 Q-5.67858 1526.62 -11.4887 1526.62 Q-17.2989 1526.62 -20.3776 1522.04 Q-23.4331 1517.43 -23.4331 1508.71 Q-23.4331 1499.96 -20.3776 1495.37 Q-17.2989 1490.77 -11.4887 1490.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M0.455649 1484.87 L24.5672 1484.87 L24.5672 1488.07 L0.455649 1488.07 L0.455649 1484.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M43.2057 1473.77 L33.6137 1488.76 L43.2057 1488.76 L43.2057 1473.77 M42.2089 1470.46 L46.9861 1470.46 L46.9861 1488.76 L50.9921 1488.76 L50.9921 1491.92 L46.9861 1491.92 L46.9861 1498.54 L43.2057 1498.54 L43.2057 1491.92 L30.5293 1491.92 L30.5293 1488.25 L42.2089 1470.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M-49.9188 1175.99 L-42.2799 1175.99 L-42.2799 1149.63 L-50.5901 1151.29 L-50.5901 1147.04 L-42.3262 1145.37 L-37.6503 1145.37 L-37.6503 1175.99 L-30.0115 1175.99 L-30.0115 1179.93 L-49.9188 1179.93 L-49.9188 1175.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M-10.5672 1148.45 Q-14.1782 1148.45 -16.0069 1152.01 Q-17.8125 1155.55 -17.8125 1162.68 Q-17.8125 1169.79 -16.0069 1173.36 Q-14.1782 1176.9 -10.5672 1176.9 Q-6.93291 1176.9 -5.12736 1173.36 Q-3.29867 1169.79 -3.29867 1162.68 Q-3.29867 1155.55 -5.12736 1152.01 Q-6.93291 1148.45 -10.5672 1148.45 M-10.5672 1144.74 Q-4.757 1144.74 -1.70146 1149.35 Q1.37723 1153.93 1.37723 1162.68 Q1.37723 1171.41 -1.70146 1176.02 Q-4.757 1180.6 -10.5672 1180.6 Q-16.3773 1180.6 -19.456 1176.02 Q-22.5115 1171.41 -22.5115 1162.68 Q-22.5115 1153.93 -19.456 1149.35 Q-16.3773 1144.74 -10.5672 1144.74 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1.37723 1138.85 L25.4888 1138.85 L25.4888 1142.04 L1.37723 1142.04 L1.37723 1138.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M45.1993 1137.38 Q47.9265 1137.96 49.4499 1139.8 Q50.9921 1141.65 50.9921 1144.36 Q50.9921 1148.51 48.1333 1150.79 Q45.2746 1153.06 40.0084 1153.06 Q38.2405 1153.06 36.3597 1152.71 Q34.4977 1152.37 32.5041 1151.67 L32.5041 1148 Q34.0839 1148.93 35.9647 1149.4 Q37.8455 1149.87 39.8955 1149.87 Q43.469 1149.87 45.331 1148.46 Q47.2118 1147.05 47.2118 1144.36 Q47.2118 1141.87 45.4626 1140.48 Q43.7323 1139.07 40.629 1139.07 L37.3565 1139.07 L37.3565 1135.95 L40.7795 1135.95 Q43.5819 1135.95 45.0677 1134.84 Q46.5535 1133.71 46.5535 1131.6 Q46.5535 1129.44 45.0113 1128.29 Q43.4878 1127.13 40.629 1127.13 Q39.068 1127.13 37.2813 1127.47 Q35.4945 1127.81 33.3504 1128.52 L33.3504 1125.13 Q35.5133 1124.53 37.3941 1124.23 Q39.2937 1123.93 40.9676 1123.93 Q45.2934 1123.93 47.8136 1125.91 Q50.3339 1127.86 50.3339 1131.21 Q50.3339 1133.54 48.9985 1135.16 Q47.6632 1136.76 45.1993 1137.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M-49.1477 829.971 L-41.5088 829.971 L-41.5088 803.606 L-49.819 805.272 L-49.819 801.013 L-41.5551 799.347 L-36.8792 799.347 L-36.8792 829.971 L-29.2404 829.971 L-29.2404 833.907 L-49.1477 833.907 L-49.1477 829.971 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M-9.79603 802.425 Q-13.4071 802.425 -15.2358 805.99 Q-17.0414 809.532 -17.0414 816.661 Q-17.0414 823.768 -15.2358 827.333 Q-13.4071 830.874 -9.79603 830.874 Q-6.16179 830.874 -4.35625 827.333 Q-2.52755 823.768 -2.52755 816.661 Q-2.52755 809.532 -4.35625 805.99 Q-6.16179 802.425 -9.79603 802.425 M-9.79603 798.722 Q-3.98588 798.722 -0.930339 803.328 Q2.14835 807.911 2.14835 816.661 Q2.14835 825.388 -0.930339 829.995 Q-3.98588 834.578 -9.79603 834.578 Q-15.6062 834.578 -18.6849 829.995 Q-21.7404 825.388 -21.7404 816.661 Q-21.7404 807.911 -18.6849 803.328 Q-15.6062 798.722 -9.79603 798.722 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2.14835 792.823 L26.2599 792.823 L26.2599 796.02 L2.14835 796.02 L2.14835 792.823 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M37.7326 803.299 L50.9921 803.299 L50.9921 806.496 L33.1624 806.496 L33.1624 803.299 Q35.3253 801.061 39.0492 797.299 Q42.7919 793.519 43.7511 792.428 Q45.5755 790.378 46.2902 788.967 Q47.0237 787.538 47.0237 786.165 Q47.0237 783.927 45.4438 782.516 Q43.8828 781.106 41.3625 781.106 Q39.5758 781.106 37.5822 781.726 Q35.6074 782.347 33.3504 783.607 L33.3504 779.77 Q35.645 778.849 37.6386 778.379 Q39.6322 777.908 41.2873 777.908 Q45.6507 777.908 48.2462 780.09 Q50.8417 782.272 50.8417 785.92 Q50.8417 787.651 50.1834 789.212 Q49.5439 790.754 47.8324 792.861 Q47.3622 793.406 44.842 796.02 Q42.3217 798.616 37.7326 803.299 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M-49.4486 483.949 L-41.8097 483.949 L-41.8097 457.583 L-50.1199 459.25 L-50.1199 454.991 L-41.856 453.324 L-37.1801 453.324 L-37.1801 483.949 L-29.5413 483.949 L-29.5413 487.884 L-49.4486 487.884 L-49.4486 483.949 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M-10.097 456.403 Q-13.708 456.403 -15.5367 459.967 Q-17.3423 463.509 -17.3423 470.639 Q-17.3423 477.745 -15.5367 481.31 Q-13.708 484.852 -10.097 484.852 Q-6.46272 484.852 -4.65717 481.31 Q-2.82848 477.745 -2.82848 470.639 Q-2.82848 463.509 -4.65717 459.967 Q-6.46272 456.403 -10.097 456.403 M-10.097 452.699 Q-4.2868 452.699 -1.23126 457.305 Q1.84742 461.889 1.84742 470.639 Q1.84742 479.366 -1.23126 483.972 Q-4.2868 488.555 -10.097 488.555 Q-15.9071 488.555 -18.9858 483.972 Q-22.0413 479.366 -22.0413 470.639 Q-22.0413 461.889 -18.9858 457.305 Q-15.9071 452.699 -10.097 452.699 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1.84742 446.8 L25.959 446.8 L25.959 449.998 L1.84742 449.998 L1.84742 446.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M34.8174 457.276 L41.024 457.276 L41.024 435.854 L34.272 437.208 L34.272 433.748 L40.9864 432.394 L44.7856 432.394 L44.7856 457.276 L50.9921 457.276 L50.9921 460.474 L34.8174 460.474 L34.8174 457.276 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M-19.7135 137.926 L-12.0747 137.926 L-12.0747 111.561 L-20.3848 113.227 L-20.3848 108.968 L-12.121 107.301 L-7.44506 107.301 L-7.44506 137.926 L0.193787 137.926 L0.193787 141.861 L-19.7135 141.861 L-19.7135 137.926 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M19.6381 110.38 Q16.027 110.38 14.1983 113.945 Q12.3928 117.487 12.3928 124.616 Q12.3928 131.723 14.1983 135.287 Q16.027 138.829 19.6381 138.829 Q23.2724 138.829 25.0779 135.287 Q26.9066 131.723 26.9066 124.616 Q26.9066 117.487 25.0779 113.945 Q23.2724 110.38 19.6381 110.38 M19.6381 106.676 Q25.4483 106.676 28.5038 111.283 Q31.5825 115.866 31.5825 124.616 Q31.5825 133.343 28.5038 137.949 Q25.4483 142.533 19.6381 142.533 Q13.828 142.533 10.7493 137.949 Q7.69375 133.343 7.69375 124.616 Q7.69375 115.866 10.7493 111.283 Q13.828 106.676 19.6381 106.676 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M41.2873 88.8725 Q38.3533 88.8725 36.8675 91.7689 Q35.4005 94.6464 35.4005 100.439 Q35.4005 106.213 36.8675 109.11 Q38.3533 111.987 41.2873 111.987 Q44.2401 111.987 45.7071 109.11 Q47.193 106.213 47.193 100.439 Q47.193 94.6464 45.7071 91.7689 Q44.2401 88.8725 41.2873 88.8725 M41.2873 85.8632 Q46.0081 85.8632 48.4907 89.606 Q50.9921 93.3299 50.9921 100.439 Q50.9921 107.53 48.4907 111.273 Q46.0081 114.996 41.2873 114.996 Q36.5666 114.996 34.0651 111.273 Q31.5825 107.53 31.5825 100.439 Q31.5825 93.3299 34.0651 89.606 Q36.5666 85.8632 41.2873 85.8632 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M720.944 12.096 L759.185 12.096 L759.185 18.9825 L729.127 18.9825 L729.127 36.8875 L757.929 36.8875 L757.929 43.7741 L729.127 43.7741 L729.127 65.6895 L759.914 65.6895 L759.914 72.576 L720.944 72.576 L720.944 12.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M810.753 45.1919 L810.753 72.576 L803.299 72.576 L803.299 45.4349 Q803.299 38.994 800.788 35.7938 Q798.276 32.5936 793.253 32.5936 Q787.217 32.5936 783.733 36.4419 Q780.25 40.2903 780.25 46.9338 L780.25 72.576 L772.755 72.576 L772.755 27.2059 L780.25 27.2059 L780.25 34.2544 Q782.923 30.163 786.529 28.1376 Q790.174 26.1121 794.914 26.1121 Q802.732 26.1121 806.743 30.9732 Q810.753 35.7938 810.753 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M832.992 14.324 L832.992 27.2059 L848.345 27.2059 L848.345 32.9987 L832.992 32.9987 L832.992 57.6282 Q832.992 63.1779 834.491 64.7578 Q836.031 66.3376 840.689 66.3376 L848.345 66.3376 L848.345 72.576 L840.689 72.576 Q832.061 72.576 828.779 69.3758 Q825.498 66.1351 825.498 57.6282 L825.498 32.9987 L820.03 32.9987 L820.03 27.2059 L825.498 27.2059 L825.498 14.324 L832.992 14.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M878.768 49.7694 Q869.734 49.7694 866.25 51.8354 Q862.767 53.9013 862.767 58.8839 Q862.767 62.8538 865.359 65.2034 Q867.992 67.5124 872.489 67.5124 Q878.687 67.5124 882.413 63.1374 Q886.181 58.7219 886.181 51.4303 L886.181 49.7694 L878.768 49.7694 M893.634 46.6907 L893.634 72.576 L886.181 72.576 L886.181 65.6895 Q883.629 69.8214 879.821 71.8063 Q876.013 73.7508 870.504 73.7508 Q863.536 73.7508 859.404 69.8619 Q855.313 65.9325 855.313 59.3701 Q855.313 51.7138 860.417 47.825 Q865.562 43.9361 875.729 43.9361 L886.181 43.9361 L886.181 43.2069 Q886.181 38.0623 882.778 35.2672 Q879.416 32.4315 873.299 32.4315 Q869.41 32.4315 865.724 33.3632 Q862.037 34.295 858.635 36.1584 L858.635 29.2718 Q862.726 27.692 866.574 26.9223 Q870.423 26.1121 874.069 26.1121 Q883.912 26.1121 888.773 31.2163 Q893.634 36.3204 893.634 46.6907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M946.701 45.1919 L946.701 72.576 L939.248 72.576 L939.248 45.4349 Q939.248 38.994 936.736 35.7938 Q934.225 32.5936 929.201 32.5936 Q923.166 32.5936 919.682 36.4419 Q916.198 40.2903 916.198 46.9338 L916.198 72.576 L908.704 72.576 L908.704 27.2059 L916.198 27.2059 L916.198 34.2544 Q918.872 30.163 922.477 28.1376 Q926.123 26.1121 930.862 26.1121 Q938.68 26.1121 942.691 30.9732 Q946.701 35.7938 946.701 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M991.423 49.3643 Q991.423 41.2625 988.061 36.8065 Q984.739 32.3505 978.703 32.3505 Q972.708 32.3505 969.346 36.8065 Q966.024 41.2625 966.024 49.3643 Q966.024 57.4256 969.346 61.8816 Q972.708 66.3376 978.703 66.3376 Q984.739 66.3376 988.061 61.8816 Q991.423 57.4256 991.423 49.3643 M998.877 66.9452 Q998.877 78.5308 993.732 84.1616 Q988.588 89.8329 977.974 89.8329 Q974.045 89.8329 970.561 89.2252 Q967.077 88.6581 963.796 87.4428 L963.796 80.1917 Q967.077 81.9741 970.278 82.8248 Q973.478 83.6755 976.8 83.6755 Q984.132 83.6755 987.777 79.8271 Q991.423 76.0193 991.423 68.282 L991.423 64.5957 Q989.114 68.6061 985.509 70.5911 Q981.904 72.576 976.881 72.576 Q968.536 72.576 963.432 66.2161 Q958.327 59.8562 958.327 49.3643 Q958.327 38.832 963.432 32.472 Q968.536 26.1121 976.881 26.1121 Q981.904 26.1121 985.509 28.0971 Q989.114 30.082 991.423 34.0924 L991.423 27.2059 L998.877 27.2059 L998.877 66.9452 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1014.23 9.54393 L1021.68 9.54393 L1021.68 72.576 L1014.23 72.576 L1014.23 9.54393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1076.09 48.0275 L1076.09 51.6733 L1041.82 51.6733 Q1042.3 59.3701 1046.43 63.421 Q1050.61 67.4314 1058.02 67.4314 Q1062.31 67.4314 1066.32 66.3781 Q1070.38 65.3249 1074.35 63.2184 L1074.35 70.267 Q1070.33 71.9684 1066.12 72.8596 Q1061.91 73.7508 1057.57 73.7508 Q1046.72 73.7508 1040.36 67.4314 Q1034.04 61.1119 1034.04 50.3365 Q1034.04 39.1965 1040.03 32.6746 Q1046.07 26.1121 1056.28 26.1121 Q1065.43 26.1121 1070.74 32.0264 Q1076.09 37.9003 1076.09 48.0275 M1068.63 45.84 Q1068.55 39.7232 1065.19 36.0774 Q1061.87 32.4315 1056.36 32.4315 Q1050.12 32.4315 1046.35 35.9558 Q1042.63 39.4801 1042.06 45.8805 L1068.63 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1123.64 35.9153 Q1126.44 30.8922 1130.33 28.5022 Q1134.22 26.1121 1139.48 26.1121 Q1146.57 26.1121 1150.42 31.0947 Q1154.27 36.0368 1154.27 45.1919 L1154.27 72.576 L1146.78 72.576 L1146.78 45.4349 Q1146.78 38.913 1144.47 35.7533 Q1142.16 32.5936 1137.42 32.5936 Q1131.63 32.5936 1128.26 36.4419 Q1124.9 40.2903 1124.9 46.9338 L1124.9 72.576 L1117.41 72.576 L1117.41 45.4349 Q1117.41 38.8725 1115.1 35.7533 Q1112.79 32.5936 1107.97 32.5936 Q1102.26 32.5936 1098.89 36.4824 Q1095.53 40.3308 1095.53 46.9338 L1095.53 72.576 L1088.04 72.576 L1088.04 27.2059 L1095.53 27.2059 L1095.53 34.2544 Q1098.08 30.082 1101.65 28.0971 Q1105.21 26.1121 1110.11 26.1121 Q1115.06 26.1121 1118.5 28.6237 Q1121.98 31.1352 1123.64 35.9153 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1207.94 48.0275 L1207.94 51.6733 L1173.67 51.6733 Q1174.16 59.3701 1178.29 63.421 Q1182.46 67.4314 1189.88 67.4314 Q1194.17 67.4314 1198.18 66.3781 Q1202.23 65.3249 1206.2 63.2184 L1206.2 70.267 Q1202.19 71.9684 1197.98 72.8596 Q1193.77 73.7508 1189.43 73.7508 Q1178.58 73.7508 1172.22 67.4314 Q1165.9 61.1119 1165.9 50.3365 Q1165.9 39.1965 1171.89 32.6746 Q1177.93 26.1121 1188.14 26.1121 Q1197.29 26.1121 1202.6 32.0264 Q1207.94 37.9003 1207.94 48.0275 M1200.49 45.84 Q1200.41 39.7232 1197.05 36.0774 Q1193.73 32.4315 1188.22 32.4315 Q1181.98 32.4315 1178.21 35.9558 Q1174.48 39.4801 1173.92 45.8805 L1200.49 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1257.89 45.1919 L1257.89 72.576 L1250.44 72.576 L1250.44 45.4349 Q1250.44 38.994 1247.93 35.7938 Q1245.41 32.5936 1240.39 32.5936 Q1234.36 32.5936 1230.87 36.4419 Q1227.39 40.2903 1227.39 46.9338 L1227.39 72.576 L1219.89 72.576 L1219.89 27.2059 L1227.39 27.2059 L1227.39 34.2544 Q1230.06 30.163 1233.67 28.1376 Q1237.31 26.1121 1242.05 26.1121 Q1249.87 26.1121 1253.88 30.9732 Q1257.89 35.7938 1257.89 45.1919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1280.13 14.324 L1280.13 27.2059 L1295.48 27.2059 L1295.48 32.9987 L1280.13 32.9987 L1280.13 57.6282 Q1280.13 63.1779 1281.63 64.7578 Q1283.17 66.3376 1287.83 66.3376 L1295.48 66.3376 L1295.48 72.576 L1287.83 72.576 Q1279.2 72.576 1275.92 69.3758 Q1272.64 66.1351 1272.64 57.6282 L1272.64 32.9987 L1267.17 32.9987 L1267.17 27.2059 L1272.64 27.2059 L1272.64 14.324 L1280.13 14.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1368.24 14.0809 L1368.24 22.0612 Q1363.58 19.8332 1359.45 18.7395 Q1355.32 17.6457 1351.47 17.6457 Q1344.78 17.6457 1341.14 20.2383 Q1337.53 22.8309 1337.53 27.611 Q1337.53 31.6214 1339.92 33.6873 Q1342.35 35.7128 1349.08 36.9686 L1354.02 37.9813 Q1363.17 39.7232 1367.51 44.1387 Q1371.88 48.5136 1371.88 55.8863 Q1371.88 64.6767 1365.97 69.2137 Q1360.1 73.7508 1348.71 73.7508 Q1344.42 73.7508 1339.56 72.7785 Q1334.74 71.8063 1329.55 69.9024 L1329.55 61.4765 Q1334.53 64.2716 1339.31 65.6895 Q1344.09 67.1073 1348.71 67.1073 Q1355.72 67.1073 1359.53 64.3527 Q1363.34 61.598 1363.34 56.4939 Q1363.34 52.0379 1360.58 49.5264 Q1357.87 47.0148 1351.63 45.759 L1346.65 44.7868 Q1337.49 42.9639 1333.4 39.075 Q1329.31 35.1862 1329.31 28.2591 Q1329.31 20.2383 1334.94 15.6203 Q1340.61 11.0023 1350.54 11.0023 Q1354.79 11.0023 1359.2 11.7719 Q1363.62 12.5416 1368.24 14.0809 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1391.53 65.7705 L1391.53 89.8329 L1384.04 89.8329 L1384.04 27.2059 L1391.53 27.2059 L1391.53 34.0924 Q1393.88 30.0415 1397.45 28.0971 Q1401.05 26.1121 1406.03 26.1121 Q1414.3 26.1121 1419.44 32.6746 Q1424.63 39.2371 1424.63 49.9314 Q1424.63 60.6258 1419.44 67.1883 Q1414.3 73.7508 1406.03 73.7508 Q1401.05 73.7508 1397.45 71.8063 Q1393.88 69.8214 1391.53 65.7705 M1416.89 49.9314 Q1416.89 41.7081 1413.49 37.0496 Q1410.12 32.3505 1404.21 32.3505 Q1398.3 32.3505 1394.89 37.0496 Q1391.53 41.7081 1391.53 49.9314 Q1391.53 58.1548 1394.89 62.8538 Q1398.3 67.5124 1404.21 67.5124 Q1410.12 67.5124 1413.49 62.8538 Q1416.89 58.1548 1416.89 49.9314 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1475.79 48.0275 L1475.79 51.6733 L1441.52 51.6733 Q1442.01 59.3701 1446.14 63.421 Q1450.31 67.4314 1457.72 67.4314 Q1462.02 67.4314 1466.03 66.3781 Q1470.08 65.3249 1474.05 63.2184 L1474.05 70.267 Q1470.04 71.9684 1465.82 72.8596 Q1461.61 73.7508 1457.28 73.7508 Q1446.42 73.7508 1440.06 67.4314 Q1433.74 61.1119 1433.74 50.3365 Q1433.74 39.1965 1439.74 32.6746 Q1445.77 26.1121 1455.98 26.1121 Q1465.14 26.1121 1470.44 32.0264 Q1475.79 37.9003 1475.79 48.0275 M1468.34 45.84 Q1468.26 39.7232 1464.89 36.0774 Q1461.57 32.4315 1456.06 32.4315 Q1449.82 32.4315 1446.06 35.9558 Q1442.33 39.4801 1441.76 45.8805 L1468.34 45.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1520.67 28.9478 L1520.67 35.9153 Q1517.51 34.1734 1514.31 33.3227 Q1511.15 32.4315 1507.91 32.4315 Q1500.66 32.4315 1496.65 37.0496 Q1492.64 41.6271 1492.64 49.9314 Q1492.64 58.2358 1496.65 62.8538 Q1500.66 67.4314 1507.91 67.4314 Q1511.15 67.4314 1514.31 66.5807 Q1517.51 65.6895 1520.67 63.9476 L1520.67 70.8341 Q1517.55 72.2924 1514.19 73.0216 Q1510.87 73.7508 1507.1 73.7508 Q1496.85 73.7508 1490.82 67.3098 Q1484.78 60.8689 1484.78 49.9314 Q1484.78 38.832 1490.86 32.472 Q1496.98 26.1121 1507.59 26.1121 Q1511.03 26.1121 1514.31 26.8413 Q1517.6 27.5299 1520.67 28.9478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1541.01 14.324 L1541.01 27.2059 L1556.36 27.2059 L1556.36 32.9987 L1541.01 32.9987 L1541.01 57.6282 Q1541.01 63.1779 1542.51 64.7578 Q1544.05 66.3376 1548.71 66.3376 L1556.36 66.3376 L1556.36 72.576 L1548.71 72.576 Q1540.08 72.576 1536.8 69.3758 Q1533.52 66.1351 1533.52 57.6282 L1533.52 32.9987 L1528.05 32.9987 L1528.05 27.2059 L1533.52 27.2059 L1533.52 14.324 L1541.01 14.324 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1592.46 34.1734 Q1591.2 33.4443 1589.7 33.1202 Q1588.24 32.7556 1586.46 32.7556 Q1580.14 32.7556 1576.74 36.8875 Q1573.38 40.9789 1573.38 48.6757 L1573.38 72.576 L1565.88 72.576 L1565.88 27.2059 L1573.38 27.2059 L1573.38 34.2544 Q1575.73 30.1225 1579.49 28.1376 Q1583.26 26.1121 1588.65 26.1121 Q1589.42 26.1121 1590.35 26.2337 Q1591.28 26.3147 1592.42 26.5172 L1592.46 34.1734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1599.5 54.671 L1599.5 27.2059 L1606.96 27.2059 L1606.96 54.3874 Q1606.96 60.8284 1609.47 64.0691 Q1611.98 67.2693 1617 67.2693 Q1623.04 67.2693 1626.52 63.421 Q1630.05 59.5726 1630.05 52.9291 L1630.05 27.2059 L1637.5 27.2059 L1637.5 72.576 L1630.05 72.576 L1630.05 65.6084 Q1627.33 69.7404 1623.73 71.7658 Q1620.16 73.7508 1615.42 73.7508 Q1607.61 73.7508 1603.56 68.8897 Q1599.5 64.0286 1599.5 54.671 M1618.26 26.1121 L1618.26 26.1121 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1688.18 35.9153 Q1690.97 30.8922 1694.86 28.5022 Q1698.75 26.1121 1704.02 26.1121 Q1711.11 26.1121 1714.96 31.0947 Q1718.8 36.0368 1718.8 45.1919 L1718.8 72.576 L1711.31 72.576 L1711.31 45.4349 Q1711.31 38.913 1709 35.7533 Q1706.69 32.5936 1701.95 32.5936 Q1696.16 32.5936 1692.8 36.4419 Q1689.43 40.2903 1689.43 46.9338 L1689.43 72.576 L1681.94 72.576 L1681.94 45.4349 Q1681.94 38.8725 1679.63 35.7533 Q1677.32 32.5936 1672.5 32.5936 Q1666.79 32.5936 1663.43 36.4824 Q1660.07 40.3308 1660.07 46.9338 L1660.07 72.576 L1652.57 72.576 L1652.57 27.2059 L1660.07 27.2059 L1660.07 34.2544 Q1662.62 30.082 1666.18 28.0971 Q1669.75 26.1121 1674.65 26.1121 Q1679.59 26.1121 1683.03 28.6237 Q1686.52 31.1352 1688.18 35.9153 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip462)\" cx=\"364.869\" cy=\"146.608\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"399.767\" cy=\"260.712\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"434.665\" cy=\"301.351\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"469.563\" cy=\"333.111\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"504.462\" cy=\"480.589\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"539.36\" cy=\"524.807\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"574.258\" cy=\"549.388\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"609.156\" cy=\"555.639\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"644.054\" cy=\"665.373\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"678.952\" cy=\"711.753\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"713.851\" cy=\"744.82\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"748.749\" cy=\"746.227\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"783.647\" cy=\"752.239\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"818.545\" cy=\"801.429\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"853.443\" cy=\"804.038\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"888.341\" cy=\"824.925\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"923.24\" cy=\"836.849\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"958.138\" cy=\"840.175\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"993.036\" cy=\"869.867\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1027.93\" cy=\"894.38\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1062.83\" cy=\"946.898\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1097.73\" cy=\"1000.91\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1132.63\" cy=\"1031.77\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1167.53\" cy=\"1037.47\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1202.42\" cy=\"1043.96\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1237.32\" cy=\"1097.98\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1272.22\" cy=\"1103.65\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1307.12\" cy=\"1140\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1342.02\" cy=\"1157.02\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1376.92\" cy=\"1170.05\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1411.81\" cy=\"1171.31\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1446.71\" cy=\"1191.87\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1481.61\" cy=\"1192.71\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1516.51\" cy=\"1195.7\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1551.41\" cy=\"1203.53\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1586.3\" cy=\"1208.32\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1621.2\" cy=\"1231.57\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1656.1\" cy=\"1245.27\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1691\" cy=\"1273.73\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1725.9\" cy=\"1284.92\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1760.8\" cy=\"1326.01\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1795.69\" cy=\"1341.47\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1830.59\" cy=\"1382.31\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1865.49\" cy=\"1388.81\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1900.39\" cy=\"1404.69\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1935.29\" cy=\"1414\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"1970.18\" cy=\"1423.21\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"2005.08\" cy=\"1438.94\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"2039.98\" cy=\"1448.4\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip462)\" cx=\"2074.88\" cy=\"1464.44\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n</svg>\n","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"We see that some eigenvalues clearly belong to a group, and are almost degenerate. This implies 2 things:","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"there is superfluous information, if those eigenvalues are the same anyway\npoor convergence if we cut off within such a subspace","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"It are precisely those problems that we can solve by using symmetries.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/#Symmetries","page":"The XXZ model","title":"Symmetries","text":"","category":"section"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"The XXZ Heisenberg hamiltonian is SU(2) symmetric and we can exploit this to greatly speed up the simulation.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"It is cumbersome to construct symmetric hamiltonians, but luckily su(2) symmetric XXZ is already implemented:","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"H2 = heisenberg_XXX(ComplexF64, SU2Irrep, InfiniteChain(2); spin=1//2);","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"Our initial state should also be SU(2) symmetric. It now becomes apparent why we have to use a two-site periodic state. The physical space carries a half-integer charge and the first tensor maps the first virtual_space ⊗ the physical_space to the second virtual_space. Half-integer virtual charges will therefore map only to integer charges, and vice versa. The staggering thus happens on the virtual level.","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"An alternative constructor for the initial state is","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"P = Rep[SU₂](1 // 2 => 1)\nV1 = Rep[SU₂](1 // 2 => 10, 3 // 2 => 5, 5 // 2 => 2)\nV2 = Rep[SU₂](0 => 15, 1 => 10, 2 => 5)\nstate = InfiniteMPS([P, P], [V1, V2]);","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"Even though the bond dimension is higher than in the example without symmetry, convergence is reached much faster:","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"println(dim(V1))\nprintln(dim(V2))\ngroundstate, cache, delta = find_groundstate(state, H2, VUMPS(maxiter=400, tol_galerkin=1e-12));","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"52\n70\n[ Info: vumps @iteration 1 galerkin = 0.03983470720992732\n[ Info: vumps @iteration 2 galerkin = 0.005470084782380862\n[ Info: vumps @iteration 3 galerkin = 0.002445233262280903\n[ Info: vumps @iteration 4 galerkin = 0.0011622471138082794\n[ Info: vumps @iteration 5 galerkin = 0.0008658310986604488\n[ Info: vumps @iteration 6 galerkin = 0.0005925375804442109\n[ Info: vumps @iteration 7 galerkin = 0.00045950630354569784\n[ Info: vumps @iteration 8 galerkin = 0.0003606714233257848\n[ Info: vumps @iteration 9 galerkin = 0.00027978400203657364\n[ Info: vumps @iteration 10 galerkin = 0.0002138903038582846\n[ Info: vumps @iteration 11 galerkin = 0.00016095028578183565\n[ Info: vumps @iteration 12 galerkin = 0.00011955939029667788\n[ Info: vumps @iteration 13 galerkin = 8.788722830687659e-5\n[ Info: vumps @iteration 14 galerkin = 6.409848356236834e-5\n[ Info: vumps @iteration 15 galerkin = 4.647715225213e-5\n[ Info: vumps @iteration 16 galerkin = 3.356019093174639e-5\n[ Info: vumps @iteration 17 galerkin = 2.4161948879687502e-5\n[ Info: vumps @iteration 18 galerkin = 1.7359878707996212e-5\n[ Info: vumps @iteration 19 galerkin = 1.245471736425661e-5\n[ Info: vumps @iteration 20 galerkin = 8.926362843631308e-6\n[ Info: vumps @iteration 21 galerkin = 6.392762689857463e-6\n[ Info: vumps @iteration 22 galerkin = 4.575671367428788e-6\n[ Info: vumps @iteration 23 galerkin = 3.2735896420757063e-6\n[ Info: vumps @iteration 24 galerkin = 2.3411531011797804e-6\n[ Info: vumps @iteration 25 galerkin = 1.6737593335555163e-6\n[ Info: vumps @iteration 26 galerkin = 1.1962665012326152e-6\n[ Info: vumps @iteration 27 galerkin = 8.547606079064306e-7\n[ Info: vumps @iteration 28 galerkin = 6.105902833949259e-7\n[ Info: vumps @iteration 29 galerkin = 4.360632769390177e-7\n[ Info: vumps @iteration 30 galerkin = 3.1134982715431993e-7\n[ Info: vumps @iteration 31 galerkin = 2.2225500530687362e-7\n[ Info: vumps @iteration 32 galerkin = 1.5862177413799663e-7\n[ Info: vumps @iteration 33 galerkin = 1.1318421104490093e-7\n[ Info: vumps @iteration 34 galerkin = 8.074677672841449e-8\n[ Info: vumps @iteration 35 galerkin = 5.7595311118623964e-8\n[ Info: vumps @iteration 36 galerkin = 4.1074435552287456e-8\n[ Info: vumps @iteration 37 galerkin = 2.9287650625304386e-8\n[ Info: vumps @iteration 38 galerkin = 2.0880071192650158e-8\n[ Info: vumps @iteration 39 galerkin = 1.4883728548727397e-8\n[ Info: vumps @iteration 40 galerkin = 1.0608043223440726e-8\n[ Info: vumps @iteration 41 galerkin = 7.559725155794331e-9\n[ Info: vumps @iteration 42 galerkin = 5.386722742249971e-9\n[ Info: vumps @iteration 43 galerkin = 3.837825139527339e-9\n[ Info: vumps @iteration 44 galerkin = 2.7340492646210272e-9\n[ Info: vumps @iteration 45 galerkin = 1.9475785485254777e-9\n[ Info: vumps @iteration 46 galerkin = 1.387065841407004e-9\n[ Info: vumps @iteration 47 galerkin = 9.87858116149877e-10\n[ Info: vumps @iteration 48 galerkin = 7.036400649613467e-10\n[ Info: vumps @iteration 49 galerkin = 5.010363671379773e-10\n[ Info: vumps @iteration 50 galerkin = 3.5679544651306996e-10\n[ Info: vumps @iteration 51 galerkin = 2.540593022259859e-10\n[ Info: vumps @iteration 52 galerkin = 1.8077687745114808e-10\n[ Info: vumps @iteration 53 galerkin = 1.2886877062955604e-10\n[ Info: vumps @iteration 54 galerkin = 9.16729029727193e-11\n[ Info: vumps @iteration 55 galerkin = 6.521747268436945e-11\n[ Info: vumps @iteration 56 galerkin = 4.645808335364997e-11\n[ Info: vumps @iteration 57 galerkin = 3.303917177832644e-11\n[ Info: vumps @iteration 58 galerkin = 2.3534721152402163e-11\n[ Info: vumps @iteration 59 galerkin = 1.67075368301289e-11\n[ Info: vumps @iteration 60 galerkin = 1.1978436729163803e-11\n[ Info: vumps @iteration 61 galerkin = 8.58599072353772e-12\n[ Info: vumps @iteration 62 galerkin = 6.050342437344345e-12\n[ Info: vumps @iteration 63 galerkin = 4.230168489330012e-12\n[ Info: vumps @iteration 64 galerkin = 3.0209653791804435e-12\n[ Info: vumps @iteration 65 galerkin = 2.2943563087643904e-12\n[ Info: vumps @iteration 66 galerkin = 1.5358853707810685e-12\n[ Info: vumps @iteration 67 galerkin = 1.133541258426264e-12\n[ Info: vumps @iteration 68 galerkin = 7.982572192348798e-13\n","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"","category":"page"},{"location":"examples/quantum1d/4.xxz-heisenberg/","page":"The XXZ model","title":"The XXZ model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"EditURL = \"https://github.com/maartenvd/MPSKit.jl/examples/quantum1d/1.ising-cft/main.jl\"","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"examples/quantum1d/1.ising-cft/#The-Ising-CFT-spectrum","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"","category":"section"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"This tutorial is meant to show the finite size CFT spectrum for the quantum Ising model. We do this by first employing an exact diagonalization technique, and then extending the analysis to larger system sizes through the use of MPS techniques.","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"using MPSKit, MPSKitModels, TensorKit, Plots, KrylovKit\nusing LinearAlgebra: eigen, diagm, Hermitian\nimport TensorOperations; TensorOperations.disable_cache(); # hide","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"The hamiltonian is defined on a finite lattice with periodic boundary conditions, which can be implemented as follows:","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"L = 12\nH = periodic_boundary_conditions(transverse_field_ising(), L);","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"┌ Warning: failed to deduce all domspaces\n└ @ MPSKit ~/projects/MPSKit.jl/src/operators/sparsempo/sparsempo.jl:144\n","category":"page"},{"location":"examples/quantum1d/1.ising-cft/#Exact-diagonalisation","page":"The Ising CFT spectrum","title":"Exact diagonalisation","text":"","category":"section"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"In MPSKit, there is support for exact diagonalisation by leveraging the fact that applying the hamiltonian to an untruncated MPS will result in an effective hamiltonian on the center site which implements the action of the entire hamiltonian. Thus, optimizing the middle tensor is equivalent to optimixing a state in the entire Hilbert space, as all other tensors are just unitary matrices that mix the basis.","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"energies, states = exact_diagonalization(H, num=18, alg=Lanczos(krylovdim=200));\nplot(real.(energies), seriestype=:scatter, legend=false, ylabel=\"energy\", xlabel=\"#eigenvalue\")","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip250\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip250)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip251\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip250)\" d=\"M242.621 1423.18 L2352.76 1423.18 L2352.76 47.2441 L242.621 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip252\">\n    <rect x=\"242\" y=\"47\" width=\"2111\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"620.853,1423.18 620.853,47.2441 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1018.99,1423.18 1018.99,47.2441 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1417.13,1423.18 1417.13,47.2441 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1815.27,1423.18 1815.27,47.2441 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2213.41,1423.18 2213.41,47.2441 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.621,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"620.853,1423.18 620.853,1404.28 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1018.99,1423.18 1018.99,1404.28 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1417.13,1423.18 1417.13,1404.28 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1815.27,1423.18 1815.27,1404.28 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2213.41,1423.18 2213.41,1404.28 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M611.13 1451.02 L629.487 1451.02 L629.487 1454.96 L615.413 1454.96 L615.413 1463.43 Q616.431 1463.08 617.45 1462.92 Q618.468 1462.73 619.487 1462.73 Q625.274 1462.73 628.653 1465.9 Q632.033 1469.08 632.033 1474.49 Q632.033 1480.07 628.561 1483.17 Q625.089 1486.25 618.769 1486.25 Q616.593 1486.25 614.325 1485.88 Q612.079 1485.51 609.672 1484.77 L609.672 1480.07 Q611.755 1481.2 613.978 1481.76 Q616.2 1482.32 618.677 1482.32 Q622.681 1482.32 625.019 1480.21 Q627.357 1478.1 627.357 1474.49 Q627.357 1470.88 625.019 1468.77 Q622.681 1466.67 618.677 1466.67 Q616.802 1466.67 614.927 1467.08 Q613.075 1467.5 611.13 1468.38 L611.13 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M993.679 1481.64 L1001.32 1481.64 L1001.32 1455.28 L993.008 1456.95 L993.008 1452.69 L1001.27 1451.02 L1005.95 1451.02 L1005.95 1481.64 L1013.59 1481.64 L1013.59 1485.58 L993.679 1485.58 L993.679 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1033.03 1454.1 Q1029.42 1454.1 1027.59 1457.66 Q1025.79 1461.2 1025.79 1468.33 Q1025.79 1475.44 1027.59 1479.01 Q1029.42 1482.55 1033.03 1482.55 Q1036.66 1482.55 1038.47 1479.01 Q1040.3 1475.44 1040.3 1468.33 Q1040.3 1461.2 1038.47 1457.66 Q1036.66 1454.1 1033.03 1454.1 M1033.03 1450.39 Q1038.84 1450.39 1041.9 1455 Q1044.97 1459.58 1044.97 1468.33 Q1044.97 1477.06 1041.9 1481.67 Q1038.84 1486.25 1033.03 1486.25 Q1027.22 1486.25 1024.14 1481.67 Q1021.09 1477.06 1021.09 1468.33 Q1021.09 1459.58 1024.14 1455 Q1027.22 1450.39 1033.03 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1392.32 1481.64 L1399.95 1481.64 L1399.95 1455.28 L1391.64 1456.95 L1391.64 1452.69 L1399.91 1451.02 L1404.58 1451.02 L1404.58 1481.64 L1412.22 1481.64 L1412.22 1485.58 L1392.32 1485.58 L1392.32 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1421.71 1451.02 L1440.07 1451.02 L1440.07 1454.96 L1426 1454.96 L1426 1463.43 Q1427.01 1463.08 1428.03 1462.92 Q1429.05 1462.73 1430.07 1462.73 Q1435.86 1462.73 1439.24 1465.9 Q1442.62 1469.08 1442.62 1474.49 Q1442.62 1480.07 1439.14 1483.17 Q1435.67 1486.25 1429.35 1486.25 Q1427.18 1486.25 1424.91 1485.88 Q1422.66 1485.51 1420.25 1484.77 L1420.25 1480.07 Q1422.34 1481.2 1424.56 1481.76 Q1426.78 1482.32 1429.26 1482.32 Q1433.26 1482.32 1435.6 1480.21 Q1437.94 1478.1 1437.94 1474.49 Q1437.94 1470.88 1435.6 1468.77 Q1433.26 1466.67 1429.26 1466.67 Q1427.38 1466.67 1425.51 1467.08 Q1423.66 1467.5 1421.71 1468.38 L1421.71 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1794.04 1481.64 L1810.36 1481.64 L1810.36 1485.58 L1788.42 1485.58 L1788.42 1481.64 Q1791.08 1478.89 1795.66 1474.26 Q1800.27 1469.61 1801.45 1468.27 Q1803.69 1465.74 1804.57 1464.01 Q1805.48 1462.25 1805.48 1460.56 Q1805.48 1457.8 1803.53 1456.07 Q1801.61 1454.33 1798.51 1454.33 Q1796.31 1454.33 1793.86 1455.09 Q1791.43 1455.86 1788.65 1457.41 L1788.65 1452.69 Q1791.47 1451.55 1793.93 1450.97 Q1796.38 1450.39 1798.42 1450.39 Q1803.79 1450.39 1806.98 1453.08 Q1810.18 1455.77 1810.18 1460.26 Q1810.18 1462.39 1809.37 1464.31 Q1808.58 1466.2 1806.47 1468.8 Q1805.89 1469.47 1802.79 1472.69 Q1799.69 1475.88 1794.04 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1830.18 1454.1 Q1826.56 1454.1 1824.74 1457.66 Q1822.93 1461.2 1822.93 1468.33 Q1822.93 1475.44 1824.74 1479.01 Q1826.56 1482.55 1830.18 1482.55 Q1833.81 1482.55 1835.62 1479.01 Q1837.44 1475.44 1837.44 1468.33 Q1837.44 1461.2 1835.62 1457.66 Q1833.81 1454.1 1830.18 1454.1 M1830.18 1450.39 Q1835.99 1450.39 1839.04 1455 Q1842.12 1459.58 1842.12 1468.33 Q1842.12 1477.06 1839.04 1481.67 Q1835.99 1486.25 1830.18 1486.25 Q1824.37 1486.25 1821.29 1481.67 Q1818.23 1477.06 1818.23 1468.33 Q1818.23 1459.58 1821.29 1455 Q1824.37 1450.39 1830.18 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2192.68 1481.64 L2209 1481.64 L2209 1485.58 L2187.05 1485.58 L2187.05 1481.64 Q2189.72 1478.89 2194.3 1474.26 Q2198.91 1469.61 2200.09 1468.27 Q2202.33 1465.74 2203.21 1464.01 Q2204.11 1462.25 2204.11 1460.56 Q2204.11 1457.8 2202.17 1456.07 Q2200.25 1454.33 2197.15 1454.33 Q2194.95 1454.33 2192.49 1455.09 Q2190.06 1455.86 2187.28 1457.41 L2187.28 1452.69 Q2190.11 1451.55 2192.56 1450.97 Q2195.02 1450.39 2197.05 1450.39 Q2202.42 1450.39 2205.62 1453.08 Q2208.81 1455.77 2208.81 1460.26 Q2208.81 1462.39 2208 1464.31 Q2207.22 1466.2 2205.11 1468.8 Q2204.53 1469.47 2201.43 1472.69 Q2198.33 1475.88 2192.68 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2218.86 1451.02 L2237.22 1451.02 L2237.22 1454.96 L2223.14 1454.96 L2223.14 1463.43 Q2224.16 1463.08 2225.18 1462.92 Q2226.2 1462.73 2227.22 1462.73 Q2233 1462.73 2236.38 1465.9 Q2239.76 1469.08 2239.76 1474.49 Q2239.76 1480.07 2236.29 1483.17 Q2232.82 1486.25 2226.5 1486.25 Q2224.32 1486.25 2222.05 1485.88 Q2219.81 1485.51 2217.4 1484.77 L2217.4 1480.07 Q2219.48 1481.2 2221.71 1481.76 Q2223.93 1482.32 2226.4 1482.32 Q2230.41 1482.32 2232.75 1480.21 Q2235.09 1478.1 2235.09 1474.49 Q2235.09 1470.88 2232.75 1468.77 Q2230.41 1466.67 2226.4 1466.67 Q2224.53 1466.67 2222.65 1467.08 Q2220.8 1467.5 2218.86 1468.38 L2218.86 1451.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1123.4 1539.37 L1114.13 1539.37 L1111.46 1550 L1120.79 1550 L1123.4 1539.37 M1118.62 1521.26 L1115.31 1534.46 L1124.6 1534.46 L1127.95 1521.26 L1133.04 1521.26 L1129.76 1534.46 L1139.69 1534.46 L1139.69 1539.37 L1128.52 1539.37 L1125.91 1550 L1136.03 1550 L1136.03 1554.87 L1124.67 1554.87 L1121.36 1568.04 L1116.27 1568.04 L1119.54 1554.87 L1110.22 1554.87 L1106.94 1568.04 L1101.82 1568.04 L1105.13 1554.87 L1095.1 1554.87 L1095.1 1550 L1106.3 1550 L1108.98 1539.37 L1098.73 1539.37 L1098.73 1534.46 L1110.22 1534.46 L1113.46 1521.26 L1118.62 1521.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1181.32 1548.76 L1181.32 1551.62 L1154.4 1551.62 Q1154.78 1557.67 1158.02 1560.85 Q1161.3 1564 1167.13 1564 Q1170.5 1564 1173.65 1563.17 Q1176.84 1562.35 1179.95 1560.69 L1179.95 1566.23 Q1176.8 1567.57 1173.49 1568.27 Q1170.18 1568.97 1166.78 1568.97 Q1158.25 1568.97 1153.25 1564 Q1148.29 1559.04 1148.29 1550.57 Q1148.29 1541.82 1153 1536.69 Q1157.74 1531.54 1165.76 1531.54 Q1172.95 1531.54 1177.12 1536.18 Q1181.32 1540.8 1181.32 1548.76 M1175.47 1547.04 Q1175.4 1542.23 1172.76 1539.37 Q1170.15 1536.5 1165.82 1536.5 Q1160.92 1536.5 1157.96 1539.27 Q1155.03 1542.04 1154.59 1547.07 L1175.47 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1190.94 1532.4 L1196.79 1532.4 L1196.79 1568.04 L1190.94 1568.04 L1190.94 1532.4 M1190.94 1518.52 L1196.79 1518.52 L1196.79 1525.93 L1190.94 1525.93 L1190.94 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1232.5 1549.81 Q1232.5 1543.44 1229.86 1539.94 Q1227.25 1536.44 1222.51 1536.44 Q1217.8 1536.44 1215.16 1539.94 Q1212.55 1543.44 1212.55 1549.81 Q1212.55 1556.14 1215.16 1559.64 Q1217.8 1563.14 1222.51 1563.14 Q1227.25 1563.14 1229.86 1559.64 Q1232.5 1556.14 1232.5 1549.81 M1238.36 1563.62 Q1238.36 1572.72 1234.32 1577.15 Q1230.28 1581.6 1221.94 1581.6 Q1218.85 1581.6 1216.11 1581.13 Q1213.37 1580.68 1210.8 1579.72 L1210.8 1574.03 Q1213.37 1575.43 1215.89 1576.1 Q1218.4 1576.76 1221.01 1576.76 Q1226.77 1576.76 1229.64 1573.74 Q1232.5 1570.75 1232.5 1564.67 L1232.5 1561.77 Q1230.69 1564.92 1227.86 1566.48 Q1225.02 1568.04 1221.08 1568.04 Q1214.52 1568.04 1210.51 1563.05 Q1206.5 1558.05 1206.5 1549.81 Q1206.5 1541.53 1210.51 1536.53 Q1214.52 1531.54 1221.08 1531.54 Q1225.02 1531.54 1227.86 1533.1 Q1230.69 1534.66 1232.5 1537.81 L1232.5 1532.4 L1238.36 1532.4 L1238.36 1563.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1280.91 1548.76 L1280.91 1551.62 L1253.99 1551.62 Q1254.37 1557.67 1257.62 1560.85 Q1260.89 1564 1266.72 1564 Q1270.09 1564 1273.24 1563.17 Q1276.43 1562.35 1279.55 1560.69 L1279.55 1566.23 Q1276.4 1567.57 1273.08 1568.27 Q1269.77 1568.97 1266.37 1568.97 Q1257.84 1568.97 1252.84 1564 Q1247.88 1559.04 1247.88 1550.57 Q1247.88 1541.82 1252.59 1536.69 Q1257.33 1531.54 1265.35 1531.54 Q1272.54 1531.54 1276.71 1536.18 Q1280.91 1540.8 1280.91 1548.76 M1275.06 1547.04 Q1274.99 1542.23 1272.35 1539.37 Q1269.74 1536.5 1265.41 1536.5 Q1260.51 1536.5 1257.55 1539.27 Q1254.62 1542.04 1254.18 1547.07 L1275.06 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1320.16 1546.53 L1320.16 1568.04 L1314.3 1568.04 L1314.3 1546.72 Q1314.3 1541.66 1312.33 1539.14 Q1310.36 1536.63 1306.41 1536.63 Q1301.67 1536.63 1298.93 1539.65 Q1296.19 1542.68 1296.19 1547.9 L1296.19 1568.04 L1290.3 1568.04 L1290.3 1532.4 L1296.19 1532.4 L1296.19 1537.93 Q1298.29 1534.72 1301.13 1533.13 Q1303.99 1531.54 1307.71 1531.54 Q1313.86 1531.54 1317.01 1535.36 Q1320.16 1539.14 1320.16 1546.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1327.64 1532.4 L1333.85 1532.4 L1344.99 1562.31 L1356.13 1532.4 L1362.33 1532.4 L1348.96 1568.04 L1341.01 1568.04 L1327.64 1532.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1386.62 1550.12 Q1379.52 1550.12 1376.78 1551.75 Q1374.04 1553.37 1374.04 1557.29 Q1374.04 1560.4 1376.08 1562.25 Q1378.15 1564.07 1381.68 1564.07 Q1386.55 1564.07 1389.48 1560.63 Q1392.44 1557.16 1392.44 1551.43 L1392.44 1550.12 L1386.62 1550.12 M1398.3 1547.71 L1398.3 1568.04 L1392.44 1568.04 L1392.44 1562.63 Q1390.44 1565.88 1387.44 1567.44 Q1384.45 1568.97 1380.12 1568.97 Q1374.65 1568.97 1371.4 1565.91 Q1368.19 1562.82 1368.19 1557.67 Q1368.19 1551.65 1372.2 1548.6 Q1376.24 1545.54 1384.23 1545.54 L1392.44 1545.54 L1392.44 1544.97 Q1392.44 1540.93 1389.77 1538.73 Q1387.13 1536.5 1382.32 1536.5 Q1379.26 1536.5 1376.37 1537.23 Q1373.47 1537.97 1370.8 1539.43 L1370.8 1534.02 Q1374.01 1532.78 1377.04 1532.17 Q1380.06 1531.54 1382.93 1531.54 Q1390.66 1531.54 1394.48 1535.55 Q1398.3 1539.56 1398.3 1547.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1410.36 1518.52 L1416.22 1518.52 L1416.22 1568.04 L1410.36 1568.04 L1410.36 1518.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1427.87 1553.98 L1427.87 1532.4 L1433.72 1532.4 L1433.72 1553.75 Q1433.72 1558.81 1435.7 1561.36 Q1437.67 1563.87 1441.62 1563.87 Q1446.36 1563.87 1449.1 1560.85 Q1451.87 1557.83 1451.87 1552.61 L1451.87 1532.4 L1457.72 1532.4 L1457.72 1568.04 L1451.87 1568.04 L1451.87 1562.57 Q1449.73 1565.82 1446.9 1567.41 Q1444.1 1568.97 1440.38 1568.97 Q1434.23 1568.97 1431.05 1565.15 Q1427.87 1561.33 1427.87 1553.98 M1442.6 1531.54 L1442.6 1531.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1500.28 1548.76 L1500.28 1551.62 L1473.35 1551.62 Q1473.73 1557.67 1476.98 1560.85 Q1480.26 1564 1486.08 1564 Q1489.46 1564 1492.61 1563.17 Q1495.79 1562.35 1498.91 1560.69 L1498.91 1566.23 Q1495.76 1567.57 1492.45 1568.27 Q1489.14 1568.97 1485.73 1568.97 Q1477.2 1568.97 1472.2 1564 Q1467.24 1559.04 1467.24 1550.57 Q1467.24 1541.82 1471.95 1536.69 Q1476.69 1531.54 1484.71 1531.54 Q1491.91 1531.54 1496.08 1536.18 Q1500.28 1540.8 1500.28 1548.76 M1494.42 1547.04 Q1494.36 1542.23 1491.72 1539.37 Q1489.11 1536.5 1484.78 1536.5 Q1479.87 1536.5 1476.91 1539.27 Q1473.99 1542.04 1473.54 1547.07 L1494.42 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"242.621,1270.93 2352.76,1270.93 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"242.621,919.676 2352.76,919.676 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"242.621,568.426 2352.76,568.426 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"242.621,217.175 2352.76,217.175 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.621,1423.18 242.621,47.2441 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.621,1270.93 261.518,1270.93 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.621,919.676 261.518,919.676 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.621,568.426 261.518,568.426 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"242.621,217.175 261.518,217.175 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M115.742 1271.38 L145.417 1271.38 L145.417 1275.31 L115.742 1275.31 L115.742 1271.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M156.32 1284.27 L163.959 1284.27 L163.959 1257.91 L155.649 1259.57 L155.649 1255.31 L163.913 1253.65 L168.589 1253.65 L168.589 1284.27 L176.227 1284.27 L176.227 1288.21 L156.32 1288.21 L156.32 1284.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M185.718 1253.65 L204.074 1253.65 L204.074 1257.58 L190 1257.58 L190 1266.05 Q191.019 1265.71 192.038 1265.54 Q193.056 1265.36 194.075 1265.36 Q199.862 1265.36 203.241 1268.53 Q206.621 1271.7 206.621 1277.12 Q206.621 1282.7 203.149 1285.8 Q199.676 1288.88 193.357 1288.88 Q191.181 1288.88 188.913 1288.51 Q186.667 1288.14 184.26 1287.4 L184.26 1282.7 Q186.343 1283.83 188.565 1284.39 Q190.788 1284.94 193.264 1284.94 Q197.269 1284.94 199.607 1282.84 Q201.945 1280.73 201.945 1277.12 Q201.945 1273.51 199.607 1271.4 Q197.269 1269.29 193.264 1269.29 Q191.389 1269.29 189.514 1269.71 Q187.663 1270.13 185.718 1271.01 L185.718 1253.65 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M114.26 920.127 L143.936 920.127 L143.936 924.063 L114.26 924.063 L114.26 920.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M154.839 933.021 L162.477 933.021 L162.477 906.655 L154.167 908.322 L154.167 904.063 L162.431 902.396 L167.107 902.396 L167.107 933.021 L174.746 933.021 L174.746 936.956 L154.839 936.956 L154.839 933.021 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M197.037 906.47 L185.232 924.919 L197.037 924.919 L197.037 906.47 M195.811 902.396 L201.69 902.396 L201.69 924.919 L206.621 924.919 L206.621 928.808 L201.69 928.808 L201.69 936.956 L197.037 936.956 L197.037 928.808 L181.436 928.808 L181.436 924.294 L195.811 902.396 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M115.394 568.877 L145.07 568.877 L145.07 572.812 L115.394 572.812 L115.394 568.877 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M155.973 581.77 L163.612 581.77 L163.612 555.405 L155.302 557.071 L155.302 552.812 L163.565 551.146 L168.241 551.146 L168.241 581.77 L175.88 581.77 L175.88 585.706 L155.973 585.706 L155.973 581.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M199.491 567.071 Q202.848 567.789 204.723 570.057 Q206.621 572.326 206.621 575.659 Q206.621 580.775 203.102 583.576 Q199.584 586.377 193.102 586.377 Q190.926 586.377 188.612 585.937 Q186.32 585.52 183.866 584.664 L183.866 580.15 Q185.811 581.284 188.126 581.863 Q190.44 582.442 192.963 582.442 Q197.362 582.442 199.653 580.706 Q201.968 578.969 201.968 575.659 Q201.968 572.604 199.815 570.891 Q197.686 569.155 193.866 569.155 L189.838 569.155 L189.838 565.312 L194.051 565.312 Q197.5 565.312 199.329 563.946 Q201.158 562.558 201.158 559.965 Q201.158 557.303 199.26 555.891 Q197.385 554.456 193.866 554.456 Q191.945 554.456 189.746 554.872 Q187.547 555.289 184.908 556.169 L184.908 552.002 Q187.57 551.261 189.885 550.891 Q192.223 550.521 194.283 550.521 Q199.607 550.521 202.709 552.951 Q205.811 555.358 205.811 559.479 Q205.811 562.349 204.167 564.34 Q202.524 566.308 199.491 567.071 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M116.343 217.626 L146.019 217.626 L146.019 221.562 L116.343 221.562 L116.343 217.626 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M156.922 230.52 L164.561 230.52 L164.561 204.154 L156.251 205.821 L156.251 201.562 L164.515 199.895 L169.19 199.895 L169.19 230.52 L176.829 230.52 L176.829 234.455 L156.922 234.455 L156.922 230.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M190.301 230.52 L206.621 230.52 L206.621 234.455 L184.676 234.455 L184.676 230.52 Q187.338 227.765 191.922 223.136 Q196.528 218.483 197.709 217.14 Q199.954 214.617 200.834 212.881 Q201.737 211.122 201.737 209.432 Q201.737 206.677 199.792 204.941 Q197.871 203.205 194.769 203.205 Q192.57 203.205 190.116 203.969 Q187.686 204.733 184.908 206.284 L184.908 201.562 Q187.732 200.427 190.186 199.849 Q192.639 199.27 194.676 199.27 Q200.047 199.27 203.241 201.955 Q206.436 204.64 206.436 209.131 Q206.436 211.261 205.625 213.182 Q204.838 215.08 202.732 217.673 Q202.153 218.344 199.051 221.562 Q195.95 224.756 190.301 230.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M44.7161 812.969 L47.5806 812.969 L47.5806 839.896 Q53.6281 839.514 56.8109 836.268 Q59.9619 832.989 59.9619 827.165 Q59.9619 823.791 59.1344 820.64 Q58.3069 817.457 56.6518 814.338 L62.1899 814.338 Q63.5267 817.489 64.227 820.799 Q64.9272 824.109 64.9272 827.515 Q64.9272 836.045 59.9619 841.042 Q54.9967 846.007 46.5303 846.007 Q37.7774 846.007 32.6531 841.296 Q27.4968 836.554 27.4968 828.533 Q27.4968 821.34 32.1438 817.17 Q36.7589 812.969 44.7161 812.969 M42.9973 818.826 Q38.1912 818.889 35.3266 821.531 Q32.4621 824.141 32.4621 828.47 Q32.4621 833.371 35.2312 836.331 Q38.0002 839.259 43.0292 839.705 L42.9973 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M42.4881 773.724 L64.0042 773.724 L64.0042 779.581 L42.679 779.581 Q37.6183 779.581 35.1038 781.554 Q32.5894 783.528 32.5894 787.474 Q32.5894 792.217 35.6131 794.954 Q38.6368 797.691 43.8567 797.691 L64.0042 797.691 L64.0042 803.58 L28.3562 803.58 L28.3562 797.691 L33.8944 797.691 Q30.6797 795.591 29.0883 792.758 Q27.4968 789.893 27.4968 786.169 Q27.4968 780.027 31.3163 776.876 Q35.1038 773.724 42.4881 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M44.7161 731.552 L47.5806 731.552 L47.5806 758.479 Q53.6281 758.097 56.8109 754.85 Q59.9619 751.572 59.9619 745.747 Q59.9619 742.373 59.1344 739.222 Q58.3069 736.04 56.6518 732.92 L62.1899 732.92 Q63.5267 736.071 64.227 739.382 Q64.9272 742.692 64.9272 746.097 Q64.9272 754.627 59.9619 759.624 Q54.9967 764.59 46.5303 764.59 Q37.7774 764.59 32.6531 759.879 Q27.4968 755.137 27.4968 747.116 Q27.4968 739.923 32.1438 735.753 Q36.7589 731.552 44.7161 731.552 M42.9973 737.408 Q38.1912 737.472 35.3266 740.114 Q32.4621 742.724 32.4621 747.052 Q32.4621 751.954 35.2312 754.914 Q38.0002 757.842 43.0292 758.288 L42.9973 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M33.8307 701.283 Q33.2578 702.269 33.0032 703.447 Q32.7167 704.593 32.7167 705.993 Q32.7167 710.959 35.9632 713.632 Q39.1779 716.274 45.2253 716.274 L64.0042 716.274 L64.0042 722.162 L28.3562 722.162 L28.3562 716.274 L33.8944 716.274 Q30.6479 714.428 29.0883 711.468 Q27.4968 708.508 27.4968 704.275 Q27.4968 703.67 27.5923 702.938 Q27.656 702.206 27.8151 701.315 L33.8307 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M45.7664 672.828 Q39.4007 672.828 35.8996 675.47 Q32.3984 678.08 32.3984 682.822 Q32.3984 687.533 35.8996 690.175 Q39.4007 692.785 45.7664 692.785 Q52.1003 692.785 55.6014 690.175 Q59.1026 687.533 59.1026 682.822 Q59.1026 678.08 55.6014 675.47 Q52.1003 672.828 45.7664 672.828 M59.58 666.972 Q68.683 666.972 73.1071 671.014 Q77.5631 675.056 77.5631 683.395 Q77.5631 686.482 77.0857 689.22 Q76.6401 691.957 75.6852 694.535 L69.9879 694.535 Q71.3884 691.957 72.0568 689.443 Q72.7252 686.928 72.7252 684.318 Q72.7252 678.557 69.7015 675.693 Q66.7096 672.828 60.6303 672.828 L57.7339 672.828 Q60.885 674.642 62.4446 677.475 Q64.0042 680.308 64.0042 684.254 Q64.0042 690.811 59.0071 694.822 Q54.01 698.832 45.7664 698.832 Q37.491 698.832 32.4939 694.822 Q27.4968 690.811 27.4968 684.254 Q27.4968 680.308 29.0564 677.475 Q30.616 674.642 33.7671 672.828 L28.3562 672.828 L28.3562 666.972 L59.58 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M67.3143 640.076 Q73.68 642.559 75.6216 644.914 Q77.5631 647.27 77.5631 651.216 L77.5631 655.895 L72.6615 655.895 L72.6615 652.458 Q72.6615 650.039 71.5157 648.702 Q70.3699 647.365 66.1048 645.742 L63.4312 644.692 L28.3562 659.11 L28.3562 652.903 L56.238 641.763 L28.3562 630.623 L28.3562 624.417 L67.3143 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip252)\" cx=\"302.342\" cy=\"1384.24\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"381.969\" cy=\"1338.19\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"461.597\" cy=\"1017.46\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"541.225\" cy=\"974.553\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"620.853\" cy=\"974.553\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"700.48\" cy=\"663.178\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"780.108\" cy=\"663.178\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"859.736\" cy=\"663.178\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"939.364\" cy=\"663.178\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1018.99\" cy=\"635.693\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1098.62\" cy=\"635.693\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1178.25\" cy=\"610.911\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1257.87\" cy=\"345.538\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1337.5\" cy=\"345.538\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1417.13\" cy=\"345.538\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1496.76\" cy=\"345.538\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1576.39\" cy=\"344.707\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1656.01\" cy=\"344.707\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1735.64\" cy=\"308.896\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1815.27\" cy=\"272.052\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1894.9\" cy=\"272.052\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"1974.52\" cy=\"272.052\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"2054.15\" cy=\"272.052\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"2133.78\" cy=\"121.426\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"2213.41\" cy=\"121.426\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip252)\" cx=\"2293.04\" cy=\"86.1857\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n</svg>\n","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"note: Krylov dimension\nNote that we have specified a large Krylov dimension as degenerate eigenvalues are notoriously difficult for iterative methods.","category":"page"},{"location":"examples/quantum1d/1.ising-cft/#Extracting-momentum","page":"The Ising CFT spectrum","title":"Extracting momentum","text":"","category":"section"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"Given a state, it is possible to assign a momentum label through the use of the translation operator. This operator can be defined in MPO language either diagramatically as","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"(Image: translation operator MPO)","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"or in the code as:","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"id = complex(isomorphism(ℂ^2, ℂ^2))\n@tensor O[-1 -2; -3 -4] := id[-1, -3] * id[-2, -4]\nT = periodic_boundary_conditions(DenseMPO(O), L);","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"We can then calculate the momentum of the groundstate as the expectation value of this operator. However, there is a subtlety because of the degeneracies in the energy eigenvalues. The eigensolver will find an orthonormal basis within each energy subspace, but this basis is not necessarily a basis of eigenstates of the translation operator. In order to fix this, we diagonalize the translation operator within each energy subspace.","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"momentum(ψᵢ, ψⱼ=ψᵢ) = angle(dot(ψᵢ, T * ψⱼ))\n\nfunction fix_degeneracies(basis)\n    N = zeros(ComplexF64, length(basis), length(basis))\n    M = zeros(ComplexF64, length(basis), length(basis))\n    for i in eachindex(basis), j in eachindex(basis)\n        N[i, j] = dot(basis[i], basis[j])\n        M[i, j] = momentum(basis[i], basis[j])\n    end\n\n    vals, vecs = eigen(Hermitian(N))\n    M = (vecs' * M * vecs)\n    M /= diagm(vals)\n\n    vals, vecs = eigen(M)\n    return angle.(vals)\nend\n\nmomenta = Float64[]\nappend!(momenta, fix_degeneracies(states[1:1]))\nappend!(momenta, fix_degeneracies(states[2:2]))\nappend!(momenta, fix_degeneracies(states[3:3]))\nappend!(momenta, fix_degeneracies(states[4:5]))\nappend!(momenta, fix_degeneracies(states[6:9]))\nappend!(momenta, fix_degeneracies(states[10:11]))\nappend!(momenta, fix_degeneracies(states[12:12]))\nappend!(momenta, fix_degeneracies(states[13:16]))\nappend!(momenta, fix_degeneracies(states[17:18]))\n\nplot(momenta, real.(energies[1:18]), seriestype=:scatter, xlabel=\"momentum\", ylabel=\"energy\", legend=false)","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip280\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip281\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M287.366 1423.18 L2352.76 1423.18 L2352.76 47.2441 L287.366 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip282\">\n    <rect x=\"287\" y=\"47\" width=\"2066\" height=\"1377\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"389.73,1423.18 389.73,47.2441 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"699.84,1423.18 699.84,47.2441 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1009.95,1423.18 1009.95,47.2441 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1320.06,1423.18 1320.06,47.2441 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1630.17,1423.18 1630.17,47.2441 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1940.28,1423.18 1940.28,47.2441 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2250.39,1423.18 2250.39,47.2441 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"287.366,1423.18 2352.76,1423.18 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"389.73,1423.18 389.73,1404.28 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"699.84,1423.18 699.84,1404.28 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1009.95,1423.18 1009.95,1404.28 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1320.06,1423.18 1320.06,1404.28 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1630.17,1423.18 1630.17,1404.28 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1940.28,1423.18 1940.28,1404.28 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2250.39,1423.18 2250.39,1404.28 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M359.197 1468.75 L388.873 1468.75 L388.873 1472.69 L359.197 1472.69 L359.197 1468.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M413.132 1466.95 Q416.489 1467.66 418.364 1469.93 Q420.262 1472.2 420.262 1475.53 Q420.262 1480.65 416.743 1483.45 Q413.225 1486.25 406.743 1486.25 Q404.568 1486.25 402.253 1485.81 Q399.961 1485.39 397.507 1484.54 L397.507 1480.02 Q399.452 1481.16 401.767 1481.74 Q404.081 1482.32 406.605 1482.32 Q411.003 1482.32 413.294 1480.58 Q415.609 1478.84 415.609 1475.53 Q415.609 1472.48 413.456 1470.77 Q411.327 1469.03 407.507 1469.03 L403.48 1469.03 L403.48 1465.19 L407.693 1465.19 Q411.142 1465.19 412.97 1463.82 Q414.799 1462.43 414.799 1459.84 Q414.799 1457.18 412.901 1455.77 Q411.026 1454.33 407.507 1454.33 Q405.586 1454.33 403.387 1454.75 Q401.188 1455.16 398.549 1456.04 L398.549 1451.88 Q401.211 1451.14 403.526 1450.77 Q405.864 1450.39 407.924 1450.39 Q413.248 1450.39 416.35 1452.83 Q419.452 1455.23 419.452 1459.35 Q419.452 1462.22 417.808 1464.21 Q416.165 1466.18 413.132 1466.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M669.782 1468.75 L699.458 1468.75 L699.458 1472.69 L669.782 1472.69 L669.782 1468.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M713.578 1481.64 L729.898 1481.64 L729.898 1485.58 L707.953 1485.58 L707.953 1481.64 Q710.616 1478.89 715.199 1474.26 Q719.805 1469.61 720.986 1468.27 Q723.231 1465.74 724.111 1464.01 Q725.014 1462.25 725.014 1460.56 Q725.014 1457.8 723.069 1456.07 Q721.148 1454.33 718.046 1454.33 Q715.847 1454.33 713.393 1455.09 Q710.963 1455.86 708.185 1457.41 L708.185 1452.69 Q711.009 1451.55 713.463 1450.97 Q715.916 1450.39 717.953 1450.39 Q723.324 1450.39 726.518 1453.08 Q729.713 1455.77 729.713 1460.26 Q729.713 1462.39 728.902 1464.31 Q728.115 1466.2 726.009 1468.8 Q725.43 1469.47 722.328 1472.69 Q719.227 1475.88 713.578 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M979.708 1468.75 L1009.38 1468.75 L1009.38 1472.69 L979.708 1472.69 L979.708 1468.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1020.29 1481.64 L1027.92 1481.64 L1027.92 1455.28 L1019.61 1456.95 L1019.61 1452.69 L1027.88 1451.02 L1032.55 1451.02 L1032.55 1481.64 L1040.19 1481.64 L1040.19 1485.58 L1020.29 1485.58 L1020.29 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1320.06 1454.1 Q1316.45 1454.1 1314.62 1457.66 Q1312.82 1461.2 1312.82 1468.33 Q1312.82 1475.44 1314.62 1479.01 Q1316.45 1482.55 1320.06 1482.55 Q1323.7 1482.55 1325.5 1479.01 Q1327.33 1475.44 1327.33 1468.33 Q1327.33 1461.2 1325.5 1457.66 Q1323.7 1454.1 1320.06 1454.1 M1320.06 1450.39 Q1325.87 1450.39 1328.93 1455 Q1332.01 1459.58 1332.01 1468.33 Q1332.01 1477.06 1328.93 1481.67 Q1325.87 1486.25 1320.06 1486.25 Q1314.25 1486.25 1311.17 1481.67 Q1308.12 1477.06 1308.12 1468.33 Q1308.12 1459.58 1311.17 1455 Q1314.25 1450.39 1320.06 1450.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1620.55 1481.64 L1628.19 1481.64 L1628.19 1455.28 L1619.88 1456.95 L1619.88 1452.69 L1628.15 1451.02 L1632.82 1451.02 L1632.82 1481.64 L1640.46 1481.64 L1640.46 1485.58 L1620.55 1485.58 L1620.55 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1934.93 1481.64 L1951.25 1481.64 L1951.25 1485.58 L1929.31 1485.58 L1929.31 1481.64 Q1931.97 1478.89 1936.55 1474.26 Q1941.16 1469.61 1942.34 1468.27 Q1944.59 1465.74 1945.47 1464.01 Q1946.37 1462.25 1946.37 1460.56 Q1946.37 1457.8 1944.43 1456.07 Q1942.5 1454.33 1939.4 1454.33 Q1937.2 1454.33 1934.75 1455.09 Q1932.32 1455.86 1929.54 1457.41 L1929.54 1452.69 Q1932.37 1451.55 1934.82 1450.97 Q1937.27 1450.39 1939.31 1450.39 Q1944.68 1450.39 1947.87 1453.08 Q1951.07 1455.77 1951.07 1460.26 Q1951.07 1462.39 1950.26 1464.31 Q1949.47 1466.2 1947.37 1468.8 Q1946.79 1469.47 1943.68 1472.69 Q1940.58 1475.88 1934.93 1481.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2254.64 1466.95 Q2258 1467.66 2259.87 1469.93 Q2261.77 1472.2 2261.77 1475.53 Q2261.77 1480.65 2258.25 1483.45 Q2254.73 1486.25 2248.25 1486.25 Q2246.08 1486.25 2243.76 1485.81 Q2241.47 1485.39 2239.01 1484.54 L2239.01 1480.02 Q2240.96 1481.16 2243.27 1481.74 Q2245.59 1482.32 2248.11 1482.32 Q2252.51 1482.32 2254.8 1480.58 Q2257.12 1478.84 2257.12 1475.53 Q2257.12 1472.48 2254.96 1470.77 Q2252.83 1469.03 2249.01 1469.03 L2244.99 1469.03 L2244.99 1465.19 L2249.2 1465.19 Q2252.65 1465.19 2254.48 1463.82 Q2256.31 1462.43 2256.31 1459.84 Q2256.31 1457.18 2254.41 1455.77 Q2252.53 1454.33 2249.01 1454.33 Q2247.09 1454.33 2244.89 1454.75 Q2242.7 1455.16 2240.06 1456.04 L2240.06 1451.88 Q2242.72 1451.14 2245.03 1450.77 Q2247.37 1450.39 2249.43 1450.39 Q2254.76 1450.39 2257.86 1452.83 Q2260.96 1455.23 2260.96 1459.35 Q2260.96 1462.22 2259.32 1464.21 Q2257.67 1466.18 2254.64 1466.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1164.44 1539.24 Q1166.63 1535.29 1169.69 1533.41 Q1172.74 1531.54 1176.88 1531.54 Q1182.45 1531.54 1185.47 1535.45 Q1188.5 1539.33 1188.5 1546.53 L1188.5 1568.04 L1182.61 1568.04 L1182.61 1546.72 Q1182.61 1541.59 1180.8 1539.11 Q1178.98 1536.63 1175.26 1536.63 Q1170.71 1536.63 1168.06 1539.65 Q1165.42 1542.68 1165.42 1547.9 L1165.42 1568.04 L1159.53 1568.04 L1159.53 1546.72 Q1159.53 1541.56 1157.72 1539.11 Q1155.91 1536.63 1152.12 1536.63 Q1147.63 1536.63 1144.99 1539.68 Q1142.35 1542.71 1142.35 1547.9 L1142.35 1568.04 L1136.46 1568.04 L1136.46 1532.4 L1142.35 1532.4 L1142.35 1537.93 Q1144.35 1534.66 1147.15 1533.1 Q1149.95 1531.54 1153.8 1531.54 Q1157.69 1531.54 1160.39 1533.51 Q1163.13 1535.48 1164.44 1539.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1213.99 1536.5 Q1209.28 1536.5 1206.54 1540.19 Q1203.81 1543.85 1203.81 1550.25 Q1203.81 1556.65 1206.51 1560.34 Q1209.25 1564 1213.99 1564 Q1218.67 1564 1221.41 1560.31 Q1224.15 1556.62 1224.15 1550.25 Q1224.15 1543.92 1221.41 1540.23 Q1218.67 1536.5 1213.99 1536.5 M1213.99 1531.54 Q1221.63 1531.54 1225.99 1536.5 Q1230.35 1541.47 1230.35 1550.25 Q1230.35 1559 1225.99 1564 Q1221.63 1568.97 1213.99 1568.97 Q1206.32 1568.97 1201.96 1564 Q1197.63 1559 1197.63 1550.25 Q1197.63 1541.47 1201.96 1536.5 Q1206.32 1531.54 1213.99 1531.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1267.81 1539.24 Q1270.01 1535.29 1273.07 1533.41 Q1276.12 1531.54 1280.26 1531.54 Q1285.83 1531.54 1288.85 1535.45 Q1291.88 1539.33 1291.88 1546.53 L1291.88 1568.04 L1285.99 1568.04 L1285.99 1546.72 Q1285.99 1541.59 1284.17 1539.11 Q1282.36 1536.63 1278.64 1536.63 Q1274.08 1536.63 1271.44 1539.65 Q1268.8 1542.68 1268.8 1547.9 L1268.8 1568.04 L1262.91 1568.04 L1262.91 1546.72 Q1262.91 1541.56 1261.1 1539.11 Q1259.28 1536.63 1255.5 1536.63 Q1251.01 1536.63 1248.37 1539.68 Q1245.73 1542.71 1245.73 1547.9 L1245.73 1568.04 L1239.84 1568.04 L1239.84 1532.4 L1245.73 1532.4 L1245.73 1537.93 Q1247.73 1534.66 1250.53 1533.1 Q1253.33 1531.54 1257.18 1531.54 Q1261.07 1531.54 1263.77 1533.51 Q1266.51 1535.48 1267.81 1539.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1334.05 1548.76 L1334.05 1551.62 L1307.12 1551.62 Q1307.5 1557.67 1310.75 1560.85 Q1314.03 1564 1319.85 1564 Q1323.23 1564 1326.38 1563.17 Q1329.56 1562.35 1332.68 1560.69 L1332.68 1566.23 Q1329.53 1567.57 1326.22 1568.27 Q1322.91 1568.97 1319.5 1568.97 Q1310.97 1568.97 1305.98 1564 Q1301.01 1559.04 1301.01 1550.57 Q1301.01 1541.82 1305.72 1536.69 Q1310.46 1531.54 1318.49 1531.54 Q1325.68 1531.54 1329.85 1536.18 Q1334.05 1540.8 1334.05 1548.76 M1328.19 1547.04 Q1328.13 1542.23 1325.49 1539.37 Q1322.88 1536.5 1318.55 1536.5 Q1313.65 1536.5 1310.69 1539.27 Q1307.76 1542.04 1307.31 1547.07 L1328.19 1547.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1373.29 1546.53 L1373.29 1568.04 L1367.44 1568.04 L1367.44 1546.72 Q1367.44 1541.66 1365.46 1539.14 Q1363.49 1536.63 1359.54 1536.63 Q1354.8 1536.63 1352.06 1539.65 Q1349.33 1542.68 1349.33 1547.9 L1349.33 1568.04 L1343.44 1568.04 L1343.44 1532.4 L1349.33 1532.4 L1349.33 1537.93 Q1351.43 1534.72 1354.26 1533.13 Q1357.13 1531.54 1360.85 1531.54 Q1366.99 1531.54 1370.14 1535.36 Q1373.29 1539.14 1373.29 1546.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1390.77 1522.27 L1390.77 1532.4 L1402.83 1532.4 L1402.83 1536.95 L1390.77 1536.95 L1390.77 1556.3 Q1390.77 1560.66 1391.95 1561.9 Q1393.16 1563.14 1396.82 1563.14 L1402.83 1563.14 L1402.83 1568.04 L1396.82 1568.04 Q1390.04 1568.04 1387.46 1565.53 Q1384.88 1562.98 1384.88 1556.3 L1384.88 1536.95 L1380.58 1536.95 L1380.58 1532.4 L1384.88 1532.4 L1384.88 1522.27 L1390.77 1522.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1409.93 1553.98 L1409.93 1532.4 L1415.79 1532.4 L1415.79 1553.75 Q1415.79 1558.81 1417.76 1561.36 Q1419.73 1563.87 1423.68 1563.87 Q1428.42 1563.87 1431.16 1560.85 Q1433.93 1557.83 1433.93 1552.61 L1433.93 1532.4 L1439.78 1532.4 L1439.78 1568.04 L1433.93 1568.04 L1433.93 1562.57 Q1431.79 1565.82 1428.96 1567.41 Q1426.16 1568.97 1422.44 1568.97 Q1416.29 1568.97 1413.11 1565.15 Q1409.93 1561.33 1409.93 1553.98 M1424.67 1531.54 L1424.67 1531.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1479.6 1539.24 Q1481.8 1535.29 1484.85 1533.41 Q1487.91 1531.54 1492.05 1531.54 Q1497.62 1531.54 1500.64 1535.45 Q1503.66 1539.33 1503.66 1546.53 L1503.66 1568.04 L1497.78 1568.04 L1497.78 1546.72 Q1497.78 1541.59 1495.96 1539.11 Q1494.15 1536.63 1490.42 1536.63 Q1485.87 1536.63 1483.23 1539.65 Q1480.59 1542.68 1480.59 1547.9 L1480.59 1568.04 L1474.7 1568.04 L1474.7 1546.72 Q1474.7 1541.56 1472.89 1539.11 Q1471.07 1536.63 1467.28 1536.63 Q1462.8 1536.63 1460.15 1539.68 Q1457.51 1542.71 1457.51 1547.9 L1457.51 1568.04 L1451.62 1568.04 L1451.62 1532.4 L1457.51 1532.4 L1457.51 1537.93 Q1459.52 1534.66 1462.32 1533.1 Q1465.12 1531.54 1468.97 1531.54 Q1472.85 1531.54 1475.56 1533.51 Q1478.3 1535.48 1479.6 1539.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"287.366,1242.75 2352.76,1242.75 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"287.366,1023.45 2352.76,1023.45 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"287.366,804.144 2352.76,804.144 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"287.366,584.842 2352.76,584.842 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"287.366,365.54 2352.76,365.54 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"287.366,146.239 2352.76,146.239 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"287.366,1423.18 287.366,47.2441 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"287.366,1242.75 306.264,1242.75 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"287.366,1023.45 306.264,1023.45 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"287.366,804.144 306.264,804.144 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"287.366,584.842 306.264,584.842 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"287.366,365.54 306.264,365.54 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"287.366,146.239 306.264,146.239 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M114.26 1243.2 L143.936 1243.2 L143.936 1247.13 L114.26 1247.13 L114.26 1243.2 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M154.839 1256.09 L162.477 1256.09 L162.477 1229.73 L154.167 1231.39 L154.167 1227.13 L162.431 1225.47 L167.107 1225.47 L167.107 1256.09 L174.746 1256.09 L174.746 1260.03 L154.839 1260.03 L154.839 1256.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M184.237 1225.47 L202.593 1225.47 L202.593 1229.4 L188.519 1229.4 L188.519 1237.87 Q189.538 1237.53 190.556 1237.37 Q191.575 1237.18 192.593 1237.18 Q198.38 1237.18 201.76 1240.35 Q205.139 1243.52 205.139 1248.94 Q205.139 1254.52 201.667 1257.62 Q198.195 1260.7 191.875 1260.7 Q189.7 1260.7 187.431 1260.33 Q185.186 1259.96 182.778 1259.22 L182.778 1254.52 Q184.862 1255.65 187.084 1256.21 Q189.306 1256.76 191.783 1256.76 Q195.787 1256.76 198.125 1254.66 Q200.463 1252.55 200.463 1248.94 Q200.463 1245.33 198.125 1243.22 Q195.787 1241.12 191.783 1241.12 Q189.908 1241.12 188.033 1241.53 Q186.181 1241.95 184.237 1242.83 L184.237 1225.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M214.352 1254.15 L219.236 1254.15 L219.236 1260.03 L214.352 1260.03 L214.352 1254.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M239.422 1228.55 Q235.81 1228.55 233.982 1232.11 Q232.176 1235.65 232.176 1242.78 Q232.176 1249.89 233.982 1253.45 Q235.81 1256.99 239.422 1256.99 Q243.056 1256.99 244.861 1253.45 Q246.69 1249.89 246.69 1242.78 Q246.69 1235.65 244.861 1232.11 Q243.056 1228.55 239.422 1228.55 M239.422 1224.84 Q245.232 1224.84 248.287 1229.45 Q251.366 1234.03 251.366 1242.78 Q251.366 1251.51 248.287 1256.11 Q245.232 1260.7 239.422 1260.7 Q233.611 1260.7 230.533 1256.11 Q227.477 1251.51 227.477 1242.78 Q227.477 1234.03 230.533 1229.45 Q233.611 1224.84 239.422 1224.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M115.256 1023.9 L144.931 1023.9 L144.931 1027.83 L115.256 1027.83 L115.256 1023.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M155.834 1036.79 L163.473 1036.79 L163.473 1010.42 L155.163 1012.09 L155.163 1007.83 L163.427 1006.17 L168.102 1006.17 L168.102 1036.79 L175.741 1036.79 L175.741 1040.73 L155.834 1040.73 L155.834 1036.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M198.033 1010.24 L186.227 1028.69 L198.033 1028.69 L198.033 1010.24 M196.806 1006.17 L202.686 1006.17 L202.686 1028.69 L207.616 1028.69 L207.616 1032.58 L202.686 1032.58 L202.686 1040.73 L198.033 1040.73 L198.033 1032.58 L182.431 1032.58 L182.431 1028.06 L196.806 1006.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M215.348 1034.85 L220.232 1034.85 L220.232 1040.73 L215.348 1040.73 L215.348 1034.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M230.463 1006.17 L248.82 1006.17 L248.82 1010.1 L234.746 1010.1 L234.746 1018.57 Q235.764 1018.23 236.783 1018.06 Q237.801 1017.88 238.82 1017.88 Q244.607 1017.88 247.986 1021.05 Q251.366 1024.22 251.366 1029.64 Q251.366 1035.22 247.894 1038.32 Q244.421 1041.4 238.102 1041.4 Q235.926 1041.4 233.658 1041.03 Q231.412 1040.66 229.005 1039.92 L229.005 1035.22 Q231.088 1036.35 233.31 1036.91 Q235.533 1037.46 238.009 1037.46 Q242.014 1037.46 244.352 1035.35 Q246.69 1033.25 246.69 1029.64 Q246.69 1026.03 244.352 1023.92 Q242.014 1021.81 238.009 1021.81 Q236.135 1021.81 234.26 1022.23 Q232.408 1022.65 230.463 1023.53 L230.463 1006.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M114.26 804.595 L143.936 804.595 L143.936 808.53 L114.26 808.53 L114.26 804.595 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M154.839 817.489 L162.477 817.489 L162.477 791.123 L154.167 792.79 L154.167 788.53 L162.431 786.864 L167.107 786.864 L167.107 817.489 L174.746 817.489 L174.746 821.424 L154.839 821.424 L154.839 817.489 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M197.037 790.938 L185.232 809.387 L197.037 809.387 L197.037 790.938 M195.811 786.864 L201.69 786.864 L201.69 809.387 L206.621 809.387 L206.621 813.276 L201.69 813.276 L201.69 821.424 L197.037 821.424 L197.037 813.276 L181.436 813.276 L181.436 808.762 L195.811 786.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M214.352 815.544 L219.236 815.544 L219.236 821.424 L214.352 821.424 L214.352 815.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M239.422 789.942 Q235.81 789.942 233.982 793.507 Q232.176 797.049 232.176 804.178 Q232.176 811.285 233.982 814.85 Q235.81 818.391 239.422 818.391 Q243.056 818.391 244.861 814.85 Q246.69 811.285 246.69 804.178 Q246.69 797.049 244.861 793.507 Q243.056 789.942 239.422 789.942 M239.422 786.239 Q245.232 786.239 248.287 790.845 Q251.366 795.428 251.366 804.178 Q251.366 812.905 248.287 817.512 Q245.232 822.095 239.422 822.095 Q233.611 822.095 230.533 817.512 Q227.477 812.905 227.477 804.178 Q227.477 795.428 230.533 790.845 Q233.611 786.239 239.422 786.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M115.256 585.293 L144.931 585.293 L144.931 589.229 L115.256 589.229 L115.256 585.293 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M155.834 598.187 L163.473 598.187 L163.473 571.821 L155.163 573.488 L155.163 569.229 L163.427 567.562 L168.102 567.562 L168.102 598.187 L175.741 598.187 L175.741 602.122 L155.834 602.122 L155.834 598.187 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M199.352 583.488 Q202.709 584.205 204.584 586.474 Q206.482 588.742 206.482 592.076 Q206.482 597.192 202.963 599.992 Q199.445 602.793 192.963 602.793 Q190.788 602.793 188.473 602.354 Q186.181 601.937 183.727 601.08 L183.727 596.567 Q185.672 597.701 187.987 598.279 Q190.301 598.858 192.825 598.858 Q197.223 598.858 199.514 597.122 Q201.829 595.386 201.829 592.076 Q201.829 589.02 199.676 587.307 Q197.547 585.571 193.727 585.571 L189.7 585.571 L189.7 581.729 L193.913 581.729 Q197.362 581.729 199.19 580.363 Q201.019 578.974 201.019 576.381 Q201.019 573.719 199.121 572.307 Q197.246 570.872 193.727 570.872 Q191.806 570.872 189.607 571.289 Q187.408 571.706 184.769 572.585 L184.769 568.419 Q187.431 567.678 189.746 567.307 Q192.084 566.937 194.144 566.937 Q199.468 566.937 202.57 569.368 Q205.672 571.775 205.672 575.895 Q205.672 578.766 204.028 580.756 Q202.385 582.724 199.352 583.488 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M215.348 596.242 L220.232 596.242 L220.232 602.122 L215.348 602.122 L215.348 596.242 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M230.463 567.562 L248.82 567.562 L248.82 571.497 L234.746 571.497 L234.746 579.969 Q235.764 579.622 236.783 579.46 Q237.801 579.275 238.82 579.275 Q244.607 579.275 247.986 582.446 Q251.366 585.617 251.366 591.034 Q251.366 596.613 247.894 599.715 Q244.421 602.793 238.102 602.793 Q235.926 602.793 233.658 602.423 Q231.412 602.053 229.005 601.312 L229.005 596.613 Q231.088 597.747 233.31 598.303 Q235.533 598.858 238.009 598.858 Q242.014 598.858 244.352 596.752 Q246.69 594.645 246.69 591.034 Q246.69 587.423 244.352 585.317 Q242.014 583.21 238.009 583.21 Q236.135 583.21 234.26 583.627 Q232.408 584.043 230.463 584.923 L230.463 567.562 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M114.26 365.992 L143.936 365.992 L143.936 369.927 L114.26 369.927 L114.26 365.992 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M154.839 378.885 L162.477 378.885 L162.477 352.52 L154.167 354.186 L154.167 349.927 L162.431 348.26 L167.107 348.26 L167.107 378.885 L174.746 378.885 L174.746 382.82 L154.839 382.82 L154.839 378.885 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M198.357 364.186 Q201.713 364.904 203.588 367.172 Q205.487 369.441 205.487 372.774 Q205.487 377.89 201.968 380.691 Q198.45 383.492 191.968 383.492 Q189.792 383.492 187.477 383.052 Q185.186 382.635 182.732 381.779 L182.732 377.265 Q184.676 378.399 186.991 378.978 Q189.306 379.557 191.829 379.557 Q196.227 379.557 198.519 377.82 Q200.834 376.084 200.834 372.774 Q200.834 369.719 198.681 368.006 Q196.551 366.27 192.732 366.27 L188.704 366.27 L188.704 362.427 L192.917 362.427 Q196.366 362.427 198.195 361.061 Q200.024 359.672 200.024 357.08 Q200.024 354.418 198.125 353.006 Q196.25 351.571 192.732 351.571 Q190.811 351.571 188.612 351.987 Q186.413 352.404 183.774 353.284 L183.774 349.117 Q186.436 348.376 188.75 348.006 Q191.088 347.635 193.149 347.635 Q198.473 347.635 201.575 350.066 Q204.676 352.473 204.676 356.594 Q204.676 359.464 203.033 361.455 Q201.389 363.422 198.357 364.186 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M214.352 376.941 L219.236 376.941 L219.236 382.82 L214.352 382.82 L214.352 376.941 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M239.422 351.339 Q235.81 351.339 233.982 354.904 Q232.176 358.446 232.176 365.575 Q232.176 372.682 233.982 376.246 Q235.81 379.788 239.422 379.788 Q243.056 379.788 244.861 376.246 Q246.69 372.682 246.69 365.575 Q246.69 358.446 244.861 354.904 Q243.056 351.339 239.422 351.339 M239.422 347.635 Q245.232 347.635 248.287 352.242 Q251.366 356.825 251.366 365.575 Q251.366 374.302 248.287 378.908 Q245.232 383.492 239.422 383.492 Q233.611 383.492 230.533 378.908 Q227.477 374.302 227.477 365.575 Q227.477 356.825 230.533 352.242 Q233.611 347.635 239.422 347.635 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M115.256 146.69 L144.931 146.69 L144.931 150.625 L115.256 150.625 L115.256 146.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M155.834 159.584 L163.473 159.584 L163.473 133.218 L155.163 134.885 L155.163 130.625 L163.427 128.959 L168.102 128.959 L168.102 159.584 L175.741 159.584 L175.741 163.519 L155.834 163.519 L155.834 159.584 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M189.213 159.584 L205.533 159.584 L205.533 163.519 L183.588 163.519 L183.588 159.584 Q186.251 156.829 190.834 152.199 Q195.44 147.547 196.621 146.204 Q198.866 143.681 199.746 141.945 Q200.649 140.186 200.649 138.496 Q200.649 135.741 198.704 134.005 Q196.783 132.269 193.681 132.269 Q191.482 132.269 189.028 133.033 Q186.598 133.797 183.82 135.348 L183.82 130.625 Q186.644 129.491 189.098 128.912 Q191.551 128.334 193.588 128.334 Q198.959 128.334 202.153 131.019 Q205.348 133.704 205.348 138.195 Q205.348 140.324 204.537 142.246 Q203.75 144.144 201.644 146.736 Q201.065 147.408 197.963 150.625 Q194.862 153.82 189.213 159.584 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M215.348 157.639 L220.232 157.639 L220.232 163.519 L215.348 163.519 L215.348 157.639 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M230.463 128.959 L248.82 128.959 L248.82 132.894 L234.746 132.894 L234.746 141.366 Q235.764 141.019 236.783 140.857 Q237.801 140.672 238.82 140.672 Q244.607 140.672 247.986 143.843 Q251.366 147.014 251.366 152.431 Q251.366 158.01 247.894 161.111 Q244.421 164.19 238.102 164.19 Q235.926 164.19 233.658 163.82 Q231.412 163.449 229.005 162.709 L229.005 158.01 Q231.088 159.144 233.31 159.699 Q235.533 160.255 238.009 160.255 Q242.014 160.255 244.352 158.148 Q246.69 156.042 246.69 152.431 Q246.69 148.82 244.352 146.713 Q242.014 144.607 238.009 144.607 Q236.135 144.607 234.26 145.023 Q232.408 145.44 230.463 146.32 L230.463 128.959 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M44.7161 812.969 L47.5806 812.969 L47.5806 839.896 Q53.6281 839.514 56.8109 836.268 Q59.9619 832.989 59.9619 827.165 Q59.9619 823.791 59.1344 820.64 Q58.3069 817.457 56.6518 814.338 L62.1899 814.338 Q63.5267 817.489 64.227 820.799 Q64.9272 824.109 64.9272 827.515 Q64.9272 836.045 59.9619 841.042 Q54.9967 846.007 46.5303 846.007 Q37.7774 846.007 32.6531 841.296 Q27.4968 836.554 27.4968 828.533 Q27.4968 821.34 32.1438 817.17 Q36.7589 812.969 44.7161 812.969 M42.9973 818.826 Q38.1912 818.889 35.3266 821.531 Q32.4621 824.141 32.4621 828.47 Q32.4621 833.371 35.2312 836.331 Q38.0002 839.259 43.0292 839.705 L42.9973 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M42.4881 773.724 L64.0042 773.724 L64.0042 779.581 L42.679 779.581 Q37.6183 779.581 35.1038 781.554 Q32.5894 783.528 32.5894 787.474 Q32.5894 792.217 35.6131 794.954 Q38.6368 797.691 43.8567 797.691 L64.0042 797.691 L64.0042 803.58 L28.3562 803.58 L28.3562 797.691 L33.8944 797.691 Q30.6797 795.591 29.0883 792.758 Q27.4968 789.893 27.4968 786.169 Q27.4968 780.027 31.3163 776.876 Q35.1038 773.724 42.4881 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M44.7161 731.552 L47.5806 731.552 L47.5806 758.479 Q53.6281 758.097 56.8109 754.85 Q59.9619 751.572 59.9619 745.747 Q59.9619 742.373 59.1344 739.222 Q58.3069 736.04 56.6518 732.92 L62.1899 732.92 Q63.5267 736.071 64.227 739.382 Q64.9272 742.692 64.9272 746.097 Q64.9272 754.627 59.9619 759.624 Q54.9967 764.59 46.5303 764.59 Q37.7774 764.59 32.6531 759.879 Q27.4968 755.137 27.4968 747.116 Q27.4968 739.923 32.1438 735.753 Q36.7589 731.552 44.7161 731.552 M42.9973 737.408 Q38.1912 737.472 35.3266 740.114 Q32.4621 742.724 32.4621 747.052 Q32.4621 751.954 35.2312 754.914 Q38.0002 757.842 43.0292 758.288 L42.9973 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M33.8307 701.283 Q33.2578 702.269 33.0032 703.447 Q32.7167 704.593 32.7167 705.993 Q32.7167 710.959 35.9632 713.632 Q39.1779 716.274 45.2253 716.274 L64.0042 716.274 L64.0042 722.162 L28.3562 722.162 L28.3562 716.274 L33.8944 716.274 Q30.6479 714.428 29.0883 711.468 Q27.4968 708.508 27.4968 704.275 Q27.4968 703.67 27.5923 702.938 Q27.656 702.206 27.8151 701.315 L33.8307 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M45.7664 672.828 Q39.4007 672.828 35.8996 675.47 Q32.3984 678.08 32.3984 682.822 Q32.3984 687.533 35.8996 690.175 Q39.4007 692.785 45.7664 692.785 Q52.1003 692.785 55.6014 690.175 Q59.1026 687.533 59.1026 682.822 Q59.1026 678.08 55.6014 675.47 Q52.1003 672.828 45.7664 672.828 M59.58 666.972 Q68.683 666.972 73.1071 671.014 Q77.5631 675.056 77.5631 683.395 Q77.5631 686.482 77.0857 689.22 Q76.6401 691.957 75.6852 694.535 L69.9879 694.535 Q71.3884 691.957 72.0568 689.443 Q72.7252 686.928 72.7252 684.318 Q72.7252 678.557 69.7015 675.693 Q66.7096 672.828 60.6303 672.828 L57.7339 672.828 Q60.885 674.642 62.4446 677.475 Q64.0042 680.308 64.0042 684.254 Q64.0042 690.811 59.0071 694.822 Q54.01 698.832 45.7664 698.832 Q37.491 698.832 32.4939 694.822 Q27.4968 690.811 27.4968 684.254 Q27.4968 680.308 29.0564 677.475 Q30.616 674.642 33.7671 672.828 L28.3562 672.828 L28.3562 666.972 L59.58 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M67.3143 640.076 Q73.68 642.559 75.6216 644.914 Q77.5631 647.27 77.5631 651.216 L77.5631 655.895 L72.6615 655.895 L72.6615 652.458 Q72.6615 650.039 71.5157 648.702 Q70.3699 647.365 66.1048 645.742 L63.4312 644.692 L28.3562 659.11 L28.3562 652.903 L56.238 641.763 L28.3562 630.623 L28.3562 624.417 L67.3143 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip282)\" cx=\"1320.06\" cy=\"1384.24\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"2294.3\" cy=\"1326.74\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"1320.06\" cy=\"926.245\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"2294.3\" cy=\"872.668\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"1320.06\" cy=\"872.668\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"2294.3\" cy=\"483.857\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"2294.3\" cy=\"483.857\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"1150.58\" cy=\"483.857\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"1489.55\" cy=\"483.857\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"2294.3\" cy=\"449.537\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"1320.06\" cy=\"449.537\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"2294.3\" cy=\"418.592\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"520.515\" cy=\"87.2223\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"2119.61\" cy=\"87.2223\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"1367.25\" cy=\"87.2223\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"1272.87\" cy=\"87.2223\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"345.82\" cy=\"86.1857\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip282)\" cx=\"1320.06\" cy=\"86.1857\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n</svg>\n","category":"page"},{"location":"examples/quantum1d/1.ising-cft/#Finite-bond-dimension","page":"The Ising CFT spectrum","title":"Finite bond dimension","text":"","category":"section"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"If we limit the maximum bond dimension of the MPS, we get an approximate solution, but we can reach higher system sizes.","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"L_mps = 20\nH_mps = periodic_boundary_conditions(transverse_field_ising(), L_mps)\nD = 64\nψ, envs, δ = find_groundstate(FiniteMPS(L_mps, ℂ^2, ℂ^D), H_mps, DMRG());","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"┌ Warning: failed to deduce all domspaces\n└ @ MPSKit ~/projects/MPSKit.jl/src/operators/sparsempo/sparsempo.jl:144\n[ Info: Iteraton 0 error 0.027472963540396158\n[ Info: Iteraton 1 error 4.2499990746454e-6\n[ Info: Iteraton 2 error 4.518939647996781e-7\n[ Info: Iteraton 3 error 1.4266935739038215e-7\n[ Info: Iteraton 4 error 5.812790872635475e-8\n[ Info: Iteraton 5 error 3.393604922259721e-8\n[ Info: Iteraton 6 error 3.508323755418118e-8\n[ Info: Iteraton 7 error 4.318268478143819e-8\n[ Info: Iteraton 8 error 5.122181044220508e-8\n[ Info: Iteraton 9 error 5.7292768222888516e-8\n[ Info: Iteraton 10 error 5.928908338653149e-8\n[ Info: Iteraton 11 error 5.792982675326755e-8\n[ Info: Iteraton 12 error 5.251579077114723e-8\n[ Info: Iteraton 13 error 4.416508660099376e-8\n[ Info: Iteraton 14 error 3.5163073134686605e-8\n[ Info: Iteraton 15 error 2.7034964301287772e-8\n[ Info: Iteraton 16 error 2.0374010758048726e-8\n[ Info: Iteraton 17 error 1.519740629741549e-8\n[ Info: Iteraton 18 error 1.1287063199184159e-8\n[ Info: Iteraton 19 error 8.376252613910147e-9\n[ Info: Iteraton 20 error 6.224642265905982e-9\n[ Info: Iteraton 21 error 4.638535397803285e-9\n[ Info: Iteraton 22 error 3.4695667576124297e-9\n[ Info: Iteraton 23 error 2.6069109293991193e-9\n[ Info: Iteraton 24 error 1.968826919112749e-9\n[ Info: Iteraton 25 error 1.4954022020985557e-9\n[ Info: Iteraton 26 error 1.1428476693160124e-9\n[ Info: Iteraton 27 error 1.0052245724187655e-9\n[ Info: Iteraton 28 error 9.376197681400316e-10\n[ Info: Iteraton 29 error 9.003965381666546e-10\n[ Info: Iteraton 30 error 8.650372631298306e-10\n[ Info: Iteraton 31 error 8.313368894489376e-10\n[ Info: Iteraton 32 error 7.991329391813984e-10\n[ Info: Iteraton 33 error 7.682945984183869e-10\n[ Info: Iteraton 34 error 7.387158863750439e-10\n[ Info: Iteraton 35 error 7.103089634350254e-10\n[ Info: Iteraton 36 error 6.830003660323164e-10\n[ Info: Iteraton 37 error 6.567287610228936e-10\n[ Info: Iteraton 38 error 6.314408402864286e-10\n[ Info: Iteraton 39 error 6.070906925446064e-10\n[ Info: Iteraton 40 error 5.836368638194547e-10\n[ Info: Iteraton 41 error 5.610437872178115e-10\n[ Info: Iteraton 42 error 5.392778707896691e-10\n[ Info: Iteraton 43 error 5.183085880417549e-10\n[ Info: Iteraton 44 error 4.981076105179631e-10\n[ Info: Iteraton 45 error 4.786482617538885e-10\n[ Info: Iteraton 46 error 4.599055883703678e-10\n[ Info: Iteraton 47 error 4.4185513735999085e-10\n[ Info: Iteraton 48 error 4.2447407351739853e-10\n[ Info: Iteraton 49 error 4.077401096296135e-10\n[ Info: Iteraton 50 error 3.916323472504938e-10\n[ Info: Iteraton 51 error 3.761297884077773e-10\n[ Info: Iteraton 52 error 3.6121161753673396e-10\n[ Info: Iteraton 53 error 3.468589452053742e-10\n[ Info: Iteraton 54 error 3.3305227173275425e-10\n[ Info: Iteraton 55 error 3.19773130530276e-10\n[ Info: Iteraton 56 error 3.070033607630675e-10\n[ Info: Iteraton 57 error 2.947253091408608e-10\n[ Info: Iteraton 58 error 2.8292172410658897e-10\n[ Info: Iteraton 59 error 2.7157598582416426e-10\n[ Info: Iteraton 60 error 2.606717652380316e-10\n[ Info: Iteraton 61 error 2.501931617475884e-10\n[ Info: Iteraton 62 error 2.4012486547992006e-10\n[ Info: Iteraton 63 error 2.3045207610776269e-10\n[ Info: Iteraton 64 error 2.211598777917664e-10\n[ Info: Iteraton 65 error 2.1223451912252295e-10\n[ Info: Iteraton 66 error 2.0366226455767463e-10\n[ Info: Iteraton 67 error 1.954297993331267e-10\n[ Info: Iteraton 68 error 1.8751583829053747e-10\n[ Info: Iteraton 69 error 1.799269788069608e-10\n[ Info: Iteraton 70 error 1.7265239198205696e-10\n[ Info: Iteraton 71 error 1.6564181622836898e-10\n[ Info: Iteraton 72 error 1.589254251897116e-10\n[ Info: Iteraton 73 error 1.524783138584775e-10\n[ Info: Iteraton 74 error 1.4628994000080126e-10\n[ Info: Iteraton 75 error 1.403492079612858e-10\n[ Info: Iteraton 76 error 1.3465123802125433e-10\n[ Info: Iteraton 77 error 1.291785793126184e-10\n[ Info: Iteraton 78 error 1.2393031576018561e-10\n[ Info: Iteraton 79 error 1.1888714150257146e-10\n[ Info: Iteraton 80 error 1.1405039813461729e-10\n[ Info: Iteraton 81 error 1.0941463810293189e-10\n[ Info: Iteraton 82 error 1.049470772122233e-10\n[ Info: Iteraton 83 error 1.0068944120957693e-10\n[ Info: Iteraton 84 error 9.658084685949789e-11\n[ Info: Iteraton 85 error 9.26521585213163e-11\n[ Info: Iteraton 86 error 8.8873533822986e-11\n[ Info: Iteraton 87 error 8.525987592024026e-11\n[ Info: Iteraton 88 error 8.176699668961743e-11\n[ Info: Iteraton 89 error 7.844822242784917e-11\n[ Info: Iteraton 90 error 7.525441570658119e-11\n[ Info: Iteraton 91 error 7.218366702838636e-11\n[ Info: Iteraton 92 error 6.924429519135056e-11\n[ Info: Iteraton 93 error 6.642445185586198e-11\n[ Info: Iteraton 94 error 6.371187040000673e-11\n[ Info: Iteraton 95 error 6.111235923883613e-11\n[ Info: Iteraton 96 error 5.862208360865648e-11\n[ Info: Iteraton 97 error 5.622925679053845e-11\n[ Info: Iteraton 98 error 5.393398098587054e-11\n[ Info: Iteraton 99 error 5.173779373536982e-11\n","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"Excitations on top of the groundstate can be found through the use of the quasiparticle ansatz. This returns quasiparticle states, which can be converted to regular FiniteMPS objects.","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"E_ex, qps = excitations(H, QuasiparticleAnsatz(), ψ, envs, num=16)\nstates_mps = vcat(ψ, map(qp -> convert(FiniteMPS, qp), qps))\nE_mps = map(x -> sum(expectation_value(x, H_mps)), states_mps)\n\nT_mps = periodic_boundary_conditions(DenseMPO(O), L_mps)\nmomenta_mps = Float64[]\nappend!(momenta_mps, fix_degeneracies(states[1:1]))\nappend!(momenta_mps, fix_degeneracies(states[2:2]))\nappend!(momenta_mps, fix_degeneracies(states[3:3]))\nappend!(momenta_mps, fix_degeneracies(states[4:5]))\nappend!(momenta_mps, fix_degeneracies(states[6:9]))\nappend!(momenta_mps, fix_degeneracies(states[10:11]))\nappend!(momenta_mps, fix_degeneracies(states[12:12]))\nappend!(momenta_mps, fix_degeneracies(states[13:16]))\n\nplot(momenta_mps, real.(energies[1:16]), seriestype=:scatter, xlabel=\"momentum\", ylabel=\"energy\", legend=false)","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip310\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip310)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip311\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip310)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip312\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"381.015,1505.26 381.015,47.2441 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"752.118,1505.26 752.118,47.2441 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1123.22,1505.26 1123.22,47.2441 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1494.32,1505.26 1494.32,47.2441 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1865.43,1505.26 1865.43,47.2441 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2236.53,1505.26 2236.53,47.2441 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"381.015,1505.26 381.015,1486.36 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"752.118,1505.26 752.118,1486.36 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1123.22,1505.26 1123.22,1486.36 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1494.32,1505.26 1494.32,1486.36 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1865.43,1505.26 1865.43,1486.36 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2236.53,1505.26 2236.53,1486.36 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M350.957 1550.83 L380.633 1550.83 L380.633 1554.77 L350.957 1554.77 L350.957 1550.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M394.753 1563.72 L411.073 1563.72 L411.073 1567.66 L389.128 1567.66 L389.128 1563.72 Q391.79 1560.97 396.374 1556.34 Q400.98 1551.69 402.161 1550.35 Q404.406 1547.82 405.286 1546.09 Q406.188 1544.33 406.188 1542.64 Q406.188 1539.88 404.244 1538.15 Q402.323 1536.41 399.221 1536.41 Q397.022 1536.41 394.568 1537.17 Q392.137 1537.94 389.36 1539.49 L389.36 1534.77 Q392.184 1533.63 394.637 1533.05 Q397.091 1532.47 399.128 1532.47 Q404.499 1532.47 407.693 1535.16 Q410.887 1537.85 410.887 1542.34 Q410.887 1544.47 410.077 1546.39 Q409.29 1548.28 407.184 1550.88 Q406.605 1551.55 403.503 1554.77 Q400.401 1557.96 394.753 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M721.875 1550.83 L751.551 1550.83 L751.551 1554.77 L721.875 1554.77 L721.875 1550.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M762.454 1563.72 L770.092 1563.72 L770.092 1537.36 L761.782 1539.03 L761.782 1534.77 L770.046 1533.1 L774.722 1533.1 L774.722 1563.72 L782.361 1563.72 L782.361 1567.66 L762.454 1567.66 L762.454 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1123.22 1536.18 Q1119.61 1536.18 1117.78 1539.74 Q1115.98 1543.28 1115.98 1550.41 Q1115.98 1557.52 1117.78 1561.09 Q1119.61 1564.63 1123.22 1564.63 Q1126.86 1564.63 1128.66 1561.09 Q1130.49 1557.52 1130.49 1550.41 Q1130.49 1543.28 1128.66 1539.74 Q1126.86 1536.18 1123.22 1536.18 M1123.22 1532.47 Q1129.03 1532.47 1132.09 1537.08 Q1135.17 1541.66 1135.17 1550.41 Q1135.17 1559.14 1132.09 1563.75 Q1129.03 1568.33 1123.22 1568.33 Q1117.41 1568.33 1114.33 1563.75 Q1111.28 1559.14 1111.28 1550.41 Q1111.28 1541.66 1114.33 1537.08 Q1117.41 1532.47 1123.22 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1484.71 1563.72 L1492.35 1563.72 L1492.35 1537.36 L1484.04 1539.03 L1484.04 1534.77 L1492.3 1533.1 L1496.97 1533.1 L1496.97 1563.72 L1504.61 1563.72 L1504.61 1567.66 L1484.71 1567.66 L1484.71 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1860.08 1563.72 L1876.4 1563.72 L1876.4 1567.66 L1854.46 1567.66 L1854.46 1563.72 Q1857.12 1560.97 1861.7 1556.34 Q1866.31 1551.69 1867.49 1550.35 Q1869.73 1547.82 1870.61 1546.09 Q1871.52 1544.33 1871.52 1542.64 Q1871.52 1539.88 1869.57 1538.15 Q1867.65 1536.41 1864.55 1536.41 Q1862.35 1536.41 1859.9 1537.17 Q1857.46 1537.94 1854.69 1539.49 L1854.69 1534.77 Q1857.51 1533.63 1859.96 1533.05 Q1862.42 1532.47 1864.46 1532.47 Q1869.83 1532.47 1873.02 1535.16 Q1876.21 1537.85 1876.21 1542.34 Q1876.21 1544.47 1875.4 1546.39 Q1874.62 1548.28 1872.51 1550.88 Q1871.93 1551.55 1868.83 1554.77 Q1865.73 1557.96 1860.08 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2240.78 1549.03 Q2244.13 1549.74 2246.01 1552.01 Q2247.91 1554.28 2247.91 1557.61 Q2247.91 1562.73 2244.39 1565.53 Q2240.87 1568.33 2234.39 1568.33 Q2232.21 1568.33 2229.9 1567.89 Q2227.61 1567.47 2225.15 1566.62 L2225.15 1562.1 Q2227.1 1563.24 2229.41 1563.82 Q2231.73 1564.4 2234.25 1564.4 Q2238.65 1564.4 2240.94 1562.66 Q2243.26 1560.92 2243.26 1557.61 Q2243.26 1554.56 2241.1 1552.85 Q2238.97 1551.11 2235.15 1551.11 L2231.13 1551.11 L2231.13 1547.27 L2235.34 1547.27 Q2238.79 1547.27 2240.62 1545.9 Q2242.45 1544.51 2242.45 1541.92 Q2242.45 1539.26 2240.55 1537.85 Q2238.67 1536.41 2235.15 1536.41 Q2233.23 1536.41 2231.03 1536.83 Q2228.83 1537.24 2226.2 1538.12 L2226.2 1533.96 Q2228.86 1533.22 2231.17 1532.85 Q2233.51 1532.47 2235.57 1532.47 Q2240.89 1532.47 2244 1534.91 Q2247.1 1537.31 2247.1 1541.43 Q2247.1 1544.3 2245.45 1546.29 Q2243.81 1548.26 2240.78 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1072.12 1621.32 Q1074.32 1617.37 1077.37 1615.49 Q1080.43 1613.62 1084.57 1613.62 Q1090.14 1613.62 1093.16 1617.53 Q1096.18 1621.41 1096.18 1628.61 L1096.18 1650.12 L1090.3 1650.12 L1090.3 1628.8 Q1090.3 1623.67 1088.48 1621.19 Q1086.67 1618.71 1082.94 1618.71 Q1078.39 1618.71 1075.75 1621.73 Q1073.11 1624.76 1073.11 1629.98 L1073.11 1650.12 L1067.22 1650.12 L1067.22 1628.8 Q1067.22 1623.64 1065.41 1621.19 Q1063.59 1618.71 1059.8 1618.71 Q1055.32 1618.71 1052.68 1621.76 Q1050.03 1624.79 1050.03 1629.98 L1050.03 1650.12 L1044.15 1650.12 L1044.15 1614.48 L1050.03 1614.48 L1050.03 1620.01 Q1052.04 1616.74 1054.84 1615.18 Q1057.64 1613.62 1061.49 1613.62 Q1065.37 1613.62 1068.08 1615.59 Q1070.82 1617.56 1072.12 1621.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1121.68 1618.58 Q1116.97 1618.58 1114.23 1622.27 Q1111.49 1625.93 1111.49 1632.33 Q1111.49 1638.73 1114.2 1642.42 Q1116.94 1646.08 1121.68 1646.08 Q1126.36 1646.08 1129.1 1642.39 Q1131.83 1638.7 1131.83 1632.33 Q1131.83 1626 1129.1 1622.31 Q1126.36 1618.58 1121.68 1618.58 M1121.68 1613.62 Q1129.32 1613.62 1133.68 1618.58 Q1138.04 1623.55 1138.04 1632.33 Q1138.04 1641.08 1133.68 1646.08 Q1129.32 1651.05 1121.68 1651.05 Q1114.01 1651.05 1109.65 1646.08 Q1105.32 1641.08 1105.32 1632.33 Q1105.32 1623.55 1109.65 1618.58 Q1114.01 1613.62 1121.68 1613.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1175.5 1621.32 Q1177.7 1617.37 1180.75 1615.49 Q1183.81 1613.62 1187.95 1613.62 Q1193.52 1613.62 1196.54 1617.53 Q1199.56 1621.41 1199.56 1628.61 L1199.56 1650.12 L1193.68 1650.12 L1193.68 1628.8 Q1193.68 1623.67 1191.86 1621.19 Q1190.05 1618.71 1186.32 1618.71 Q1181.77 1618.71 1179.13 1621.73 Q1176.49 1624.76 1176.49 1629.98 L1176.49 1650.12 L1170.6 1650.12 L1170.6 1628.8 Q1170.6 1623.64 1168.79 1621.19 Q1166.97 1618.71 1163.18 1618.71 Q1158.7 1618.71 1156.05 1621.76 Q1153.41 1624.79 1153.41 1629.98 L1153.41 1650.12 L1147.52 1650.12 L1147.52 1614.48 L1153.41 1614.48 L1153.41 1620.01 Q1155.42 1616.74 1158.22 1615.18 Q1161.02 1613.62 1164.87 1613.62 Q1168.75 1613.62 1171.46 1615.59 Q1174.2 1617.56 1175.5 1621.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1241.74 1630.84 L1241.74 1633.7 L1214.81 1633.7 Q1215.19 1639.75 1218.44 1642.93 Q1221.72 1646.08 1227.54 1646.08 Q1230.91 1646.08 1234.07 1645.25 Q1237.25 1644.43 1240.37 1642.77 L1240.37 1648.31 Q1237.22 1649.65 1233.91 1650.35 Q1230.6 1651.05 1227.19 1651.05 Q1218.66 1651.05 1213.66 1646.08 Q1208.7 1641.12 1208.7 1632.65 Q1208.7 1623.9 1213.41 1618.77 Q1218.15 1613.62 1226.17 1613.62 Q1233.37 1613.62 1237.54 1618.26 Q1241.74 1622.88 1241.74 1630.84 M1235.88 1629.12 Q1235.82 1624.31 1233.17 1621.45 Q1230.56 1618.58 1226.24 1618.58 Q1221.33 1618.58 1218.37 1621.35 Q1215.45 1624.12 1215 1629.15 L1235.88 1629.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1280.98 1628.61 L1280.98 1650.12 L1275.12 1650.12 L1275.12 1628.8 Q1275.12 1623.74 1273.15 1621.22 Q1271.18 1618.71 1267.23 1618.71 Q1262.49 1618.71 1259.75 1621.73 Q1257.01 1624.76 1257.01 1629.98 L1257.01 1650.12 L1251.13 1650.12 L1251.13 1614.48 L1257.01 1614.48 L1257.01 1620.01 Q1259.12 1616.8 1261.95 1615.21 Q1264.81 1613.62 1268.54 1613.62 Q1274.68 1613.62 1277.83 1617.44 Q1280.98 1621.22 1280.98 1628.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1298.46 1604.35 L1298.46 1614.48 L1310.52 1614.48 L1310.52 1619.03 L1298.46 1619.03 L1298.46 1638.38 Q1298.46 1642.74 1299.63 1643.98 Q1300.84 1645.22 1304.5 1645.22 L1310.52 1645.22 L1310.52 1650.12 L1304.5 1650.12 Q1297.72 1650.12 1295.14 1647.61 Q1292.57 1645.06 1292.57 1638.38 L1292.57 1619.03 L1288.27 1619.03 L1288.27 1614.48 L1292.57 1614.48 L1292.57 1604.35 L1298.46 1604.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1317.62 1636.06 L1317.62 1614.48 L1323.47 1614.48 L1323.47 1635.83 Q1323.47 1640.89 1325.45 1643.44 Q1327.42 1645.95 1331.37 1645.95 Q1336.11 1645.95 1338.85 1642.93 Q1341.61 1639.91 1341.61 1634.69 L1341.61 1614.48 L1347.47 1614.48 L1347.47 1650.12 L1341.61 1650.12 L1341.61 1644.65 Q1339.48 1647.9 1336.65 1649.49 Q1333.85 1651.05 1330.12 1651.05 Q1323.98 1651.05 1320.8 1647.23 Q1317.62 1643.41 1317.62 1636.06 M1332.35 1613.62 L1332.35 1613.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1387.29 1621.32 Q1389.48 1617.37 1392.54 1615.49 Q1395.6 1613.62 1399.73 1613.62 Q1405.3 1613.62 1408.33 1617.53 Q1411.35 1621.41 1411.35 1628.61 L1411.35 1650.12 L1405.46 1650.12 L1405.46 1628.8 Q1405.46 1623.67 1403.65 1621.19 Q1401.83 1618.71 1398.11 1618.71 Q1393.56 1618.71 1390.92 1621.73 Q1388.28 1624.76 1388.28 1629.98 L1388.28 1650.12 L1382.39 1650.12 L1382.39 1628.8 Q1382.39 1623.64 1380.57 1621.19 Q1378.76 1618.71 1374.97 1618.71 Q1370.48 1618.71 1367.84 1621.76 Q1365.2 1624.79 1365.2 1629.98 L1365.2 1650.12 L1359.31 1650.12 L1359.31 1614.48 L1365.2 1614.48 L1365.2 1620.01 Q1367.2 1616.74 1370.01 1615.18 Q1372.81 1613.62 1376.66 1613.62 Q1380.54 1613.62 1383.25 1615.59 Q1385.98 1617.56 1387.29 1621.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1313.94 2352.76,1313.94 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1081.37 2352.76,1081.37 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,848.804 2352.76,848.804 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,616.235 2352.76,616.235 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,383.665 2352.76,383.665 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,151.096 2352.76,151.096 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1313.94 121.638,1313.94 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1081.37 121.638,1081.37 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,848.804 121.638,848.804 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,616.235 121.638,616.235 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,383.665 121.638,383.665 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,151.096 121.638,151.096 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M-70.3656 1314.39 L-40.6898 1314.39 L-40.6898 1318.33 L-70.3656 1318.33 L-70.3656 1314.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-29.7871 1327.29 L-22.1483 1327.29 L-22.1483 1300.92 L-30.4584 1302.59 L-30.4584 1298.33 L-22.1946 1296.66 L-17.5187 1296.66 L-17.5187 1327.29 L-9.8798 1327.29 L-9.8798 1331.22 L-29.7871 1331.22 L-29.7871 1327.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-0.389112 1296.66 L17.9673 1296.66 L17.9673 1300.6 L3.89327 1300.6 L3.89327 1309.07 Q4.91179 1308.72 5.9303 1308.56 Q6.94881 1308.38 7.96732 1308.38 Q13.7543 1308.38 17.1339 1311.55 Q20.5136 1314.72 20.5136 1320.14 Q20.5136 1325.71 17.0413 1328.82 Q13.5691 1331.89 7.24974 1331.89 Q5.07382 1331.89 2.80531 1331.52 Q0.559957 1331.15 -1.84744 1330.41 L-1.84744 1325.71 Q0.235884 1326.85 2.45809 1327.4 Q4.6803 1327.96 7.15714 1327.96 Q11.1618 1327.96 13.4997 1325.85 Q15.8377 1323.75 15.8377 1320.14 Q15.8377 1316.52 13.4997 1314.42 Q11.1618 1312.31 7.15714 1312.31 Q5.28215 1312.31 3.40716 1312.73 Q1.55532 1313.14 -0.389112 1314.02 L-0.389112 1296.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M29.7265 1325.34 L34.6107 1325.34 L34.6107 1331.22 L29.7265 1331.22 L29.7265 1325.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M54.7958 1299.74 Q51.1847 1299.74 49.356 1303.31 Q47.5504 1306.85 47.5504 1313.98 Q47.5504 1321.08 49.356 1324.65 Q51.1847 1328.19 54.7958 1328.19 Q58.43 1328.19 60.2356 1324.65 Q62.0643 1321.08 62.0643 1313.98 Q62.0643 1306.85 60.2356 1303.31 Q58.43 1299.74 54.7958 1299.74 M54.7958 1296.04 Q60.6059 1296.04 63.6615 1300.65 Q66.7402 1305.23 66.7402 1313.98 Q66.7402 1322.71 63.6615 1327.31 Q60.6059 1331.89 54.7958 1331.89 Q48.9856 1331.89 45.9069 1327.31 Q42.8514 1322.71 42.8514 1313.98 Q42.8514 1305.23 45.9069 1300.65 Q48.9856 1296.04 54.7958 1296.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-69.3702 1081.83 L-39.6945 1081.83 L-39.6945 1085.76 L-69.3702 1085.76 L-69.3702 1081.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-28.7917 1094.72 L-21.1529 1094.72 L-21.1529 1068.35 L-29.463 1070.02 L-29.463 1065.76 L-21.1992 1064.09 L-16.5233 1064.09 L-16.5233 1094.72 L-8.88444 1094.72 L-8.88444 1098.65 L-28.7917 1098.65 L-28.7917 1094.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M13.4071 1068.17 L1.60162 1086.62 L13.4071 1086.62 L13.4071 1068.17 M12.1803 1064.09 L18.0599 1064.09 L18.0599 1086.62 L22.9904 1086.62 L22.9904 1090.51 L18.0599 1090.51 L18.0599 1098.65 L13.4071 1098.65 L13.4071 1090.51 L-2.19466 1090.51 L-2.19466 1085.99 L12.1803 1064.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M30.7218 1092.77 L35.6061 1092.77 L35.6061 1098.65 L30.7218 1098.65 L30.7218 1092.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M45.8375 1064.09 L64.1939 1064.09 L64.1939 1068.03 L50.1199 1068.03 L50.1199 1076.5 Q51.1384 1076.15 52.1569 1075.99 Q53.1754 1075.81 54.1939 1075.81 Q59.9809 1075.81 63.3605 1078.98 Q66.7402 1082.15 66.7402 1087.57 Q66.7402 1093.14 63.268 1096.25 Q59.7958 1099.33 53.4763 1099.33 Q51.3004 1099.33 49.0319 1098.95 Q46.7866 1098.58 44.3792 1097.84 L44.3792 1093.14 Q46.4625 1094.28 48.6847 1094.83 Q50.9069 1095.39 53.3837 1095.39 Q57.3884 1095.39 59.7263 1093.28 Q62.0643 1091.18 62.0643 1087.57 Q62.0643 1083.96 59.7263 1081.85 Q57.3884 1079.74 53.3837 1079.74 Q51.5088 1079.74 49.6338 1080.16 Q47.7819 1080.58 45.8375 1081.46 L45.8375 1064.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-70.3656 849.256 L-40.6898 849.256 L-40.6898 853.191 L-70.3656 853.191 L-70.3656 849.256 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-29.7871 862.149 L-22.1483 862.149 L-22.1483 835.784 L-30.4584 837.45 L-30.4584 833.191 L-22.1946 831.524 L-17.5187 831.524 L-17.5187 862.149 L-9.8798 862.149 L-9.8798 866.084 L-29.7871 866.084 L-29.7871 862.149 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M12.4117 835.598 L0.606253 854.047 L12.4117 854.047 L12.4117 835.598 M11.1849 831.524 L17.0645 831.524 L17.0645 854.047 L21.995 854.047 L21.995 857.936 L17.0645 857.936 L17.0645 866.084 L12.4117 866.084 L12.4117 857.936 L-3.19002 857.936 L-3.19002 853.422 L11.1849 831.524 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M29.7265 860.205 L34.6107 860.205 L34.6107 866.084 L29.7265 866.084 L29.7265 860.205 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M54.7958 834.603 Q51.1847 834.603 49.356 838.168 Q47.5504 841.71 47.5504 848.839 Q47.5504 855.946 49.356 859.51 Q51.1847 863.052 54.7958 863.052 Q58.43 863.052 60.2356 859.51 Q62.0643 855.946 62.0643 848.839 Q62.0643 841.71 60.2356 838.168 Q58.43 834.603 54.7958 834.603 M54.7958 830.899 Q60.6059 830.899 63.6615 835.506 Q66.7402 840.089 66.7402 848.839 Q66.7402 857.566 63.6615 862.172 Q60.6059 866.756 54.7958 866.756 Q48.9856 866.756 45.9069 862.172 Q42.8514 857.566 42.8514 848.839 Q42.8514 840.089 45.9069 835.506 Q48.9856 830.899 54.7958 830.899 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-69.3702 616.686 L-39.6945 616.686 L-39.6945 620.621 L-69.3702 620.621 L-69.3702 616.686 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-28.7917 629.58 L-21.1529 629.58 L-21.1529 603.214 L-29.463 604.881 L-29.463 600.621 L-21.1992 598.955 L-16.5233 598.955 L-16.5233 629.58 L-8.88444 629.58 L-8.88444 633.515 L-28.7917 633.515 L-28.7917 629.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M14.7265 614.881 Q18.083 615.598 19.958 617.867 Q21.8561 620.135 21.8561 623.469 Q21.8561 628.584 18.3376 631.385 Q14.8191 634.186 8.33769 634.186 Q6.16178 634.186 3.84698 633.746 Q1.55532 633.33 -0.898369 632.473 L-0.898369 627.959 Q1.04607 629.094 3.36087 629.672 Q5.67567 630.251 8.1988 630.251 Q12.5969 630.251 14.8886 628.515 Q17.2034 626.779 17.2034 623.469 Q17.2034 620.413 15.0506 618.7 Q12.921 616.964 9.10158 616.964 L5.07382 616.964 L5.07382 613.121 L9.28676 613.121 Q12.7358 613.121 14.5645 611.756 Q16.3932 610.367 16.3932 607.774 Q16.3932 605.112 14.4951 603.7 Q12.6201 602.265 9.10158 602.265 Q7.18029 602.265 4.98123 602.682 Q2.78217 603.098 0.143292 603.978 L0.143292 599.811 Q2.80531 599.071 5.12012 598.7 Q7.45807 598.33 9.51824 598.33 Q14.8423 598.33 17.9441 600.76 Q21.046 603.168 21.046 607.288 Q21.046 610.158 19.4024 612.149 Q17.7589 614.117 14.7265 614.881 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M30.7218 627.635 L35.6061 627.635 L35.6061 633.515 L30.7218 633.515 L30.7218 627.635 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M45.8375 598.955 L64.1939 598.955 L64.1939 602.89 L50.1199 602.89 L50.1199 611.362 Q51.1384 611.015 52.1569 610.853 Q53.1754 610.668 54.1939 610.668 Q59.9809 610.668 63.3605 613.839 Q66.7402 617.01 66.7402 622.427 Q66.7402 628.006 63.268 631.107 Q59.7958 634.186 53.4763 634.186 Q51.3004 634.186 49.0319 633.816 Q46.7866 633.445 44.3792 632.705 L44.3792 628.006 Q46.4625 629.14 48.6847 629.695 Q50.9069 630.251 53.3837 630.251 Q57.3884 630.251 59.7263 628.144 Q62.0643 626.038 62.0643 622.427 Q62.0643 618.816 59.7263 616.709 Q57.3884 614.603 53.3837 614.603 Q51.5088 614.603 49.6338 615.02 Q47.7819 615.436 45.8375 616.316 L45.8375 598.955 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-70.3656 384.117 L-40.6898 384.117 L-40.6898 388.052 L-70.3656 388.052 L-70.3656 384.117 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-29.7871 397.01 L-22.1483 397.01 L-22.1483 370.644 L-30.4584 372.311 L-30.4584 368.052 L-22.1946 366.385 L-17.5187 366.385 L-17.5187 397.01 L-9.8798 397.01 L-9.8798 400.945 L-29.7871 400.945 L-29.7871 397.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M13.7312 382.311 Q17.0876 383.029 18.9626 385.297 Q20.8608 387.566 20.8608 390.899 Q20.8608 396.015 17.3423 398.816 Q13.8238 401.617 7.34233 401.617 Q5.16641 401.617 2.85161 401.177 Q0.559957 400.76 -1.89373 399.904 L-1.89373 395.39 Q0.0507 396.524 2.3655 397.103 Q4.6803 397.681 7.20344 397.681 Q11.6016 397.681 13.8932 395.945 Q16.208 394.209 16.208 390.899 Q16.208 387.843 14.0553 386.131 Q11.9256 384.394 8.10621 384.394 L4.07846 384.394 L4.07846 380.552 L8.2914 380.552 Q11.7405 380.552 13.5691 379.186 Q15.3978 377.797 15.3978 375.205 Q15.3978 372.543 13.4997 371.131 Q11.6247 369.695 8.10621 369.695 Q6.18493 369.695 3.98586 370.112 Q1.7868 370.529 -0.852073 371.408 L-0.852073 367.242 Q1.80995 366.501 4.12475 366.131 Q6.4627 365.76 8.52288 365.76 Q13.8469 365.76 16.9488 368.191 Q20.0506 370.598 20.0506 374.719 Q20.0506 377.589 18.4071 379.58 Q16.7636 381.547 13.7312 382.311 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M29.7265 395.066 L34.6107 395.066 L34.6107 400.945 L29.7265 400.945 L29.7265 395.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M54.7958 369.464 Q51.1847 369.464 49.356 373.029 Q47.5504 376.57 47.5504 383.7 Q47.5504 390.806 49.356 394.371 Q51.1847 397.913 54.7958 397.913 Q58.43 397.913 60.2356 394.371 Q62.0643 390.806 62.0643 383.7 Q62.0643 376.57 60.2356 373.029 Q58.43 369.464 54.7958 369.464 M54.7958 365.76 Q60.6059 365.76 63.6615 370.367 Q66.7402 374.95 66.7402 383.7 Q66.7402 392.427 63.6615 397.033 Q60.6059 401.617 54.7958 401.617 Q48.9856 401.617 45.9069 397.033 Q42.8514 392.427 42.8514 383.7 Q42.8514 374.95 45.9069 370.367 Q48.9856 365.76 54.7958 365.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-69.3702 151.547 L-39.6945 151.547 L-39.6945 155.482 L-69.3702 155.482 L-69.3702 151.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-28.7917 164.44 L-21.1529 164.44 L-21.1529 138.075 L-29.463 139.742 L-29.463 135.482 L-21.1992 133.816 L-16.5233 133.816 L-16.5233 164.44 L-8.88444 164.44 L-8.88444 168.376 L-28.7917 168.376 L-28.7917 164.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M4.58771 164.44 L20.9071 164.44 L20.9071 168.376 L-1.03726 168.376 L-1.03726 164.44 Q1.62477 161.686 6.20807 157.056 Q10.8145 152.404 11.9951 151.061 Q14.2404 148.538 15.1201 146.802 Q16.0228 145.042 16.0228 143.353 Q16.0228 140.598 14.0784 138.862 Q12.1571 137.126 9.05528 137.126 Q6.85622 137.126 4.40253 137.89 Q1.97199 138.654 -0.805777 140.205 L-0.805777 135.482 Q2.01828 134.348 4.47197 133.769 Q6.92566 133.191 8.96269 133.191 Q14.333 133.191 17.5275 135.876 Q20.7219 138.561 20.7219 143.052 Q20.7219 145.181 19.9117 147.103 Q19.1247 149.001 17.0182 151.593 Q16.4395 152.265 13.3377 155.482 Q10.2358 158.677 4.58771 164.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M30.7218 162.496 L35.6061 162.496 L35.6061 168.376 L30.7218 168.376 L30.7218 162.496 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M45.8375 133.816 L64.1939 133.816 L64.1939 137.751 L50.1199 137.751 L50.1199 146.223 Q51.1384 145.876 52.1569 145.714 Q53.1754 145.529 54.1939 145.529 Q59.9809 145.529 63.3605 148.7 Q66.7402 151.871 66.7402 157.288 Q66.7402 162.866 63.268 165.968 Q59.7958 169.047 53.4763 169.047 Q51.3004 169.047 49.0319 168.677 Q46.7866 168.306 44.3792 167.565 L44.3792 162.866 Q46.4625 164.001 48.6847 164.556 Q50.9069 165.112 53.3837 165.112 Q57.3884 165.112 59.7263 163.005 Q62.0643 160.899 62.0643 157.288 Q62.0643 153.677 59.7263 151.57 Q57.3884 149.464 53.3837 149.464 Q51.5088 149.464 49.6338 149.88 Q47.7819 150.297 45.8375 151.177 L45.8375 133.816 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-139.91 854.009 L-137.045 854.009 L-137.045 880.936 Q-130.998 880.554 -127.815 877.308 Q-124.664 874.029 -124.664 868.205 Q-124.664 864.831 -125.491 861.68 Q-126.319 858.497 -127.974 855.378 L-122.436 855.378 Q-121.099 858.529 -120.399 861.839 Q-119.699 865.149 -119.699 868.555 Q-119.699 877.085 -124.664 882.082 Q-129.629 887.047 -138.095 887.047 Q-146.848 887.047 -151.973 882.336 Q-157.129 877.594 -157.129 869.573 Q-157.129 862.38 -152.482 858.21 Q-147.867 854.009 -139.91 854.009 M-141.628 859.866 Q-146.435 859.929 -149.299 862.571 Q-152.164 865.181 -152.164 869.51 Q-152.164 874.411 -149.395 877.371 Q-146.626 880.299 -141.597 880.745 L-141.628 859.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-142.138 814.764 L-120.622 814.764 L-120.622 820.621 L-141.947 820.621 Q-147.007 820.621 -149.522 822.594 Q-152.036 824.568 -152.036 828.514 Q-152.036 833.257 -149.013 835.994 Q-145.989 838.731 -140.769 838.731 L-120.622 838.731 L-120.622 844.62 L-156.27 844.62 L-156.27 838.731 L-150.731 838.731 Q-153.946 836.631 -155.537 833.798 Q-157.129 830.933 -157.129 827.209 Q-157.129 821.067 -153.309 817.916 Q-149.522 814.764 -142.138 814.764 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-139.91 772.592 L-137.045 772.592 L-137.045 799.519 Q-130.998 799.137 -127.815 795.89 Q-124.664 792.612 -124.664 786.787 Q-124.664 783.413 -125.491 780.262 Q-126.319 777.08 -127.974 773.96 L-122.436 773.96 Q-121.099 777.111 -120.399 780.422 Q-119.699 783.732 -119.699 787.137 Q-119.699 795.667 -124.664 800.664 Q-129.629 805.63 -138.095 805.63 Q-146.848 805.63 -151.973 800.919 Q-157.129 796.177 -157.129 788.156 Q-157.129 780.963 -152.482 776.793 Q-147.867 772.592 -139.91 772.592 M-141.628 778.448 Q-146.435 778.512 -149.299 781.154 Q-152.164 783.764 -152.164 788.092 Q-152.164 792.994 -149.395 795.954 Q-146.626 798.882 -141.597 799.328 L-141.628 778.448 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-150.795 742.323 Q-151.368 743.309 -151.623 744.487 Q-151.909 745.633 -151.909 747.033 Q-151.909 751.999 -148.663 754.672 Q-145.448 757.314 -139.4 757.314 L-120.622 757.314 L-120.622 763.202 L-156.27 763.202 L-156.27 757.314 L-150.731 757.314 Q-153.978 755.468 -155.537 752.508 Q-157.129 749.548 -157.129 745.315 Q-157.129 744.71 -157.033 743.978 Q-156.97 743.246 -156.811 742.355 L-150.795 742.323 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-138.859 713.868 Q-145.225 713.868 -148.726 716.51 Q-152.227 719.12 -152.227 723.862 Q-152.227 728.573 -148.726 731.215 Q-145.225 733.825 -138.859 733.825 Q-132.525 733.825 -129.024 731.215 Q-125.523 728.573 -125.523 723.862 Q-125.523 719.12 -129.024 716.51 Q-132.525 713.868 -138.859 713.868 M-125.046 708.012 Q-115.943 708.012 -111.519 712.054 Q-107.063 716.096 -107.063 724.435 Q-107.063 727.522 -107.54 730.26 Q-107.986 732.997 -108.941 735.575 L-114.638 735.575 Q-113.237 732.997 -112.569 730.483 Q-111.901 727.968 -111.901 725.358 Q-111.901 719.597 -114.924 716.733 Q-117.916 713.868 -123.995 713.868 L-126.892 713.868 Q-123.741 715.682 -122.181 718.515 Q-120.622 721.348 -120.622 725.294 Q-120.622 731.851 -125.619 735.862 Q-130.616 739.872 -138.859 739.872 Q-147.135 739.872 -152.132 735.862 Q-157.129 731.851 -157.129 725.294 Q-157.129 721.348 -155.569 718.515 Q-154.01 715.682 -150.859 713.868 L-156.27 713.868 L-156.27 708.012 L-125.046 708.012 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M-117.311 681.116 Q-110.946 683.599 -109.004 685.954 Q-107.063 688.31 -107.063 692.256 L-107.063 696.935 L-111.964 696.935 L-111.964 693.498 Q-111.964 691.079 -113.11 689.742 Q-114.256 688.405 -118.521 686.782 L-121.195 685.732 L-156.27 700.15 L-156.27 693.943 L-128.388 682.803 L-156.27 671.663 L-156.27 665.457 L-117.311 681.116 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip312)\" cx=\"1123.22\" cy=\"1464\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"2289.08\" cy=\"1403.02\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"1123.22\" cy=\"978.292\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"2289.08\" cy=\"921.474\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"1123.22\" cy=\"921.474\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"2289.08\" cy=\"509.14\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"2289.08\" cy=\"509.14\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"920.402\" cy=\"509.14\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"1326.04\" cy=\"509.14\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"2289.08\" cy=\"472.743\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"1123.22\" cy=\"472.743\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"2289.08\" cy=\"439.927\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"166.42\" cy=\"88.5087\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"2080.02\" cy=\"88.5087\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"1179.7\" cy=\"88.5087\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip312)\" cx=\"1066.75\" cy=\"88.5087\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n</svg>\n","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"","category":"page"},{"location":"examples/quantum1d/1.ising-cft/","page":"The Ising CFT spectrum","title":"The Ising CFT spectrum","text":"This page was generated using Literate.jl.","category":"page"},{"location":"man/algorithms/#um_algorithms","page":"Algorithms","title":"Algorithms","text":"","category":"section"},{"location":"man/algorithms/#Minimizing-the-energy","page":"Algorithms","title":"Minimizing the energy","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"There are a number of different possible energy-minimization algorithms, depending on the system size. Exclusive to finite systems are","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"- DMRG\n\n- DMRG2","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"Exclusive to infinite systems are","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"- IDMRG\n\n- IDMRG2\n\n- VUMPS","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"with a last algorithm - GradientGrassmann - implemented for both finite and infinite systems.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"WindowMPS, which is a finite patch of mutable tensors embedded in an infinite MPS, is handled as a finite system where we only optimize over the patch of mutable tensors.","category":"page"},{"location":"man/algorithms/#DMRG","page":"Algorithms","title":"DMRG","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"state = FiniteMPS(20,ℂ^2,ℂ^10);\noperator = nonsym_ising_ham();\n(groundstate,environments,delta) = find_groundstate!(state,operator,DMRG())","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"The DMRG algorithm sweeps through the system, optimizing every site. Because of its single-site behaviour, this will always keep the bond dimension fixed. If you do want to increase the bond dimension dynamically, then there are two options. Either you use the two-site variant of DMRG (DMRG2()), or you make use of the finalize option. Finalize is a function that gets called at the end of every DMRG iteration. Within that function call one can modify the state.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"function my_finalize(iter,state,ham,envs)\n    println(\"Hello from iteration $iter\")\n    return state,envs;\nend\n\n(groundstate,environments,delta) = find_groundstate!(state,operator,DMRG(finalize = my_finalize))","category":"page"},{"location":"man/algorithms/#DMRG2","page":"Algorithms","title":"DMRG2","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"state = FiniteMPS(20,ℂ^2,ℂ^10);\noperator = nonsym_ising_ham();\n(groundstate,environments,delta) = find_groundstate!(state,operator,DMRG2(trscheme=truncbelow(1e-7)));","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"The twosite variant of DMRG, which optimizes blocks of two sites and then decomposes them into 2 MPS tensors using the svd decomposition. By truncating the singular values up to a desired precision, one can dynamically grow and shrink the bond dimension as needed. However, this truncation in turn introduces an error, which is why a state converged with DMRG2 can often be slightly further converged by subsequently using DMRG.","category":"page"},{"location":"man/algorithms/#IDMRG","page":"Algorithms","title":"IDMRG","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"state = InfiniteMPS([ℂ^2],[ℂ^10]);\noperator = nonsym_ising_ham();\n(groundstate,environments,delta) = find_groundstate(state,operator,IDMRG1())","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"The DMRG algorithm for finite systems can be generalized to infinite MPS. The idea is to start with a finite system and grow the system size, while we are sweeping through the system. This is again a single site algorithm, and therefore preserves the initial bond dimension.","category":"page"},{"location":"man/algorithms/#IDMRG2","page":"Algorithms","title":"IDMRG2","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"state = InfiniteMPS([ℂ^2,ℂ^2],[ℂ^10,ℂ^10]);\noperator = repeat(nonsym_ising_ham(),2);\n(groundstate,environments,delta) = find_groundstate(state,operator,IDMRG2(trscheme=truncbelow(1e-5)))","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"The generalization of DMRG2 to infinite systems has the same caveats as its finite counterpart. We furthermore require a unitcell ≥ 2. As a rule of thumb, a truncation cutoff of 1e-5 is already really good.","category":"page"},{"location":"man/algorithms/#VUMPS","page":"Algorithms","title":"VUMPS","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"VUMPS is an (I)DMRG inspired algorithm that can be used to find the groundstate of infinite matrix product states","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"state = InfiniteMPS([ℂ^2],[ℂ^10]);\noperator = nonsym_ising_ham();\n(groundstate,environments,delta) = find_groundstate(state,operator,VUMPS())","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"much like DMRG, it cannot modify the bond dimension, and this has to be done manually in the finalize function.","category":"page"},{"location":"man/algorithms/#Gradient-descent","page":"Algorithms","title":"Gradient descent","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"Both finite and infinite matrix product states can be parametrized by a set of unitary matrices, and we can then perform gradient descent on this unitary manifold. Due to some technical reasons (gauge freedom), this manifold further restricts to a grassmann manifold.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"state = InfiniteMPS([ℂ^2],[ℂ^10]);\noperator = nonsym_ising_ham();\n(groundstate,environments,delta) = find_groundstate(state,operator,GradientGrassmann())","category":"page"},{"location":"man/algorithms/#Time-evolution","page":"Algorithms","title":"Time evolution","text":"","category":"section"},{"location":"man/algorithms/#TDVP","page":"Algorithms","title":"TDVP","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"There is an implementation of the one-site TDVP scheme for finite and infinite MPS:","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"(newstate,environments) = timestep(state,operator,dt,TDVP())","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"and the two-site scheme for finite MPS (TDVP2()). Similarly to DMRG, the one site scheme will preserve the bond dimension, and expansion has to be done manually.","category":"page"},{"location":"man/algorithms/#Time-evolution-MPO","page":"Algorithms","title":"Time evolution MPO","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"We have rudimentary support for turning an MPO hamiltonian into a time evolution MPO.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"make_time_mpo(ham,dt,alg::WI)\nmake_time_mpo(ham,dt,alg::WII)","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"two algorithms are available, corresponding to different orders of precision. It is possible to then multiply a state by this MPO, or to approximate (MPO,state) by a new state","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"state = InfiniteMPS([ℂ^2],[ℂ^10]);\noperator = nonsym_ising_ham();\nmpo = make_time_mpo(operator,0.1,WII());\napproximate(state,(state,mpo),VUMPS())","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"This feature is at the moment not very well supported.","category":"page"},{"location":"man/algorithms/#Excitations","page":"Algorithms","title":"Excitations","text":"","category":"section"},{"location":"man/algorithms/#Quasiparticle-ansatz","page":"Algorithms","title":"Quasiparticle ansatz","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"We export code that implements the quasiparticle excitation ansatz for finite and infinite systems. For example, the following calculates the haldane gap for spin-1 heisenberg.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"th = nonsym_xxz_ham()\nts = InfiniteMPS([ℂ^3],[ℂ^48]);\n(ts,envs,_) = find_groundstate(ts,th,VUMPS(maxiter=400,verbose=false));\n(energies,Bs) = excitations(th,QuasiparticleAnsatz(),Float64(pi),ts,envs);\n@test energies[1] ≈ 0.41047925 atol=1e-4","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"For infinite systems you have to specify the momentum of your particle. In contrast, momentum is not a well defined quantum number and you therefore do not have to specify it when finding excitations on top of a finite MPS.","category":"page"},{"location":"man/algorithms/#Finite-excitations","page":"Algorithms","title":"Finite excitations","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"For finite systems we can also do something else - find the groundstate of the hamiltonian + weight sum_i  psi_i   psi_i. This is also supported by calling","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"th = nonsym_ising_ham()\nts = FiniteMPS(10,ℂ^2,ℂ^12);\n(ts,envs,_) = find_groundstate(ts,th,DMRG(verbose=false));\n(energies,Bs) = excitations(th,FiniteExcited(),ts,envs);","category":"page"},{"location":"man/algorithms/#changebonds","page":"Algorithms","title":"changebonds","text":"","category":"section"},{"location":"man/algorithms/#optimal-expand","page":"Algorithms","title":"optimal expand","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"One possible way to expand the bond dimension is described in the original VUMPS paper. The idea is to look at the 2site derivative and add the most important blocks orthogonal to the current MPS. From the point of view of a local 2site update, this procedure is 'optimal'.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"The state will remain physically unchanged, but a one-site scheme will now be able to push the optimization further.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"th = nonsym_ising_ham()\nts = FiniteMPS(10,ℂ^2,ℂ^12);\nchangebonds(ts,OptimalExpand(trscheme = truncdim(1))) # expand the bond dimension by 1","category":"page"},{"location":"man/algorithms/#random-expand","page":"Algorithms","title":"random expand","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"This algorithm is almost identical to optimal expand, except we don't try to do anything 'clever'. The unitary blocks that get added are chosen at random.","category":"page"},{"location":"man/algorithms/#svd-cut","page":"Algorithms","title":"svd cut","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"It is possible to truncate a state using the svd decomposition, this is implemented in svdcut.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"th = nonsym_ising_ham()\nts = FiniteMPS(10,ℂ^2,ℂ^12);\nchangebonds(ts,SvdCut(trscheme = truncdim(10))) # truncate the state to one with bond dimension 10","category":"page"},{"location":"man/algorithms/#VUMPS-svd-cut","page":"Algorithms","title":"VUMPS svd cut","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"A particularly simple scheme useful when doing VUMPS is to do a 2site update, and then truncating this back down. It changes the state itself, so cannot be used to do time evolution, but that is no problem for energy minimization.","category":"page"},{"location":"man/algorithms/#leading-boundary","page":"Algorithms","title":"leading boundary","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"For statmech partition functions we want to find the approximate leading boundary MPS.  Again this can be done with VUMPS:","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"th = nonsym_ising_mpo()\nts = InfiniteMPS([ℂ^2],[ℂ^20]);\n(ts,envs,_) = leading_boundary(ts,th,VUMPS(maxiter=400,verbose=false));","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"if the mpo satisfies certain properties (positive and hermitian), it may also be possible to use GradientGrassmann.","category":"page"},{"location":"man/algorithms/#approximate","page":"Algorithms","title":"approximate","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"Sometimes we want to approximate the product of an MPO and a state by another state (for example during time evolution). The call signature is","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"    approximate(initial_guess,(state,mpo),alg)","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"for finite systems alg can be Dmrg,Dmrg2 while for infinite systems we have Idmrg1,Idmrg2 and VUMPS. It's important to mention that the actual implementation differs a bit from the usual  Dmrg,Dmrg2,... for energy minimization but is rather inspired by it. For example, calling approximate with VUMPS actually uses an algorithm that has been described as VOMPS.","category":"page"},{"location":"man/algorithms/#Varia","page":"Algorithms","title":"Varia","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"What follows is a medley of lesser known (or used) algorithms and don't entirely fit under one of the above categories.","category":"page"},{"location":"man/algorithms/#Dynamical-DMRG","page":"Algorithms","title":"Dynamical DMRG","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"Dynamical DMRG has been described in other papers and is a way to find the propagator. The basic idea is that to calculate G(z) =  V  (H-z)^-1  V  , one can variationally find (H-z) W  =  V  and then the propagator simply equals G(z) =  V  W .","category":"page"},{"location":"man/algorithms/#fidelity-susceptibility","page":"Algorithms","title":"fidelity susceptibility","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"The fidelity susceptibility measures how much the groundstate changes when tuning a parameter in your hamiltonian. Divergences occur at phase transitions, making it a valuable measure when no order parameter is known.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"fidelity_susceptibility(groundstate,H_0,perturbing_Hams::AbstractVector)","category":"page"},{"location":"man/algorithms/#periodic-boundary-conditions","page":"Algorithms","title":"periodic boundary conditions","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"You can impose periodic boundary conditions on the hamiltonian itself, while still using a normal OBC finite matrix product states. This is straightforward to implement but competitive with more advanced PBC MPS algorithms.","category":"page"},{"location":"man/algorithms/#exact-diagonalization","page":"Algorithms","title":"exact diagonalization","text":"","category":"section"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"As a side effect, our code support exact diagonalization. The idea is to construct a finite matrix product state with maximal bond dimension, and then optimize the middle site. Because we never truncated the bond dimension, this single site effectively parametrizes the entire hilbert space.","category":"page"},{"location":"man/algorithms/","page":"Algorithms","title":"Algorithms","text":"exact_diagonalization(periodic_boundary_conditions(su2_xxx_ham(spin=1),10),which=:SR) # find the groundstate on 10 sites","category":"page"},{"location":"man/operators/#um_operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"man/operators/#DenseMPO","page":"Operators","title":"DenseMPO","text":"","category":"section"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"This operator is used for statistical physics problems. It is simply a periodic array of mpo tensors.","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"Can be created using","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"DenseMPO(t::AbstractArray{T,1}) where T<:MPOTensor","category":"page"},{"location":"man/operators/#SparseMPO","page":"Operators","title":"SparseMPO","text":"","category":"section"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"SparseMPO is similar to a DenseMPO, in that it again represents an mpo tensor, periodically repeated. However this type keeps track of all internal zero blocks, allowing for a more efficient representation of certain operators (such as time evolution operators and quantum hamiltonians). You can convert a sparse mpo to a densempo, but the converse does not hold.","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"Indexing a SparseMPO returns a SparseMPOSlice object, which has 3 fields","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"MPSKit.SparseMPOSlice","category":"page"},{"location":"man/operators/#MPSKit.SparseMPOSlice","page":"Operators","title":"MPSKit.SparseMPOSlice","text":"SparseMPOSlice{S,T,E} <: AbstractArray{T,2}\n\nA view of a sparse MPO at a single position.\n\nFields\n\nOs::AbstractMatrix{Union{T,E}}: matrix of operators.\ndomspaces::AbstractVector{S}: list of left virtual spaces.\nimspaces::AbstractVector{S}: list of right virtual spaces.\npspace::S: physical space.\n\n\n\n\n\n","category":"type"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"When indexing a SparseMPOSlice at index [j, k] (or equivalently SparseMPO[i][j, k]), the code looks up the corresponding field in Os[j, k]. Either that element is a tensormap, in which case it gets returned. If it equals zero(E), then we return a tensormap","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"domspaces[j] * pspace ← pspace * imspaces[k]","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"with norm zero. If the element is a nonzero number, then implicitly we have the identity operator there (multiplied by that element).","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"The idea here is that you don't have to worry about the underlying structure, you can just index into a sparsempo as if it is a vector of matrices. Behind the scenes we then optimize certain contractions by using the sparsity structure.","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"SparseMPO are always assumed to be periodic in the first index (position). In this way, we can both represent periodic infinite mpos and place dependent finite mpos.","category":"page"},{"location":"man/operators/#MPOHamiltonian","page":"Operators","title":"MPOHamiltonian","text":"","category":"section"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"We represent all quantum hamiltonians in their mpo form. As an example, the following bit of code constructs the ising hamiltonian.","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"sx, sy, sz, id = nonsym_spintensors(1 // 2)\ndata = Array{Any,3}(missing, 1, 3, 3)\ndata[1, 1, 1] = id\ndata[1, 1, 2] = -sz\ndata[1, 2, 3] = sz\ndata[1, 1, 3] = 3 * sx\nham = MPOHamiltonian(data);","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"When we work with symmetries, it is often not possible to represent the entire hamiltonian as a sum of a product of one-body operators. For example, in the XXZ Heisenberg model only the sum sx * sx + sy * sy + sz * sz is su(2) symmetric, but individually none of the terms are. It is for this reason that we use 4 leg mpo tensors in this hamiltonian object. The following bit of code","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"ham[1][1, 1]","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"Will print out a tensormap mapping virtual_space ⊗ physical_space to physical_space ⊗ virtual_space. The conversion to mpo tensors was done automagically behind the scenes!","category":"page"},{"location":"man/operators/","page":"Operators","title":"Operators","text":"An MPOHamiltonian is really just a SparseMPO, but with the garantuee that the sub-blocks are upper triangular. This effectively means that they are finite state machines, which are general enough to encode any hamiltonian but are efficient to construct environments for.","category":"page"},{"location":"#MPSKit.jl","page":"Home","title":"MPSKit.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Efficient and versatile tools for working with matrix product states","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"man/intro.md\",\"man/conventions.md\",\"man/states.md\",\"man/operators.md\",\"man/algorithms.md\",\"man/parallelism.md\"]\nDepth = 1","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MPSKit.jl is a part of the general registry, and can be installed via the package manager as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add MPSKit","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Construction and manipulation of Matrix Product States (MPS)\nCalculation of observables and expectation values\nVarious optimization methods for obtaining MPS fixed points\nSupport for both finite and infinite MPS\nSupport for wide variety of symmetries, including Abelian, non-Abelian, fermionic and anyonic symmetries","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To get started with MPSKit, we recommend also including TensorKit.jl and MPSKitModels.jl. The former defines the tensor backend which is used throughout MPSKit, while the latter includes some common operators and models.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TensorOperations\nusing TensorKit\nusing MPSKit\nusing MPSKitModels\nusing LinearAlgebra: norm","category":"page"},{"location":"#Finite-Matrix-Product-States","page":"Home","title":"Finite Matrix Product States","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using LinearAlgebra\nusing TensorOperations\nusing TensorKit\nusing MPSKit\nusing MPSKitModels","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finite MPS are characterised by a set of tensors, one for each site, which each have 3 legs. They can be constructed by specifying the virtual spaces and the physical spaces, i.e. the dimensions of each of the legs. These are then contracted to form the MPS. In MPSKit, they are represented by FiniteMPS, which can be constructed either by passing in the tensors directly, or by specifying the dimensions of the legs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"d = 2 # physical dimension\nD = 5 # virtual dimension\nL = 10 # number of sites\n\nmps = FiniteMPS(L, ComplexSpace(d), ComplexSpace(D)) # random MPS with maximal bond dimension D","category":"page"},{"location":"","page":"Home","title":"Home","text":"The FiniteMPS object then handles the gauging of the MPS, which is necessary for many of the algorithms. This is done automatically when needed, and the user can access the gauged tensors by getting and setting the AL, AR, CR/CL and AC fields, which each represent a vector of these tensors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"al = mps.AL[3] # left gauged tensor of the third site\n@tensor E[a; b] := al[c, d, b] * conj(al[c, d, a])\n@show isapprox(E, id(left_virtualspace(mps, 3)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"ar = mps.AR[3] # right gauged tensor of the third site\n@tensor E[a; b] := ar[a, d, c] * conj(ar[b, d, c])\n@show isapprox(E, id(right_virtualspace(mps, 2)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"As the mps will be kept in a gauged form, updating a tensor will also update the gauged tensors. For example, we can set the tensor of the third site to the identity, and the gauged tensors will be updated accordingly.","category":"page"},{"location":"","page":"Home","title":"Home","text":"mps.CR[3] = id(domain(mps.CR[3]))\nprintln(mps)","category":"page"},{"location":"","page":"Home","title":"Home","text":"These objects can then be used to compute observables and expectation values. For example, the expectation value of the identity operator at the third site, which is equal to the norm of the MPS, can be computed as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"N1 = LinearAlgebra.norm(mps)\nN2 = expectation_value(mps, id(physicalspace(mps, 3)), 3)\nprintln(\"‖mps‖ = $N1\")\nprintln(\"<mps|𝕀₃|mps> = $N2\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, the MPS can be optimized in order to determine groundstates of given Hamiltonians. Using the pre-defined models in MPSKitModels, we can construct the groundstate for the transverse field Ising model:","category":"page"},{"location":"","page":"Home","title":"Home","text":"H = transverse_field_ising(; J=1.0, g=0.5)\nfind_groundstate!(mps, H, DMRG(; maxiter=10))\nE0 = expectation_value(mps, H)\nprintln(\"<mps|H|mps> = $(sum(real(E0)) / length(mps))\")","category":"page"},{"location":"#Infinite-Matrix-Product-States","page":"Home","title":"Infinite Matrix Product States","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using LinearAlgebra\nusing TensorOperations\nusing TensorKit\nusing MPSKit\nusing MPSKitModels","category":"page"},{"location":"","page":"Home","title":"Home","text":"Similarly, an infinite MPS can be constructed by specifying the tensors for the unit cell, characterised by the spaces (dimensions) thereof.","category":"page"},{"location":"","page":"Home","title":"Home","text":"d = 2 # physical dimension\nD = 5 # virtual dimension\nmps = InfiniteMPS(d, D) # random MPS","category":"page"},{"location":"","page":"Home","title":"Home","text":"The InfiniteMPS object then handles the gauging of the MPS, which is necessary for many of the algorithms. This is done automatically upon creation of the object, and the user can access the gauged tensors by getting and setting the AL, AR, CR/CL and AC fields, which each represent a (periodic) vector of these tensors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"al = mps.AL[1] # left gauged tensor of the third site\n@tensor E[a; b] := al[c, d, b] * conj(al[c, d, a])\n@show isapprox(E, id(left_virtualspace(mps, 1)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"ar = mps.AR[1] # right gauged tensor of the third site\n@tensor E[a; b] := ar[a, d, c] * conj(ar[b, d, c])\n@show isapprox(E, id(right_virtualspace(mps, 2)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"As regauging the MPS is not possible without recomputing all the tensors, setting a single tensor is not supported. Instead, the user should construct a new mps object with the desired tensor, which will then be gauged upon construction.","category":"page"},{"location":"","page":"Home","title":"Home","text":"als = 3 .* mps.AL\nmps = InfiniteMPS(als)","category":"page"},{"location":"","page":"Home","title":"Home","text":"These objects can then be used to compute observables and expectation values. For example, the norm of the MPS, which is equal to the expectation value of the identity operator can be computed by:","category":"page"},{"location":"","page":"Home","title":"Home","text":"N1 = norm(mps)\nN2 = expectation_value(mps, id(physicalspace(mps, 1)), 1)\nprintln(\"‖mps‖ = $N1\")\nprintln(\"<mps|𝕀₁|mps> = $N2\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Normalization of infinite MPS\nBecause infinite MPS cannot sensibly be normalized to anything but 1, the norm of an infinite MPS is always set to be 1 at construction. If this were not the case, any observable computed from the MPS would either blow up to infinity or vanish to zero.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, the MPS can be optimized in order to determine groundstates of given Hamiltonians. Using the pre-defined models in MPSKitModels, we can construct the groundstate for the transverse field Ising model:","category":"page"},{"location":"","page":"Home","title":"Home","text":"H = transverse_field_ising(; J=1.0, g=0.5)\nmps, = find_groundstate(mps, H, VUMPS(; maxiter=10))\nE0 = expectation_value(mps, H)\nprintln(\"<mps|H|mps> = $(sum(real(E0)) / length(mps))\")","category":"page"},{"location":"#Additional-Resources","page":"Home","title":"Additional Resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For more detailed information on the functionality and capabilities of MPSKit, refer to the Manual section, or have a look at the Examples page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Keep in mind that the documentation is still a work in progress, and that some features may not be fully documented yet. If you encounter any issues or have questions, please check the library's issue tracker on the GitHub repository and open a new issue.","category":"page"}]
}
